# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/SpeedTrackerCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class SpeedTrackerCommand(genpy.Message):
  _md5sum = "8bbd615ad5a88ff6da152b220d857737"
  _type = "mrs_msgs/SpeedTrackerCommand"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# contains the frame_id = your reference frame of choice
std_msgs/Header header

# desired velocity [m/s], optional
geometry_msgs/Vector3 velocity

# desired acceleration [m/s^2], optional
geometry_msgs/Vector3 acceleration

# desired force [N], optional
geometry_msgs/Vector3 force

# height above ground, optional
float64 height

# desired heading and its rate, optional
# heading is "the azimuth of the body-x axis of the drone, a.k.a, the aircraft's front"
float64 heading
float64 heading_rate

# set to "true" if you want to control the state
bool use_velocity
bool use_acceleration
bool use_force
bool use_height
bool use_heading
bool use_heading_rate

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z"""
  __slots__ = ['header','velocity','acceleration','force','height','heading','heading_rate','use_velocity','use_acceleration','use_force','use_height','use_heading','use_heading_rate']
  _slot_types = ['std_msgs/Header','geometry_msgs/Vector3','geometry_msgs/Vector3','geometry_msgs/Vector3','float64','float64','float64','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,velocity,acceleration,force,height,heading,heading_rate,use_velocity,use_acceleration,use_force,use_height,use_heading,use_heading_rate

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpeedTrackerCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.force is None:
        self.force = geometry_msgs.msg.Vector3()
      if self.height is None:
        self.height = 0.
      if self.heading is None:
        self.heading = 0.
      if self.heading_rate is None:
        self.heading_rate = 0.
      if self.use_velocity is None:
        self.use_velocity = False
      if self.use_acceleration is None:
        self.use_acceleration = False
      if self.use_force is None:
        self.use_force = False
      if self.use_height is None:
        self.use_height = False
      if self.use_heading is None:
        self.use_heading = False
      if self.use_heading_rate is None:
        self.use_heading_rate = False
    else:
      self.header = std_msgs.msg.Header()
      self.velocity = geometry_msgs.msg.Vector3()
      self.acceleration = geometry_msgs.msg.Vector3()
      self.force = geometry_msgs.msg.Vector3()
      self.height = 0.
      self.heading = 0.
      self.heading_rate = 0.
      self.use_velocity = False
      self.use_acceleration = False
      self.use_force = False
      self.use_height = False
      self.use_heading = False
      self.use_heading_rate = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12d6B().pack(_x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.force.x, _x.force.y, _x.force.z, _x.height, _x.heading, _x.heading_rate, _x.use_velocity, _x.use_acceleration, _x.use_force, _x.use_height, _x.use_heading, _x.use_heading_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.force is None:
        self.force = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 102
      (_x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.force.x, _x.force.y, _x.force.z, _x.height, _x.heading, _x.heading_rate, _x.use_velocity, _x.use_acceleration, _x.use_force, _x.use_height, _x.use_heading, _x.use_heading_rate,) = _get_struct_12d6B().unpack(str[start:end])
      self.use_velocity = bool(self.use_velocity)
      self.use_acceleration = bool(self.use_acceleration)
      self.use_force = bool(self.use_force)
      self.use_height = bool(self.use_height)
      self.use_heading = bool(self.use_heading)
      self.use_heading_rate = bool(self.use_heading_rate)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_12d6B().pack(_x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.force.x, _x.force.y, _x.force.z, _x.height, _x.heading, _x.heading_rate, _x.use_velocity, _x.use_acceleration, _x.use_force, _x.use_height, _x.use_heading, _x.use_heading_rate))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Vector3()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Vector3()
      if self.force is None:
        self.force = geometry_msgs.msg.Vector3()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 102
      (_x.velocity.x, _x.velocity.y, _x.velocity.z, _x.acceleration.x, _x.acceleration.y, _x.acceleration.z, _x.force.x, _x.force.y, _x.force.z, _x.height, _x.heading, _x.heading_rate, _x.use_velocity, _x.use_acceleration, _x.use_force, _x.use_height, _x.use_heading, _x.use_heading_rate,) = _get_struct_12d6B().unpack(str[start:end])
      self.use_velocity = bool(self.use_velocity)
      self.use_acceleration = bool(self.use_acceleration)
      self.use_force = bool(self.use_force)
      self.use_height = bool(self.use_height)
      self.use_heading = bool(self.use_heading)
      self.use_heading_rate = bool(self.use_heading_rate)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_12d6B = None
def _get_struct_12d6B():
    global _struct_12d6B
    if _struct_12d6B is None:
        _struct_12d6B = struct.Struct("<12d6B")
    return _struct_12d6B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
