# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/Se3Gains.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Se3Gains(genpy.Message):
  _md5sum = "8f0afd0f6c3244e7db3d1f6e5db85f04"
  _type = "mrs_msgs/Se3Gains"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This a set of gains for the SE(3) controller.

# Horizontal position gain.
float64 kpxy

# Horizontal velocity gain.
float64 kvxy

# Horizontal acceleration gain.
float64 kaxy

# Vertical position gain.
float64 kpz

# Vertical velocity gain.
float64 kvz

# Vertical acceleration gain.
float64 kaz

# Roll+pitch attitude gain.
float64 kqxy

# Body disturbance gain.
float64 kibxy

# Body disturbance estimator limit ([N]).
float64 kibxy_lim

# World disturbance gain.
float64 kiwxy

# World disturbance estimator limit  ([N]).
float64 kiwxy_lim

# Yaw attitude gain.
float64 kqz

# Mass estimator gain.
float64 km

# Mass estimator limit ([m]).
float64 km_lim
"""
  __slots__ = ['kpxy','kvxy','kaxy','kpz','kvz','kaz','kqxy','kibxy','kibxy_lim','kiwxy','kiwxy_lim','kqz','km','km_lim']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       kpxy,kvxy,kaxy,kpz,kvz,kaz,kqxy,kibxy,kibxy_lim,kiwxy,kiwxy_lim,kqz,km,km_lim

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Se3Gains, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.kpxy is None:
        self.kpxy = 0.
      if self.kvxy is None:
        self.kvxy = 0.
      if self.kaxy is None:
        self.kaxy = 0.
      if self.kpz is None:
        self.kpz = 0.
      if self.kvz is None:
        self.kvz = 0.
      if self.kaz is None:
        self.kaz = 0.
      if self.kqxy is None:
        self.kqxy = 0.
      if self.kibxy is None:
        self.kibxy = 0.
      if self.kibxy_lim is None:
        self.kibxy_lim = 0.
      if self.kiwxy is None:
        self.kiwxy = 0.
      if self.kiwxy_lim is None:
        self.kiwxy_lim = 0.
      if self.kqz is None:
        self.kqz = 0.
      if self.km is None:
        self.km = 0.
      if self.km_lim is None:
        self.km_lim = 0.
    else:
      self.kpxy = 0.
      self.kvxy = 0.
      self.kaxy = 0.
      self.kpz = 0.
      self.kvz = 0.
      self.kaz = 0.
      self.kqxy = 0.
      self.kibxy = 0.
      self.kibxy_lim = 0.
      self.kiwxy = 0.
      self.kiwxy_lim = 0.
      self.kqz = 0.
      self.km = 0.
      self.km_lim = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14d().pack(_x.kpxy, _x.kvxy, _x.kaxy, _x.kpz, _x.kvz, _x.kaz, _x.kqxy, _x.kibxy, _x.kibxy_lim, _x.kiwxy, _x.kiwxy_lim, _x.kqz, _x.km, _x.km_lim))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.kpxy, _x.kvxy, _x.kaxy, _x.kpz, _x.kvz, _x.kaz, _x.kqxy, _x.kibxy, _x.kibxy_lim, _x.kiwxy, _x.kiwxy_lim, _x.kqz, _x.km, _x.km_lim,) = _get_struct_14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14d().pack(_x.kpxy, _x.kvxy, _x.kaxy, _x.kpz, _x.kvz, _x.kaz, _x.kqxy, _x.kibxy, _x.kibxy_lim, _x.kiwxy, _x.kiwxy_lim, _x.kqz, _x.km, _x.km_lim))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 112
      (_x.kpxy, _x.kvxy, _x.kaxy, _x.kpz, _x.kvz, _x.kaz, _x.kqxy, _x.kibxy, _x.kibxy_lim, _x.kiwxy, _x.kiwxy_lim, _x.kqz, _x.km, _x.km_lim,) = _get_struct_14d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14d = None
def _get_struct_14d():
    global _struct_14d
    if _struct_14d is None:
        _struct_14d = struct.Struct("<14d")
    return _struct_14d
