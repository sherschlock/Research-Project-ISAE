# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/MpcTrackerDiagnostics.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class MpcTrackerDiagnostics(genpy.Message):
  _md5sum = "3fcb4d421dc34e3a114f4a7a3e1f6ee8"
  _type = "mrs_msgs/MpcTrackerDiagnostics"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

string uav_name
bool active
bool collision_avoidance_active
bool avoiding_collision
string[] avoidance_active_uavs
geometry_msgs/Pose setpoint

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['header','uav_name','active','collision_avoidance_active','avoiding_collision','avoidance_active_uavs','setpoint']
  _slot_types = ['std_msgs/Header','string','bool','bool','bool','string[]','geometry_msgs/Pose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,uav_name,active,collision_avoidance_active,avoiding_collision,avoidance_active_uavs,setpoint

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MpcTrackerDiagnostics, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.uav_name is None:
        self.uav_name = ''
      if self.active is None:
        self.active = False
      if self.collision_avoidance_active is None:
        self.collision_avoidance_active = False
      if self.avoiding_collision is None:
        self.avoiding_collision = False
      if self.avoidance_active_uavs is None:
        self.avoidance_active_uavs = []
      if self.setpoint is None:
        self.setpoint = geometry_msgs.msg.Pose()
    else:
      self.header = std_msgs.msg.Header()
      self.uav_name = ''
      self.active = False
      self.collision_avoidance_active = False
      self.avoiding_collision = False
      self.avoidance_active_uavs = []
      self.setpoint = geometry_msgs.msg.Pose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.uav_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.active, _x.collision_avoidance_active, _x.avoiding_collision))
      length = len(self.avoidance_active_uavs)
      buff.write(_struct_I.pack(length))
      for val1 in self.avoidance_active_uavs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_7d().pack(_x.setpoint.position.x, _x.setpoint.position.y, _x.setpoint.position.z, _x.setpoint.orientation.x, _x.setpoint.orientation.y, _x.setpoint.orientation.z, _x.setpoint.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.setpoint is None:
        self.setpoint = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uav_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uav_name = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.active, _x.collision_avoidance_active, _x.avoiding_collision,) = _get_struct_3B().unpack(str[start:end])
      self.active = bool(self.active)
      self.collision_avoidance_active = bool(self.collision_avoidance_active)
      self.avoiding_collision = bool(self.avoiding_collision)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.avoidance_active_uavs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.avoidance_active_uavs.append(val1)
      _x = self
      start = end
      end += 56
      (_x.setpoint.position.x, _x.setpoint.position.y, _x.setpoint.position.z, _x.setpoint.orientation.x, _x.setpoint.orientation.y, _x.setpoint.orientation.z, _x.setpoint.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.uav_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.active, _x.collision_avoidance_active, _x.avoiding_collision))
      length = len(self.avoidance_active_uavs)
      buff.write(_struct_I.pack(length))
      for val1 in self.avoidance_active_uavs:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self
      buff.write(_get_struct_7d().pack(_x.setpoint.position.x, _x.setpoint.position.y, _x.setpoint.position.z, _x.setpoint.orientation.x, _x.setpoint.orientation.y, _x.setpoint.orientation.z, _x.setpoint.orientation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.setpoint is None:
        self.setpoint = geometry_msgs.msg.Pose()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uav_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uav_name = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.active, _x.collision_avoidance_active, _x.avoiding_collision,) = _get_struct_3B().unpack(str[start:end])
      self.active = bool(self.active)
      self.collision_avoidance_active = bool(self.collision_avoidance_active)
      self.avoiding_collision = bool(self.avoiding_collision)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.avoidance_active_uavs = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.avoidance_active_uavs.append(val1)
      _x = self
      start = end
      end += 56
      (_x.setpoint.position.x, _x.setpoint.position.y, _x.setpoint.position.z, _x.setpoint.orientation.x, _x.setpoint.orientation.y, _x.setpoint.orientation.z, _x.setpoint.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
