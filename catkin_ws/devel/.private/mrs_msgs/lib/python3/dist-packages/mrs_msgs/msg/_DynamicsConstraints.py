# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/DynamicsConstraints.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class DynamicsConstraints(genpy.Message):
  _md5sum = "9b79235a15953215e436f7e546e99c44"
  _type = "mrs_msgs/DynamicsConstraints"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# UAV dynamics constraints

# speed: m/s
# acceleration: m/s^2
# jerk: m/s^3
# snap: m/s^4

# translational dynamics

float64 horizontal_speed
float64 horizontal_acceleration
float64 horizontal_jerk
float64 horizontal_snap

float64 vertical_ascending_speed
float64 vertical_ascending_acceleration
float64 vertical_ascending_jerk
float64 vertical_ascending_snap

float64 vertical_descending_speed
float64 vertical_descending_acceleration
float64 vertical_descending_jerk
float64 vertical_descending_snap

# heading

float64 heading_speed
float64 heading_acceleration
float64 heading_jerk
float64 heading_snap

# angular rates: rad/s

float64 roll_rate
float64 pitch_rate
float64 yaw_rate

# maximum tilt, rad
# max angle between body-3 and world-3 axes

float64 tilt
"""
  __slots__ = ['horizontal_speed','horizontal_acceleration','horizontal_jerk','horizontal_snap','vertical_ascending_speed','vertical_ascending_acceleration','vertical_ascending_jerk','vertical_ascending_snap','vertical_descending_speed','vertical_descending_acceleration','vertical_descending_jerk','vertical_descending_snap','heading_speed','heading_acceleration','heading_jerk','heading_snap','roll_rate','pitch_rate','yaw_rate','tilt']
  _slot_types = ['float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       horizontal_speed,horizontal_acceleration,horizontal_jerk,horizontal_snap,vertical_ascending_speed,vertical_ascending_acceleration,vertical_ascending_jerk,vertical_ascending_snap,vertical_descending_speed,vertical_descending_acceleration,vertical_descending_jerk,vertical_descending_snap,heading_speed,heading_acceleration,heading_jerk,heading_snap,roll_rate,pitch_rate,yaw_rate,tilt

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(DynamicsConstraints, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.horizontal_speed is None:
        self.horizontal_speed = 0.
      if self.horizontal_acceleration is None:
        self.horizontal_acceleration = 0.
      if self.horizontal_jerk is None:
        self.horizontal_jerk = 0.
      if self.horizontal_snap is None:
        self.horizontal_snap = 0.
      if self.vertical_ascending_speed is None:
        self.vertical_ascending_speed = 0.
      if self.vertical_ascending_acceleration is None:
        self.vertical_ascending_acceleration = 0.
      if self.vertical_ascending_jerk is None:
        self.vertical_ascending_jerk = 0.
      if self.vertical_ascending_snap is None:
        self.vertical_ascending_snap = 0.
      if self.vertical_descending_speed is None:
        self.vertical_descending_speed = 0.
      if self.vertical_descending_acceleration is None:
        self.vertical_descending_acceleration = 0.
      if self.vertical_descending_jerk is None:
        self.vertical_descending_jerk = 0.
      if self.vertical_descending_snap is None:
        self.vertical_descending_snap = 0.
      if self.heading_speed is None:
        self.heading_speed = 0.
      if self.heading_acceleration is None:
        self.heading_acceleration = 0.
      if self.heading_jerk is None:
        self.heading_jerk = 0.
      if self.heading_snap is None:
        self.heading_snap = 0.
      if self.roll_rate is None:
        self.roll_rate = 0.
      if self.pitch_rate is None:
        self.pitch_rate = 0.
      if self.yaw_rate is None:
        self.yaw_rate = 0.
      if self.tilt is None:
        self.tilt = 0.
    else:
      self.horizontal_speed = 0.
      self.horizontal_acceleration = 0.
      self.horizontal_jerk = 0.
      self.horizontal_snap = 0.
      self.vertical_ascending_speed = 0.
      self.vertical_ascending_acceleration = 0.
      self.vertical_ascending_jerk = 0.
      self.vertical_ascending_snap = 0.
      self.vertical_descending_speed = 0.
      self.vertical_descending_acceleration = 0.
      self.vertical_descending_jerk = 0.
      self.vertical_descending_snap = 0.
      self.heading_speed = 0.
      self.heading_acceleration = 0.
      self.heading_jerk = 0.
      self.heading_snap = 0.
      self.roll_rate = 0.
      self.pitch_rate = 0.
      self.yaw_rate = 0.
      self.tilt = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_20d().pack(_x.horizontal_speed, _x.horizontal_acceleration, _x.horizontal_jerk, _x.horizontal_snap, _x.vertical_ascending_speed, _x.vertical_ascending_acceleration, _x.vertical_ascending_jerk, _x.vertical_ascending_snap, _x.vertical_descending_speed, _x.vertical_descending_acceleration, _x.vertical_descending_jerk, _x.vertical_descending_snap, _x.heading_speed, _x.heading_acceleration, _x.heading_jerk, _x.heading_snap, _x.roll_rate, _x.pitch_rate, _x.yaw_rate, _x.tilt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 160
      (_x.horizontal_speed, _x.horizontal_acceleration, _x.horizontal_jerk, _x.horizontal_snap, _x.vertical_ascending_speed, _x.vertical_ascending_acceleration, _x.vertical_ascending_jerk, _x.vertical_ascending_snap, _x.vertical_descending_speed, _x.vertical_descending_acceleration, _x.vertical_descending_jerk, _x.vertical_descending_snap, _x.heading_speed, _x.heading_acceleration, _x.heading_jerk, _x.heading_snap, _x.roll_rate, _x.pitch_rate, _x.yaw_rate, _x.tilt,) = _get_struct_20d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_20d().pack(_x.horizontal_speed, _x.horizontal_acceleration, _x.horizontal_jerk, _x.horizontal_snap, _x.vertical_ascending_speed, _x.vertical_ascending_acceleration, _x.vertical_ascending_jerk, _x.vertical_ascending_snap, _x.vertical_descending_speed, _x.vertical_descending_acceleration, _x.vertical_descending_jerk, _x.vertical_descending_snap, _x.heading_speed, _x.heading_acceleration, _x.heading_jerk, _x.heading_snap, _x.roll_rate, _x.pitch_rate, _x.yaw_rate, _x.tilt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 160
      (_x.horizontal_speed, _x.horizontal_acceleration, _x.horizontal_jerk, _x.horizontal_snap, _x.vertical_ascending_speed, _x.vertical_ascending_acceleration, _x.vertical_ascending_jerk, _x.vertical_ascending_snap, _x.vertical_descending_speed, _x.vertical_descending_acceleration, _x.vertical_descending_jerk, _x.vertical_descending_snap, _x.heading_speed, _x.heading_acceleration, _x.heading_jerk, _x.heading_snap, _x.roll_rate, _x.pitch_rate, _x.yaw_rate, _x.tilt,) = _get_struct_20d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20d = None
def _get_struct_20d():
    global _struct_20d
    if _struct_20d is None:
        _struct_20d = struct.Struct("<20d")
    return _struct_20d
