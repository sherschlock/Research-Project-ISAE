# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/UavState.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import mrs_msgs.msg
import std_msgs.msg

class UavState(genpy.Message):
  _md5sum = "1503d21903aa0842a248ee0ea90f32c2"
  _type = "mrs_msgs/UavState"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
string child_frame_id

# text names of the used estimators
mrs_msgs/EstimatorType estimator_horizontal
mrs_msgs/AltitudeType estimator_vertical
mrs_msgs/HeadingType estimator_heading

# initiated with 0
# increases if any estimator changes frame of reference
# or if any estimator is resetted
uint32 estimator_iteration

geometry_msgs/Pose pose
geometry_msgs/Twist velocity
geometry_msgs/Accel acceleration
geometry_msgs/Accel acceleration_disturbance

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: mrs_msgs/EstimatorType
uint8 OPTFLOW=0
uint8 GPS=1
uint8 OPTFLOWGPS=2
uint8 RTK=3
uint8 VIO=4
uint8 BRICK=5
uint8 T265=6
uint8 HECTOR=7
uint8 BRICKFLOW=8
uint8 VSLAM=9
uint8 ICP=10
uint8 ALOAM=11
uint8 ALOAMGARM=12
uint8 ALOAMREP=13
uint8 LIOSAM=14
uint8 UWB=15

uint8 TYPE_COUNT=16

string name
uint8 type

================================================================================
MSG: mrs_msgs/AltitudeType
uint8 HEIGHT=0
uint8 PLANE=1
uint8 BRICK=2
uint8 VIO=3
uint8 ALOAM=4
uint8 ALOAMGARM=5
uint8 ALOAMREP=6
uint8 BARO=7
uint8 RTK=8
uint8 LIOSAM=9

uint8 TYPE_COUNT=10

string name
uint8 type

================================================================================
MSG: mrs_msgs/HeadingType
uint8 PIXHAWK=0
uint8 GYRO=1
uint8 COMPASS=2
uint8 OPTFLOW=3
uint8 HECTOR=4
uint8 BRICK=5
uint8 VIO=6
uint8 VSLAM=7
uint8 ICP=8
uint8 BRICKFLOW=9
uint8 ALOAM=10
uint8 ALOAMREP=11
uint8 LIOSAM=12

uint8 TYPE_COUNT=13

string name
uint8 type

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Accel
# This expresses acceleration in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular
"""
  __slots__ = ['header','child_frame_id','estimator_horizontal','estimator_vertical','estimator_heading','estimator_iteration','pose','velocity','acceleration','acceleration_disturbance']
  _slot_types = ['std_msgs/Header','string','mrs_msgs/EstimatorType','mrs_msgs/AltitudeType','mrs_msgs/HeadingType','uint32','geometry_msgs/Pose','geometry_msgs/Twist','geometry_msgs/Accel','geometry_msgs/Accel']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,child_frame_id,estimator_horizontal,estimator_vertical,estimator_heading,estimator_iteration,pose,velocity,acceleration,acceleration_disturbance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(UavState, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.child_frame_id is None:
        self.child_frame_id = ''
      if self.estimator_horizontal is None:
        self.estimator_horizontal = mrs_msgs.msg.EstimatorType()
      if self.estimator_vertical is None:
        self.estimator_vertical = mrs_msgs.msg.AltitudeType()
      if self.estimator_heading is None:
        self.estimator_heading = mrs_msgs.msg.HeadingType()
      if self.estimator_iteration is None:
        self.estimator_iteration = 0
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Accel()
      if self.acceleration_disturbance is None:
        self.acceleration_disturbance = geometry_msgs.msg.Accel()
    else:
      self.header = std_msgs.msg.Header()
      self.child_frame_id = ''
      self.estimator_horizontal = mrs_msgs.msg.EstimatorType()
      self.estimator_vertical = mrs_msgs.msg.AltitudeType()
      self.estimator_heading = mrs_msgs.msg.HeadingType()
      self.estimator_iteration = 0
      self.pose = geometry_msgs.msg.Pose()
      self.velocity = geometry_msgs.msg.Twist()
      self.acceleration = geometry_msgs.msg.Accel()
      self.acceleration_disturbance = geometry_msgs.msg.Accel()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.estimator_horizontal.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.estimator_horizontal.type
      buff.write(_get_struct_B().pack(_x))
      _x = self.estimator_vertical.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.estimator_vertical.type
      buff.write(_get_struct_B().pack(_x))
      _x = self.estimator_heading.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI25d().pack(_x.estimator_heading.type, _x.estimator_iteration, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.acceleration_disturbance.linear.x, _x.acceleration_disturbance.linear.y, _x.acceleration_disturbance.linear.z, _x.acceleration_disturbance.angular.x, _x.acceleration_disturbance.angular.y, _x.acceleration_disturbance.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.estimator_horizontal is None:
        self.estimator_horizontal = mrs_msgs.msg.EstimatorType()
      if self.estimator_vertical is None:
        self.estimator_vertical = mrs_msgs.msg.AltitudeType()
      if self.estimator_heading is None:
        self.estimator_heading = mrs_msgs.msg.HeadingType()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Accel()
      if self.acceleration_disturbance is None:
        self.acceleration_disturbance = geometry_msgs.msg.Accel()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.child_frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estimator_horizontal.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.estimator_horizontal.name = str[start:end]
      start = end
      end += 1
      (self.estimator_horizontal.type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estimator_vertical.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.estimator_vertical.name = str[start:end]
      start = end
      end += 1
      (self.estimator_vertical.type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estimator_heading.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.estimator_heading.name = str[start:end]
      _x = self
      start = end
      end += 205
      (_x.estimator_heading.type, _x.estimator_iteration, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.acceleration_disturbance.linear.x, _x.acceleration_disturbance.linear.y, _x.acceleration_disturbance.linear.z, _x.acceleration_disturbance.angular.x, _x.acceleration_disturbance.angular.y, _x.acceleration_disturbance.angular.z,) = _get_struct_BI25d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.estimator_horizontal.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.estimator_horizontal.type
      buff.write(_get_struct_B().pack(_x))
      _x = self.estimator_vertical.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.estimator_vertical.type
      buff.write(_get_struct_B().pack(_x))
      _x = self.estimator_heading.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI25d().pack(_x.estimator_heading.type, _x.estimator_iteration, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.acceleration_disturbance.linear.x, _x.acceleration_disturbance.linear.y, _x.acceleration_disturbance.linear.z, _x.acceleration_disturbance.angular.x, _x.acceleration_disturbance.angular.y, _x.acceleration_disturbance.angular.z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.estimator_horizontal is None:
        self.estimator_horizontal = mrs_msgs.msg.EstimatorType()
      if self.estimator_vertical is None:
        self.estimator_vertical = mrs_msgs.msg.AltitudeType()
      if self.estimator_heading is None:
        self.estimator_heading = mrs_msgs.msg.HeadingType()
      if self.pose is None:
        self.pose = geometry_msgs.msg.Pose()
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.acceleration is None:
        self.acceleration = geometry_msgs.msg.Accel()
      if self.acceleration_disturbance is None:
        self.acceleration_disturbance = geometry_msgs.msg.Accel()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.child_frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estimator_horizontal.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.estimator_horizontal.name = str[start:end]
      start = end
      end += 1
      (self.estimator_horizontal.type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estimator_vertical.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.estimator_vertical.name = str[start:end]
      start = end
      end += 1
      (self.estimator_vertical.type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estimator_heading.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.estimator_heading.name = str[start:end]
      _x = self
      start = end
      end += 205
      (_x.estimator_heading.type, _x.estimator_iteration, _x.pose.position.x, _x.pose.position.y, _x.pose.position.z, _x.pose.orientation.x, _x.pose.orientation.y, _x.pose.orientation.z, _x.pose.orientation.w, _x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.acceleration.linear.x, _x.acceleration.linear.y, _x.acceleration.linear.z, _x.acceleration.angular.x, _x.acceleration.angular.y, _x.acceleration.angular.z, _x.acceleration_disturbance.linear.x, _x.acceleration_disturbance.linear.y, _x.acceleration_disturbance.linear.z, _x.acceleration_disturbance.angular.x, _x.acceleration_disturbance.angular.y, _x.acceleration_disturbance.angular.z,) = _get_struct_BI25d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_BI25d = None
def _get_struct_BI25d():
    global _struct_BI25d
    if _struct_BI25d is None:
        _struct_BI25d = struct.Struct("<BI25d")
    return _struct_BI25d
