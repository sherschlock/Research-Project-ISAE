# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/OdometryDiag.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mrs_msgs.msg
import std_msgs.msg

class OdometryDiag(genpy.Message):
  _md5sum = "b3eedf113f8464b7a0aafebba055d3cd"
  _type = "mrs_msgs/OdometryDiag"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """std_msgs/Header header
float64 max_altitude
mrs_msgs/EstimatorType estimator_type
mrs_msgs/HeadingType heading_type
mrs_msgs/AltitudeType altitude_type
string[] available_lat_estimators
string[] available_hdg_estimators
string[] available_alt_estimators

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: mrs_msgs/EstimatorType
uint8 OPTFLOW=0
uint8 GPS=1
uint8 OPTFLOWGPS=2
uint8 RTK=3
uint8 VIO=4
uint8 BRICK=5
uint8 T265=6
uint8 HECTOR=7
uint8 BRICKFLOW=8
uint8 VSLAM=9
uint8 ICP=10
uint8 ALOAM=11
uint8 ALOAMGARM=12
uint8 ALOAMREP=13
uint8 LIOSAM=14
uint8 UWB=15

uint8 TYPE_COUNT=16

string name
uint8 type

================================================================================
MSG: mrs_msgs/HeadingType
uint8 PIXHAWK=0
uint8 GYRO=1
uint8 COMPASS=2
uint8 OPTFLOW=3
uint8 HECTOR=4
uint8 BRICK=5
uint8 VIO=6
uint8 VSLAM=7
uint8 ICP=8
uint8 BRICKFLOW=9
uint8 ALOAM=10
uint8 ALOAMREP=11
uint8 LIOSAM=12

uint8 TYPE_COUNT=13

string name
uint8 type

================================================================================
MSG: mrs_msgs/AltitudeType
uint8 HEIGHT=0
uint8 PLANE=1
uint8 BRICK=2
uint8 VIO=3
uint8 ALOAM=4
uint8 ALOAMGARM=5
uint8 ALOAMREP=6
uint8 BARO=7
uint8 RTK=8
uint8 LIOSAM=9

uint8 TYPE_COUNT=10

string name
uint8 type
"""
  __slots__ = ['header','max_altitude','estimator_type','heading_type','altitude_type','available_lat_estimators','available_hdg_estimators','available_alt_estimators']
  _slot_types = ['std_msgs/Header','float64','mrs_msgs/EstimatorType','mrs_msgs/HeadingType','mrs_msgs/AltitudeType','string[]','string[]','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,max_altitude,estimator_type,heading_type,altitude_type,available_lat_estimators,available_hdg_estimators,available_alt_estimators

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OdometryDiag, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.max_altitude is None:
        self.max_altitude = 0.
      if self.estimator_type is None:
        self.estimator_type = mrs_msgs.msg.EstimatorType()
      if self.heading_type is None:
        self.heading_type = mrs_msgs.msg.HeadingType()
      if self.altitude_type is None:
        self.altitude_type = mrs_msgs.msg.AltitudeType()
      if self.available_lat_estimators is None:
        self.available_lat_estimators = []
      if self.available_hdg_estimators is None:
        self.available_hdg_estimators = []
      if self.available_alt_estimators is None:
        self.available_alt_estimators = []
    else:
      self.header = std_msgs.msg.Header()
      self.max_altitude = 0.
      self.estimator_type = mrs_msgs.msg.EstimatorType()
      self.heading_type = mrs_msgs.msg.HeadingType()
      self.altitude_type = mrs_msgs.msg.AltitudeType()
      self.available_lat_estimators = []
      self.available_hdg_estimators = []
      self.available_alt_estimators = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.max_altitude
      buff.write(_get_struct_d().pack(_x))
      _x = self.estimator_type.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.estimator_type.type
      buff.write(_get_struct_B().pack(_x))
      _x = self.heading_type.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.heading_type.type
      buff.write(_get_struct_B().pack(_x))
      _x = self.altitude_type.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.altitude_type.type
      buff.write(_get_struct_B().pack(_x))
      length = len(self.available_lat_estimators)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_lat_estimators:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.available_hdg_estimators)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_hdg_estimators:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.available_alt_estimators)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_alt_estimators:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.estimator_type is None:
        self.estimator_type = mrs_msgs.msg.EstimatorType()
      if self.heading_type is None:
        self.heading_type = mrs_msgs.msg.HeadingType()
      if self.altitude_type is None:
        self.altitude_type = mrs_msgs.msg.AltitudeType()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.max_altitude,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estimator_type.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.estimator_type.name = str[start:end]
      start = end
      end += 1
      (self.estimator_type.type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.heading_type.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.heading_type.name = str[start:end]
      start = end
      end += 1
      (self.heading_type.type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.altitude_type.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.altitude_type.name = str[start:end]
      start = end
      end += 1
      (self.altitude_type.type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_lat_estimators = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available_lat_estimators.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_hdg_estimators = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available_hdg_estimators.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_alt_estimators = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available_alt_estimators.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.max_altitude
      buff.write(_get_struct_d().pack(_x))
      _x = self.estimator_type.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.estimator_type.type
      buff.write(_get_struct_B().pack(_x))
      _x = self.heading_type.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.heading_type.type
      buff.write(_get_struct_B().pack(_x))
      _x = self.altitude_type.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.altitude_type.type
      buff.write(_get_struct_B().pack(_x))
      length = len(self.available_lat_estimators)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_lat_estimators:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.available_hdg_estimators)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_hdg_estimators:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.available_alt_estimators)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_alt_estimators:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.estimator_type is None:
        self.estimator_type = mrs_msgs.msg.EstimatorType()
      if self.heading_type is None:
        self.heading_type = mrs_msgs.msg.HeadingType()
      if self.altitude_type is None:
        self.altitude_type = mrs_msgs.msg.AltitudeType()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 8
      (self.max_altitude,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estimator_type.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.estimator_type.name = str[start:end]
      start = end
      end += 1
      (self.estimator_type.type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.heading_type.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.heading_type.name = str[start:end]
      start = end
      end += 1
      (self.heading_type.type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.altitude_type.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.altitude_type.name = str[start:end]
      start = end
      end += 1
      (self.altitude_type.type,) = _get_struct_B().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_lat_estimators = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available_lat_estimators.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_hdg_estimators = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available_hdg_estimators.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_alt_estimators = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available_alt_estimators.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
