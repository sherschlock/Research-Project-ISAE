# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/GainManagerDiagnostics.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import mrs_msgs.msg

class GainManagerDiagnostics(genpy.Message):
  _md5sum = "24039f9a2906ae6c07ed9b74d96b96e7"
  _type = "mrs_msgs/GainManagerDiagnostics"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# The diagnostics of the GainManager.

time stamp

# The list of all loaded gains.
string[] loaded

# The list of gains which are available for the currently active state estimator.
string[] available

# The name of the current gains.
string current_name

# The particular values of the current gains.
mrs_msgs/Se3Gains current_values

================================================================================
MSG: mrs_msgs/Se3Gains
# This a set of gains for the SE(3) controller.

# Horizontal position gain.
float64 kpxy

# Horizontal velocity gain.
float64 kvxy

# Horizontal acceleration gain.
float64 kaxy

# Vertical position gain.
float64 kpz

# Vertical velocity gain.
float64 kvz

# Vertical acceleration gain.
float64 kaz

# Roll+pitch attitude gain.
float64 kqxy

# Body disturbance gain.
float64 kibxy

# Body disturbance estimator limit ([N]).
float64 kibxy_lim

# World disturbance gain.
float64 kiwxy

# World disturbance estimator limit  ([N]).
float64 kiwxy_lim

# Yaw attitude gain.
float64 kqz

# Mass estimator gain.
float64 km

# Mass estimator limit ([m]).
float64 km_lim
"""
  __slots__ = ['stamp','loaded','available','current_name','current_values']
  _slot_types = ['time','string[]','string[]','string','mrs_msgs/Se3Gains']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,loaded,available,current_name,current_values

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GainManagerDiagnostics, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.loaded is None:
        self.loaded = []
      if self.available is None:
        self.available = []
      if self.current_name is None:
        self.current_name = ''
      if self.current_values is None:
        self.current_values = mrs_msgs.msg.Se3Gains()
    else:
      self.stamp = genpy.Time()
      self.loaded = []
      self.available = []
      self.current_name = ''
      self.current_values = mrs_msgs.msg.Se3Gains()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      length = len(self.loaded)
      buff.write(_struct_I.pack(length))
      for val1 in self.loaded:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.available)
      buff.write(_struct_I.pack(length))
      for val1 in self.available:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.current_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d().pack(_x.current_values.kpxy, _x.current_values.kvxy, _x.current_values.kaxy, _x.current_values.kpz, _x.current_values.kvz, _x.current_values.kaz, _x.current_values.kqxy, _x.current_values.kibxy, _x.current_values.kibxy_lim, _x.current_values.kiwxy, _x.current_values.kiwxy_lim, _x.current_values.kqz, _x.current_values.km, _x.current_values.km_lim))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.current_values is None:
        self.current_values = mrs_msgs.msg.Se3Gains()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.loaded = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.loaded.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_name = str[start:end]
      _x = self
      start = end
      end += 112
      (_x.current_values.kpxy, _x.current_values.kvxy, _x.current_values.kaxy, _x.current_values.kpz, _x.current_values.kvz, _x.current_values.kaz, _x.current_values.kqxy, _x.current_values.kibxy, _x.current_values.kibxy_lim, _x.current_values.kiwxy, _x.current_values.kiwxy_lim, _x.current_values.kqz, _x.current_values.km, _x.current_values.km_lim,) = _get_struct_14d().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      length = len(self.loaded)
      buff.write(_struct_I.pack(length))
      for val1 in self.loaded:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.available)
      buff.write(_struct_I.pack(length))
      for val1 in self.available:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.current_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_14d().pack(_x.current_values.kpxy, _x.current_values.kvxy, _x.current_values.kaxy, _x.current_values.kpz, _x.current_values.kvz, _x.current_values.kaz, _x.current_values.kqxy, _x.current_values.kibxy, _x.current_values.kibxy_lim, _x.current_values.kiwxy, _x.current_values.kiwxy_lim, _x.current_values.kqz, _x.current_values.km, _x.current_values.km_lim))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.current_values is None:
        self.current_values = mrs_msgs.msg.Se3Gains()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.loaded = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.loaded.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_name = str[start:end]
      _x = self
      start = end
      end += 112
      (_x.current_values.kpxy, _x.current_values.kvxy, _x.current_values.kaxy, _x.current_values.kpz, _x.current_values.kvz, _x.current_values.kaz, _x.current_values.kqxy, _x.current_values.kibxy, _x.current_values.kibxy_lim, _x.current_values.kiwxy, _x.current_values.kiwxy_lim, _x.current_values.kqz, _x.current_values.km, _x.current_values.km_lim,) = _get_struct_14d().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14d = None
def _get_struct_14d():
    global _struct_14d
    if _struct_14d is None:
        _struct_14d = struct.Struct("<14d")
    return _struct_14d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
