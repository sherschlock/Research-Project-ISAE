# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/ControlManagerDiagnostics.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import mrs_msgs.msg
import std_msgs.msg

class ControlManagerDiagnostics(genpy.Message):
  _md5sum = "739e0d9e7c44e1a1b9b450d58889c80b"
  _type = "mrs_msgs/ControlManagerDiagnostics"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# This reports on the state of the ControlManager and the currently active tracker and controller.

time stamp
string uav_name

# If the motors are enabled, in other words, if the output of the ControlManager can pass out.
bool motors

# True if the UAV is flying and no special case occurred (emergency land, failsafe, etc.).
bool flying_normally

# True if under the "RC Joystick" mode
bool rc_mode

# The name of the currently active tracker, as defined in the trackers.yaml in the "mrs_uav_manager" package.
string active_tracker

# The status of the currently active tracker.
mrs_msgs/TrackerStatus tracker_status

# The name of the currently active controller, as defined in the controllers.yaml in the "mrs_uav_manager" package.
string active_controller

# The status of the currently active controller.
mrs_msgs/ControllerStatus controller_status

# list of controllers and trackers that are loaded and can be switched to
string[] available_controllers
string[] available_trackers

# flags reporting on whether the trackers and controller should be "human switchable", meaning,
# whether people should be "just" able to switch to them, e.g., using a GUI or TUI interface
bool[] human_switchable_controllers
bool[] human_switchable_trackers

================================================================================
MSG: mrs_msgs/TrackerStatus
bool active
bool callbacks_enabled

# is true whenever the tracker is doing something
# in other words, not idling
bool have_goal

# is true only then a trajectory is being tracked
bool tracking_trajectory

int32 trajectory_length
int32 trajectory_idx

# only when following trajectory
# the current reference in the trajectory UNINTERPOLATED
mrs_msgs/ReferenceStamped trajectory_reference

================================================================================
MSG: mrs_msgs/ReferenceStamped
# A Positon+Heading reference with a header.

std_msgs/Header header
mrs_msgs/Reference reference

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: mrs_msgs/Reference
# This message defines a control reference with a Position+Heading.

geometry_msgs/Point position

# Heading is atan2() of XY-world projection of the UAV's body X-axis.
float64 heading

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: mrs_msgs/ControllerStatus
bool active
"""
  __slots__ = ['stamp','uav_name','motors','flying_normally','rc_mode','active_tracker','tracker_status','active_controller','controller_status','available_controllers','available_trackers','human_switchable_controllers','human_switchable_trackers']
  _slot_types = ['time','string','bool','bool','bool','string','mrs_msgs/TrackerStatus','string','mrs_msgs/ControllerStatus','string[]','string[]','bool[]','bool[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,uav_name,motors,flying_normally,rc_mode,active_tracker,tracker_status,active_controller,controller_status,available_controllers,available_trackers,human_switchable_controllers,human_switchable_trackers

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ControlManagerDiagnostics, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.uav_name is None:
        self.uav_name = ''
      if self.motors is None:
        self.motors = False
      if self.flying_normally is None:
        self.flying_normally = False
      if self.rc_mode is None:
        self.rc_mode = False
      if self.active_tracker is None:
        self.active_tracker = ''
      if self.tracker_status is None:
        self.tracker_status = mrs_msgs.msg.TrackerStatus()
      if self.active_controller is None:
        self.active_controller = ''
      if self.controller_status is None:
        self.controller_status = mrs_msgs.msg.ControllerStatus()
      if self.available_controllers is None:
        self.available_controllers = []
      if self.available_trackers is None:
        self.available_trackers = []
      if self.human_switchable_controllers is None:
        self.human_switchable_controllers = []
      if self.human_switchable_trackers is None:
        self.human_switchable_trackers = []
    else:
      self.stamp = genpy.Time()
      self.uav_name = ''
      self.motors = False
      self.flying_normally = False
      self.rc_mode = False
      self.active_tracker = ''
      self.tracker_status = mrs_msgs.msg.TrackerStatus()
      self.active_controller = ''
      self.controller_status = mrs_msgs.msg.ControllerStatus()
      self.available_controllers = []
      self.available_trackers = []
      self.human_switchable_controllers = []
      self.human_switchable_trackers = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      _x = self.uav_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.motors, _x.flying_normally, _x.rc_mode))
      _x = self.active_tracker
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B2i3I().pack(_x.tracker_status.active, _x.tracker_status.callbacks_enabled, _x.tracker_status.have_goal, _x.tracker_status.tracking_trajectory, _x.tracker_status.trajectory_length, _x.tracker_status.trajectory_idx, _x.tracker_status.trajectory_reference.header.seq, _x.tracker_status.trajectory_reference.header.stamp.secs, _x.tracker_status.trajectory_reference.header.stamp.nsecs))
      _x = self.tracker_status.trajectory_reference.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.tracker_status.trajectory_reference.reference.position.x, _x.tracker_status.trajectory_reference.reference.position.y, _x.tracker_status.trajectory_reference.reference.position.z, _x.tracker_status.trajectory_reference.reference.heading))
      _x = self.active_controller
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.controller_status.active
      buff.write(_get_struct_B().pack(_x))
      length = len(self.available_controllers)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_controllers:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.available_trackers)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_trackers:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.human_switchable_controllers)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.human_switchable_controllers))
      length = len(self.human_switchable_trackers)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(struct.Struct(pattern).pack(*self.human_switchable_trackers))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.tracker_status is None:
        self.tracker_status = mrs_msgs.msg.TrackerStatus()
      if self.controller_status is None:
        self.controller_status = mrs_msgs.msg.ControllerStatus()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uav_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uav_name = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.motors, _x.flying_normally, _x.rc_mode,) = _get_struct_3B().unpack(str[start:end])
      self.motors = bool(self.motors)
      self.flying_normally = bool(self.flying_normally)
      self.rc_mode = bool(self.rc_mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.active_tracker = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.active_tracker = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.tracker_status.active, _x.tracker_status.callbacks_enabled, _x.tracker_status.have_goal, _x.tracker_status.tracking_trajectory, _x.tracker_status.trajectory_length, _x.tracker_status.trajectory_idx, _x.tracker_status.trajectory_reference.header.seq, _x.tracker_status.trajectory_reference.header.stamp.secs, _x.tracker_status.trajectory_reference.header.stamp.nsecs,) = _get_struct_4B2i3I().unpack(str[start:end])
      self.tracker_status.active = bool(self.tracker_status.active)
      self.tracker_status.callbacks_enabled = bool(self.tracker_status.callbacks_enabled)
      self.tracker_status.have_goal = bool(self.tracker_status.have_goal)
      self.tracker_status.tracking_trajectory = bool(self.tracker_status.tracking_trajectory)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tracker_status.trajectory_reference.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tracker_status.trajectory_reference.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.tracker_status.trajectory_reference.reference.position.x, _x.tracker_status.trajectory_reference.reference.position.y, _x.tracker_status.trajectory_reference.reference.position.z, _x.tracker_status.trajectory_reference.reference.heading,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.active_controller = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.active_controller = str[start:end]
      start = end
      end += 1
      (self.controller_status.active,) = _get_struct_B().unpack(str[start:end])
      self.controller_status.active = bool(self.controller_status.active)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_controllers = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available_controllers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_trackers = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available_trackers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.human_switchable_controllers = s.unpack(str[start:end])
      self.human_switchable_controllers = list(map(bool, self.human_switchable_controllers))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.human_switchable_trackers = s.unpack(str[start:end])
      self.human_switchable_trackers = list(map(bool, self.human_switchable_trackers))
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      _x = self.uav_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3B().pack(_x.motors, _x.flying_normally, _x.rc_mode))
      _x = self.active_tracker
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4B2i3I().pack(_x.tracker_status.active, _x.tracker_status.callbacks_enabled, _x.tracker_status.have_goal, _x.tracker_status.tracking_trajectory, _x.tracker_status.trajectory_length, _x.tracker_status.trajectory_idx, _x.tracker_status.trajectory_reference.header.seq, _x.tracker_status.trajectory_reference.header.stamp.secs, _x.tracker_status.trajectory_reference.header.stamp.nsecs))
      _x = self.tracker_status.trajectory_reference.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.tracker_status.trajectory_reference.reference.position.x, _x.tracker_status.trajectory_reference.reference.position.y, _x.tracker_status.trajectory_reference.reference.position.z, _x.tracker_status.trajectory_reference.reference.heading))
      _x = self.active_controller
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.controller_status.active
      buff.write(_get_struct_B().pack(_x))
      length = len(self.available_controllers)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_controllers:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.available_trackers)
      buff.write(_struct_I.pack(length))
      for val1 in self.available_trackers:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.human_switchable_controllers)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.human_switchable_controllers.tostring())
      length = len(self.human_switchable_trackers)
      buff.write(_struct_I.pack(length))
      pattern = '<%sB'%length
      buff.write(self.human_switchable_trackers.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.tracker_status is None:
        self.tracker_status = mrs_msgs.msg.TrackerStatus()
      if self.controller_status is None:
        self.controller_status = mrs_msgs.msg.ControllerStatus()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.uav_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.uav_name = str[start:end]
      _x = self
      start = end
      end += 3
      (_x.motors, _x.flying_normally, _x.rc_mode,) = _get_struct_3B().unpack(str[start:end])
      self.motors = bool(self.motors)
      self.flying_normally = bool(self.flying_normally)
      self.rc_mode = bool(self.rc_mode)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.active_tracker = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.active_tracker = str[start:end]
      _x = self
      start = end
      end += 24
      (_x.tracker_status.active, _x.tracker_status.callbacks_enabled, _x.tracker_status.have_goal, _x.tracker_status.tracking_trajectory, _x.tracker_status.trajectory_length, _x.tracker_status.trajectory_idx, _x.tracker_status.trajectory_reference.header.seq, _x.tracker_status.trajectory_reference.header.stamp.secs, _x.tracker_status.trajectory_reference.header.stamp.nsecs,) = _get_struct_4B2i3I().unpack(str[start:end])
      self.tracker_status.active = bool(self.tracker_status.active)
      self.tracker_status.callbacks_enabled = bool(self.tracker_status.callbacks_enabled)
      self.tracker_status.have_goal = bool(self.tracker_status.have_goal)
      self.tracker_status.tracking_trajectory = bool(self.tracker_status.tracking_trajectory)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tracker_status.trajectory_reference.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tracker_status.trajectory_reference.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.tracker_status.trajectory_reference.reference.position.x, _x.tracker_status.trajectory_reference.reference.position.y, _x.tracker_status.trajectory_reference.reference.position.z, _x.tracker_status.trajectory_reference.reference.heading,) = _get_struct_4d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.active_controller = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.active_controller = str[start:end]
      start = end
      end += 1
      (self.controller_status.active,) = _get_struct_B().unpack(str[start:end])
      self.controller_status.active = bool(self.controller_status.active)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_controllers = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available_controllers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available_trackers = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available_trackers.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.human_switchable_controllers = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.human_switchable_controllers = list(map(bool, self.human_switchable_controllers))
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sB'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.human_switchable_trackers = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=length)
      self.human_switchable_trackers = list(map(bool, self.human_switchable_trackers))
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_4B2i3I = None
def _get_struct_4B2i3I():
    global _struct_4B2i3I
    if _struct_4B2i3I is None:
        _struct_4B2i3I = struct.Struct("<4B2i3I")
    return _struct_4B2i3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
