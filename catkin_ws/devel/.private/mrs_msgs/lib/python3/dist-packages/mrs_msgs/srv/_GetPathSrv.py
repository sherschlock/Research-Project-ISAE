# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/GetPathSrvRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import mrs_msgs.msg
import std_msgs.msg

class GetPathSrvRequest(genpy.Message):
  _md5sum = "f4b6f288dfb41c7f420ec189461dc5a6"
  _type = "mrs_msgs/GetPathSrvRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """mrs_msgs/Path path

================================================================================
MSG: mrs_msgs/Path
Header header

int64 input_id

bool use_heading
bool fly_now
bool stop_at_waypoints
bool loop

bool override_constraints
float64 override_max_velocity_horizontal
float64 override_max_acceleration_horizontal
float64 override_max_jerk_horizontal
float64 override_max_velocity_vertical
float64 override_max_acceleration_vertical
float64 override_max_jerk_vertical

bool relax_heading

Reference[] points

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: mrs_msgs/Reference
# This message defines a control reference with a Position+Heading.

geometry_msgs/Point position

# Heading is atan2() of XY-world projection of the UAV's body X-axis.
float64 heading

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['path']
  _slot_types = ['mrs_msgs/Path']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       path

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetPathSrvRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.path is None:
        self.path = mrs_msgs.msg.Path()
    else:
      self.path = mrs_msgs.msg.Path()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.path.header.seq, _x.path.header.stamp.secs, _x.path.header.stamp.nsecs))
      _x = self.path.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_q5B6dB().pack(_x.path.input_id, _x.path.use_heading, _x.path.fly_now, _x.path.stop_at_waypoints, _x.path.loop, _x.path.override_constraints, _x.path.override_max_velocity_horizontal, _x.path.override_max_acceleration_horizontal, _x.path.override_max_jerk_horizontal, _x.path.override_max_velocity_vertical, _x.path.override_max_acceleration_vertical, _x.path.override_max_jerk_vertical, _x.path.relax_heading))
      length = len(self.path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.path.points:
        _v1 = val1.position
        _x = _v1
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.heading
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.path is None:
        self.path = mrs_msgs.msg.Path()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.path.header.seq, _x.path.header.stamp.secs, _x.path.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 62
      (_x.path.input_id, _x.path.use_heading, _x.path.fly_now, _x.path.stop_at_waypoints, _x.path.loop, _x.path.override_constraints, _x.path.override_max_velocity_horizontal, _x.path.override_max_acceleration_horizontal, _x.path.override_max_jerk_horizontal, _x.path.override_max_velocity_vertical, _x.path.override_max_acceleration_vertical, _x.path.override_max_jerk_vertical, _x.path.relax_heading,) = _get_struct_q5B6dB().unpack(str[start:end])
      self.path.use_heading = bool(self.path.use_heading)
      self.path.fly_now = bool(self.path.fly_now)
      self.path.stop_at_waypoints = bool(self.path.stop_at_waypoints)
      self.path.loop = bool(self.path.loop)
      self.path.override_constraints = bool(self.path.override_constraints)
      self.path.relax_heading = bool(self.path.relax_heading)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path.points = []
      for i in range(0, length):
        val1 = mrs_msgs.msg.Reference()
        _v2 = val1.position
        _x = _v2
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.heading,) = _get_struct_d().unpack(str[start:end])
        self.path.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.path.header.seq, _x.path.header.stamp.secs, _x.path.header.stamp.nsecs))
      _x = self.path.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_q5B6dB().pack(_x.path.input_id, _x.path.use_heading, _x.path.fly_now, _x.path.stop_at_waypoints, _x.path.loop, _x.path.override_constraints, _x.path.override_max_velocity_horizontal, _x.path.override_max_acceleration_horizontal, _x.path.override_max_jerk_horizontal, _x.path.override_max_velocity_vertical, _x.path.override_max_acceleration_vertical, _x.path.override_max_jerk_vertical, _x.path.relax_heading))
      length = len(self.path.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.path.points:
        _v3 = val1.position
        _x = _v3
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.heading
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.path is None:
        self.path = mrs_msgs.msg.Path()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.path.header.seq, _x.path.header.stamp.secs, _x.path.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.path.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.path.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 62
      (_x.path.input_id, _x.path.use_heading, _x.path.fly_now, _x.path.stop_at_waypoints, _x.path.loop, _x.path.override_constraints, _x.path.override_max_velocity_horizontal, _x.path.override_max_acceleration_horizontal, _x.path.override_max_jerk_horizontal, _x.path.override_max_velocity_vertical, _x.path.override_max_acceleration_vertical, _x.path.override_max_jerk_vertical, _x.path.relax_heading,) = _get_struct_q5B6dB().unpack(str[start:end])
      self.path.use_heading = bool(self.path.use_heading)
      self.path.fly_now = bool(self.path.fly_now)
      self.path.stop_at_waypoints = bool(self.path.stop_at_waypoints)
      self.path.loop = bool(self.path.loop)
      self.path.override_constraints = bool(self.path.override_constraints)
      self.path.relax_heading = bool(self.path.relax_heading)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.path.points = []
      for i in range(0, length):
        val1 = mrs_msgs.msg.Reference()
        _v4 = val1.position
        _x = _v4
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.heading,) = _get_struct_d().unpack(str[start:end])
        self.path.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_q5B6dB = None
def _get_struct_q5B6dB():
    global _struct_q5B6dB
    if _struct_q5B6dB is None:
        _struct_q5B6dB = struct.Struct("<q5B6dB")
    return _struct_q5B6dB
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/GetPathSrvResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import mrs_msgs.msg
import std_msgs.msg

class GetPathSrvResponse(genpy.Message):
  _md5sum = "82321dcf1fe038ae682bc80ec8b8b92d"
  _type = "mrs_msgs/GetPathSrvResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success
string message
mrs_msgs/TrajectoryReference trajectory


================================================================================
MSG: mrs_msgs/TrajectoryReference
# The Trajectory reference that can be supplied to mrs_uav_manager::ControlManager.

Header header

# uniquely identifies the user input
int64 input_id

# True if the heading part should be tracked, otherwise the tracker should maintain the current heading.
bool use_heading

# True if the trajectory should start being tracked immediately after receiving it.
# Beware the header time stamp matters in this case.
bool fly_now

# True if the trajectory should be looped.
bool loop

# The time difference between the trajectory samples.
# It falls back to 0.2 s if left unset.
float64 dt

# The list of points in the trajectory, spaced by the dt.
Reference[] points 

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: mrs_msgs/Reference
# This message defines a control reference with a Position+Heading.

geometry_msgs/Point position

# Heading is atan2() of XY-world projection of the UAV's body X-axis.
float64 heading

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['success','message','trajectory']
  _slot_types = ['bool','string','mrs_msgs/TrajectoryReference']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,message,trajectory

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetPathSrvResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.message is None:
        self.message = ''
      if self.trajectory is None:
        self.trajectory = mrs_msgs.msg.TrajectoryReference()
    else:
      self.success = False
      self.message = ''
      self.trajectory = mrs_msgs.msg.TrajectoryReference()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs))
      _x = self.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_q3Bd().pack(_x.trajectory.input_id, _x.trajectory.use_heading, _x.trajectory.fly_now, _x.trajectory.loop, _x.trajectory.dt))
      length = len(self.trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.points:
        _v5 = val1.position
        _x = _v5
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.heading
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory is None:
        self.trajectory = mrs_msgs.msg.TrajectoryReference()
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trajectory.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.trajectory.input_id, _x.trajectory.use_heading, _x.trajectory.fly_now, _x.trajectory.loop, _x.trajectory.dt,) = _get_struct_q3Bd().unpack(str[start:end])
      self.trajectory.use_heading = bool(self.trajectory.use_heading)
      self.trajectory.fly_now = bool(self.trajectory.fly_now)
      self.trajectory.loop = bool(self.trajectory.loop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.points = []
      for i in range(0, length):
        val1 = mrs_msgs.msg.Reference()
        _v6 = val1.position
        _x = _v6
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.heading,) = _get_struct_d().unpack(str[start:end])
        self.trajectory.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.success
      buff.write(_get_struct_B().pack(_x))
      _x = self.message
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs))
      _x = self.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_q3Bd().pack(_x.trajectory.input_id, _x.trajectory.use_heading, _x.trajectory.fly_now, _x.trajectory.loop, _x.trajectory.dt))
      length = len(self.trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.points:
        _v7 = val1.position
        _x = _v7
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _x = val1.heading
        buff.write(_get_struct_d().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory is None:
        self.trajectory = mrs_msgs.msg.TrajectoryReference()
      end = 0
      start = end
      end += 1
      (self.success,) = _get_struct_B().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.message = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.message = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trajectory.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 19
      (_x.trajectory.input_id, _x.trajectory.use_heading, _x.trajectory.fly_now, _x.trajectory.loop, _x.trajectory.dt,) = _get_struct_q3Bd().unpack(str[start:end])
      self.trajectory.use_heading = bool(self.trajectory.use_heading)
      self.trajectory.fly_now = bool(self.trajectory.fly_now)
      self.trajectory.loop = bool(self.trajectory.loop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.points = []
      for i in range(0, length):
        val1 = mrs_msgs.msg.Reference()
        _v8 = val1.position
        _x = _v8
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 8
        (val1.heading,) = _get_struct_d().unpack(str[start:end])
        self.trajectory.points.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
_struct_q3Bd = None
def _get_struct_q3Bd():
    global _struct_q3Bd
    if _struct_q3Bd is None:
        _struct_q3Bd = struct.Struct("<q3Bd")
    return _struct_q3Bd
class GetPathSrv(object):
  _type          = 'mrs_msgs/GetPathSrv'
  _md5sum = '2a60d1d5c00a767af0cb4448e8a7d3af'
  _request_class  = GetPathSrvRequest
  _response_class = GetPathSrvResponse
