# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/OusterInfo.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class OusterInfo(genpy.Message):
  _md5sum = "452bbd97f95e92c61390ef448c12ce29"
  _type = "mrs_msgs/OusterInfo"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string name
string sn
string fw_rev
string mode
string prod_line
float64[] beam_azimuth_angles
float64[] beam_altitude_angles
float64 lidar_origin_to_beam_origin_mm
float64[] imu_to_sensor_transform
float64[] lidar_to_sensor_transform
float64[] extrinsic
uint32 pixels_per_column
uint32 columns_per_frame
int32[] pixel_shift_by_row
"""
  __slots__ = ['name','sn','fw_rev','mode','prod_line','beam_azimuth_angles','beam_altitude_angles','lidar_origin_to_beam_origin_mm','imu_to_sensor_transform','lidar_to_sensor_transform','extrinsic','pixels_per_column','columns_per_frame','pixel_shift_by_row']
  _slot_types = ['string','string','string','string','string','float64[]','float64[]','float64','float64[]','float64[]','float64[]','uint32','uint32','int32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       name,sn,fw_rev,mode,prod_line,beam_azimuth_angles,beam_altitude_angles,lidar_origin_to_beam_origin_mm,imu_to_sensor_transform,lidar_to_sensor_transform,extrinsic,pixels_per_column,columns_per_frame,pixel_shift_by_row

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(OusterInfo, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.name is None:
        self.name = ''
      if self.sn is None:
        self.sn = ''
      if self.fw_rev is None:
        self.fw_rev = ''
      if self.mode is None:
        self.mode = ''
      if self.prod_line is None:
        self.prod_line = ''
      if self.beam_azimuth_angles is None:
        self.beam_azimuth_angles = []
      if self.beam_altitude_angles is None:
        self.beam_altitude_angles = []
      if self.lidar_origin_to_beam_origin_mm is None:
        self.lidar_origin_to_beam_origin_mm = 0.
      if self.imu_to_sensor_transform is None:
        self.imu_to_sensor_transform = []
      if self.lidar_to_sensor_transform is None:
        self.lidar_to_sensor_transform = []
      if self.extrinsic is None:
        self.extrinsic = []
      if self.pixels_per_column is None:
        self.pixels_per_column = 0
      if self.columns_per_frame is None:
        self.columns_per_frame = 0
      if self.pixel_shift_by_row is None:
        self.pixel_shift_by_row = []
    else:
      self.name = ''
      self.sn = ''
      self.fw_rev = ''
      self.mode = ''
      self.prod_line = ''
      self.beam_azimuth_angles = []
      self.beam_altitude_angles = []
      self.lidar_origin_to_beam_origin_mm = 0.
      self.imu_to_sensor_transform = []
      self.lidar_to_sensor_transform = []
      self.extrinsic = []
      self.pixels_per_column = 0
      self.columns_per_frame = 0
      self.pixel_shift_by_row = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sn
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fw_rev
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.prod_line
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.beam_azimuth_angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.beam_azimuth_angles))
      length = len(self.beam_altitude_angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.beam_altitude_angles))
      _x = self.lidar_origin_to_beam_origin_mm
      buff.write(_get_struct_d().pack(_x))
      length = len(self.imu_to_sensor_transform)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.imu_to_sensor_transform))
      length = len(self.lidar_to_sensor_transform)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.lidar_to_sensor_transform))
      length = len(self.extrinsic)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.extrinsic))
      _x = self
      buff.write(_get_struct_2I().pack(_x.pixels_per_column, _x.columns_per_frame))
      length = len(self.pixel_shift_by_row)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(struct.Struct(pattern).pack(*self.pixel_shift_by_row))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sn = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sn = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fw_rev = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fw_rev = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prod_line = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.prod_line = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.beam_azimuth_angles = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.beam_altitude_angles = s.unpack(str[start:end])
      start = end
      end += 8
      (self.lidar_origin_to_beam_origin_mm,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.imu_to_sensor_transform = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lidar_to_sensor_transform = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.extrinsic = s.unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.pixels_per_column, _x.columns_per_frame,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pixel_shift_by_row = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.sn
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.fw_rev
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.prod_line
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.beam_azimuth_angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.beam_azimuth_angles.tostring())
      length = len(self.beam_altitude_angles)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.beam_altitude_angles.tostring())
      _x = self.lidar_origin_to_beam_origin_mm
      buff.write(_get_struct_d().pack(_x))
      length = len(self.imu_to_sensor_transform)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.imu_to_sensor_transform.tostring())
      length = len(self.lidar_to_sensor_transform)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.lidar_to_sensor_transform.tostring())
      length = len(self.extrinsic)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.extrinsic.tostring())
      _x = self
      buff.write(_get_struct_2I().pack(_x.pixels_per_column, _x.columns_per_frame))
      length = len(self.pixel_shift_by_row)
      buff.write(_struct_I.pack(length))
      pattern = '<%si'%length
      buff.write(self.pixel_shift_by_row.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.sn = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.sn = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.fw_rev = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.fw_rev = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.mode = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.prod_line = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.prod_line = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.beam_azimuth_angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.beam_altitude_angles = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 8
      (self.lidar_origin_to_beam_origin_mm,) = _get_struct_d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.imu_to_sensor_transform = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.lidar_to_sensor_transform = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.extrinsic = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 8
      (_x.pixels_per_column, _x.columns_per_frame,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%si'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.pixel_shift_by_row = numpy.frombuffer(str[start:end], dtype=numpy.int32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_d = None
def _get_struct_d():
    global _struct_d
    if _struct_d is None:
        _struct_d = struct.Struct("<d")
    return _struct_d
