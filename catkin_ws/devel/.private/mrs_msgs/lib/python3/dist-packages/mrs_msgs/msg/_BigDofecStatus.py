# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/BigDofecStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class BigDofecStatus(genpy.Message):
  _md5sum = "2a01dab5c749eae33ffb0f9ef6c3cb54"
  _type = "mrs_msgs/BigDofecStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """time stamp

float32 mes_vbat
float32 mes_24v
float32 mes_varm
float32 mes_19v
float32 mes_5v

bool pwm_enabled
uint16 pwm1_val
uint16 pwm2_val
uint16 pwm3_val
uint16 pwm4_val
uint16 pwm5_val
uint16 pwm6_val

bool solenoids_armed
bool launched_ch1
bool launched_ch2
bool launched_ch3
bool launched_ch4
bool launched_ch5
bool launched_ch6
"""
  __slots__ = ['stamp','mes_vbat','mes_24v','mes_varm','mes_19v','mes_5v','pwm_enabled','pwm1_val','pwm2_val','pwm3_val','pwm4_val','pwm5_val','pwm6_val','solenoids_armed','launched_ch1','launched_ch2','launched_ch3','launched_ch4','launched_ch5','launched_ch6']
  _slot_types = ['time','float32','float32','float32','float32','float32','bool','uint16','uint16','uint16','uint16','uint16','uint16','bool','bool','bool','bool','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,mes_vbat,mes_24v,mes_varm,mes_19v,mes_5v,pwm_enabled,pwm1_val,pwm2_val,pwm3_val,pwm4_val,pwm5_val,pwm6_val,solenoids_armed,launched_ch1,launched_ch2,launched_ch3,launched_ch4,launched_ch5,launched_ch6

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(BigDofecStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.mes_vbat is None:
        self.mes_vbat = 0.
      if self.mes_24v is None:
        self.mes_24v = 0.
      if self.mes_varm is None:
        self.mes_varm = 0.
      if self.mes_19v is None:
        self.mes_19v = 0.
      if self.mes_5v is None:
        self.mes_5v = 0.
      if self.pwm_enabled is None:
        self.pwm_enabled = False
      if self.pwm1_val is None:
        self.pwm1_val = 0
      if self.pwm2_val is None:
        self.pwm2_val = 0
      if self.pwm3_val is None:
        self.pwm3_val = 0
      if self.pwm4_val is None:
        self.pwm4_val = 0
      if self.pwm5_val is None:
        self.pwm5_val = 0
      if self.pwm6_val is None:
        self.pwm6_val = 0
      if self.solenoids_armed is None:
        self.solenoids_armed = False
      if self.launched_ch1 is None:
        self.launched_ch1 = False
      if self.launched_ch2 is None:
        self.launched_ch2 = False
      if self.launched_ch3 is None:
        self.launched_ch3 = False
      if self.launched_ch4 is None:
        self.launched_ch4 = False
      if self.launched_ch5 is None:
        self.launched_ch5 = False
      if self.launched_ch6 is None:
        self.launched_ch6 = False
    else:
      self.stamp = genpy.Time()
      self.mes_vbat = 0.
      self.mes_24v = 0.
      self.mes_varm = 0.
      self.mes_19v = 0.
      self.mes_5v = 0.
      self.pwm_enabled = False
      self.pwm1_val = 0
      self.pwm2_val = 0
      self.pwm3_val = 0
      self.pwm4_val = 0
      self.pwm5_val = 0
      self.pwm6_val = 0
      self.solenoids_armed = False
      self.launched_ch1 = False
      self.launched_ch2 = False
      self.launched_ch3 = False
      self.launched_ch4 = False
      self.launched_ch5 = False
      self.launched_ch6 = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I5fB6H7B().pack(_x.stamp.secs, _x.stamp.nsecs, _x.mes_vbat, _x.mes_24v, _x.mes_varm, _x.mes_19v, _x.mes_5v, _x.pwm_enabled, _x.pwm1_val, _x.pwm2_val, _x.pwm3_val, _x.pwm4_val, _x.pwm5_val, _x.pwm6_val, _x.solenoids_armed, _x.launched_ch1, _x.launched_ch2, _x.launched_ch3, _x.launched_ch4, _x.launched_ch5, _x.launched_ch6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.stamp.secs, _x.stamp.nsecs, _x.mes_vbat, _x.mes_24v, _x.mes_varm, _x.mes_19v, _x.mes_5v, _x.pwm_enabled, _x.pwm1_val, _x.pwm2_val, _x.pwm3_val, _x.pwm4_val, _x.pwm5_val, _x.pwm6_val, _x.solenoids_armed, _x.launched_ch1, _x.launched_ch2, _x.launched_ch3, _x.launched_ch4, _x.launched_ch5, _x.launched_ch6,) = _get_struct_2I5fB6H7B().unpack(str[start:end])
      self.pwm_enabled = bool(self.pwm_enabled)
      self.solenoids_armed = bool(self.solenoids_armed)
      self.launched_ch1 = bool(self.launched_ch1)
      self.launched_ch2 = bool(self.launched_ch2)
      self.launched_ch3 = bool(self.launched_ch3)
      self.launched_ch4 = bool(self.launched_ch4)
      self.launched_ch5 = bool(self.launched_ch5)
      self.launched_ch6 = bool(self.launched_ch6)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I5fB6H7B().pack(_x.stamp.secs, _x.stamp.nsecs, _x.mes_vbat, _x.mes_24v, _x.mes_varm, _x.mes_19v, _x.mes_5v, _x.pwm_enabled, _x.pwm1_val, _x.pwm2_val, _x.pwm3_val, _x.pwm4_val, _x.pwm5_val, _x.pwm6_val, _x.solenoids_armed, _x.launched_ch1, _x.launched_ch2, _x.launched_ch3, _x.launched_ch4, _x.launched_ch5, _x.launched_ch6))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.stamp.secs, _x.stamp.nsecs, _x.mes_vbat, _x.mes_24v, _x.mes_varm, _x.mes_19v, _x.mes_5v, _x.pwm_enabled, _x.pwm1_val, _x.pwm2_val, _x.pwm3_val, _x.pwm4_val, _x.pwm5_val, _x.pwm6_val, _x.solenoids_armed, _x.launched_ch1, _x.launched_ch2, _x.launched_ch3, _x.launched_ch4, _x.launched_ch5, _x.launched_ch6,) = _get_struct_2I5fB6H7B().unpack(str[start:end])
      self.pwm_enabled = bool(self.pwm_enabled)
      self.solenoids_armed = bool(self.solenoids_armed)
      self.launched_ch1 = bool(self.launched_ch1)
      self.launched_ch2 = bool(self.launched_ch2)
      self.launched_ch3 = bool(self.launched_ch3)
      self.launched_ch4 = bool(self.launched_ch4)
      self.launched_ch5 = bool(self.launched_ch5)
      self.launched_ch6 = bool(self.launched_ch6)
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I5fB6H7B = None
def _get_struct_2I5fB6H7B():
    global _struct_2I5fB6H7B
    if _struct_2I5fB6H7B is None:
        _struct_2I5fB6H7B = struct.Struct("<2I5fB6H7B")
    return _struct_2I5fB6H7B
