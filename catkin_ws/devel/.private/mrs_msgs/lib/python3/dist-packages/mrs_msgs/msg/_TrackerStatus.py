# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/TrackerStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import mrs_msgs.msg
import std_msgs.msg

class TrackerStatus(genpy.Message):
  _md5sum = "7b7beb41d4138c0f4dea92d6c49a50c5"
  _type = "mrs_msgs/TrackerStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool active
bool callbacks_enabled

# is true whenever the tracker is doing something
# in other words, not idling
bool have_goal

# is true only then a trajectory is being tracked
bool tracking_trajectory

int32 trajectory_length
int32 trajectory_idx

# only when following trajectory
# the current reference in the trajectory UNINTERPOLATED
mrs_msgs/ReferenceStamped trajectory_reference

================================================================================
MSG: mrs_msgs/ReferenceStamped
# A Positon+Heading reference with a header.

std_msgs/Header header
mrs_msgs/Reference reference

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: mrs_msgs/Reference
# This message defines a control reference with a Position+Heading.

geometry_msgs/Point position

# Heading is atan2() of XY-world projection of the UAV's body X-axis.
float64 heading

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['active','callbacks_enabled','have_goal','tracking_trajectory','trajectory_length','trajectory_idx','trajectory_reference']
  _slot_types = ['bool','bool','bool','bool','int32','int32','mrs_msgs/ReferenceStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       active,callbacks_enabled,have_goal,tracking_trajectory,trajectory_length,trajectory_idx,trajectory_reference

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TrackerStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.active is None:
        self.active = False
      if self.callbacks_enabled is None:
        self.callbacks_enabled = False
      if self.have_goal is None:
        self.have_goal = False
      if self.tracking_trajectory is None:
        self.tracking_trajectory = False
      if self.trajectory_length is None:
        self.trajectory_length = 0
      if self.trajectory_idx is None:
        self.trajectory_idx = 0
      if self.trajectory_reference is None:
        self.trajectory_reference = mrs_msgs.msg.ReferenceStamped()
    else:
      self.active = False
      self.callbacks_enabled = False
      self.have_goal = False
      self.tracking_trajectory = False
      self.trajectory_length = 0
      self.trajectory_idx = 0
      self.trajectory_reference = mrs_msgs.msg.ReferenceStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4B2i3I().pack(_x.active, _x.callbacks_enabled, _x.have_goal, _x.tracking_trajectory, _x.trajectory_length, _x.trajectory_idx, _x.trajectory_reference.header.seq, _x.trajectory_reference.header.stamp.secs, _x.trajectory_reference.header.stamp.nsecs))
      _x = self.trajectory_reference.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.trajectory_reference.reference.position.x, _x.trajectory_reference.reference.position.y, _x.trajectory_reference.reference.position.z, _x.trajectory_reference.reference.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory_reference is None:
        self.trajectory_reference = mrs_msgs.msg.ReferenceStamped()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.active, _x.callbacks_enabled, _x.have_goal, _x.tracking_trajectory, _x.trajectory_length, _x.trajectory_idx, _x.trajectory_reference.header.seq, _x.trajectory_reference.header.stamp.secs, _x.trajectory_reference.header.stamp.nsecs,) = _get_struct_4B2i3I().unpack(str[start:end])
      self.active = bool(self.active)
      self.callbacks_enabled = bool(self.callbacks_enabled)
      self.have_goal = bool(self.have_goal)
      self.tracking_trajectory = bool(self.tracking_trajectory)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory_reference.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trajectory_reference.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.trajectory_reference.reference.position.x, _x.trajectory_reference.reference.position.y, _x.trajectory_reference.reference.position.z, _x.trajectory_reference.reference.heading,) = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4B2i3I().pack(_x.active, _x.callbacks_enabled, _x.have_goal, _x.tracking_trajectory, _x.trajectory_length, _x.trajectory_idx, _x.trajectory_reference.header.seq, _x.trajectory_reference.header.stamp.secs, _x.trajectory_reference.header.stamp.nsecs))
      _x = self.trajectory_reference.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.trajectory_reference.reference.position.x, _x.trajectory_reference.reference.position.y, _x.trajectory_reference.reference.position.z, _x.trajectory_reference.reference.heading))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.trajectory_reference is None:
        self.trajectory_reference = mrs_msgs.msg.ReferenceStamped()
      end = 0
      _x = self
      start = end
      end += 24
      (_x.active, _x.callbacks_enabled, _x.have_goal, _x.tracking_trajectory, _x.trajectory_length, _x.trajectory_idx, _x.trajectory_reference.header.seq, _x.trajectory_reference.header.stamp.secs, _x.trajectory_reference.header.stamp.nsecs,) = _get_struct_4B2i3I().unpack(str[start:end])
      self.active = bool(self.active)
      self.callbacks_enabled = bool(self.callbacks_enabled)
      self.have_goal = bool(self.have_goal)
      self.tracking_trajectory = bool(self.tracking_trajectory)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory_reference.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.trajectory_reference.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.trajectory_reference.reference.position.x, _x.trajectory_reference.reference.position.y, _x.trajectory_reference.reference.position.z, _x.trajectory_reference.reference.heading,) = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4B2i3I = None
def _get_struct_4B2i3I():
    global _struct_4B2i3I
    if _struct_4B2i3I is None:
        _struct_4B2i3I = struct.Struct("<4B2i3I")
    return _struct_4B2i3I
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
