# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/SpawnerDiagnostics.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SpawnerDiagnostics(genpy.Message):
  _md5sum = "388186ee1e8df969bc4d4587fd373eb3"
  _type = "mrs_msgs/SpawnerDiagnostics"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool spawn_called
bool processing
string[] active_vehicles
string[] queued_vehicles
uint8 queued_processes
"""
  __slots__ = ['spawn_called','processing','active_vehicles','queued_vehicles','queued_processes']
  _slot_types = ['bool','bool','string[]','string[]','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       spawn_called,processing,active_vehicles,queued_vehicles,queued_processes

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpawnerDiagnostics, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.spawn_called is None:
        self.spawn_called = False
      if self.processing is None:
        self.processing = False
      if self.active_vehicles is None:
        self.active_vehicles = []
      if self.queued_vehicles is None:
        self.queued_vehicles = []
      if self.queued_processes is None:
        self.queued_processes = 0
    else:
      self.spawn_called = False
      self.processing = False
      self.active_vehicles = []
      self.queued_vehicles = []
      self.queued_processes = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.spawn_called, _x.processing))
      length = len(self.active_vehicles)
      buff.write(_struct_I.pack(length))
      for val1 in self.active_vehicles:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.queued_vehicles)
      buff.write(_struct_I.pack(length))
      for val1 in self.queued_vehicles:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.queued_processes
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.spawn_called, _x.processing,) = _get_struct_2B().unpack(str[start:end])
      self.spawn_called = bool(self.spawn_called)
      self.processing = bool(self.processing)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.active_vehicles = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.active_vehicles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.queued_vehicles = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.queued_vehicles.append(val1)
      start = end
      end += 1
      (self.queued_processes,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2B().pack(_x.spawn_called, _x.processing))
      length = len(self.active_vehicles)
      buff.write(_struct_I.pack(length))
      for val1 in self.active_vehicles:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.queued_vehicles)
      buff.write(_struct_I.pack(length))
      for val1 in self.queued_vehicles:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.queued_processes
      buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 2
      (_x.spawn_called, _x.processing,) = _get_struct_2B().unpack(str[start:end])
      self.spawn_called = bool(self.spawn_called)
      self.processing = bool(self.processing)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.active_vehicles = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.active_vehicles.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.queued_vehicles = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.queued_vehicles.append(val1)
      start = end
      end += 1
      (self.queued_processes,) = _get_struct_B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
