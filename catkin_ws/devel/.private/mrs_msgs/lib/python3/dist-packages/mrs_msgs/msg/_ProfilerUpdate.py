# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/ProfilerUpdate.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy

class ProfilerUpdate(genpy.Message):
  _md5sum = "eea4d095c0f839a7ab6eec8d18760e77"
  _type = "mrs_msgs/ProfilerUpdate"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string START=start
string END=end
time stamp
string node_name
string routine_name
int64 iteration
bool is_periodic
float64 expected_rate
float64 expected_start
float64 real_start
float64 duration
string event
"""
  # Pseudo-constants
  START = 'start'
  END = 'end'

  __slots__ = ['stamp','node_name','routine_name','iteration','is_periodic','expected_rate','expected_start','real_start','duration','event']
  _slot_types = ['time','string','string','int64','bool','float64','float64','float64','float64','string']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,node_name,routine_name,iteration,is_periodic,expected_rate,expected_start,real_start,duration,event

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ProfilerUpdate, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.node_name is None:
        self.node_name = ''
      if self.routine_name is None:
        self.routine_name = ''
      if self.iteration is None:
        self.iteration = 0
      if self.is_periodic is None:
        self.is_periodic = False
      if self.expected_rate is None:
        self.expected_rate = 0.
      if self.expected_start is None:
        self.expected_start = 0.
      if self.real_start is None:
        self.real_start = 0.
      if self.duration is None:
        self.duration = 0.
      if self.event is None:
        self.event = ''
    else:
      self.stamp = genpy.Time()
      self.node_name = ''
      self.routine_name = ''
      self.iteration = 0
      self.is_periodic = False
      self.expected_rate = 0.
      self.expected_start = 0.
      self.real_start = 0.
      self.duration = 0.
      self.event = ''

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      _x = self.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.routine_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qB4d().pack(_x.iteration, _x.is_periodic, _x.expected_rate, _x.expected_start, _x.real_start, _x.duration))
      _x = self.event
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.routine_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.routine_name = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.iteration, _x.is_periodic, _x.expected_rate, _x.expected_start, _x.real_start, _x.duration,) = _get_struct_qB4d().unpack(str[start:end])
      self.is_periodic = bool(self.is_periodic)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.event = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.event = str[start:end]
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      _x = self.node_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.routine_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_qB4d().pack(_x.iteration, _x.is_periodic, _x.expected_rate, _x.expected_start, _x.real_start, _x.duration))
      _x = self.event
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.node_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.node_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.routine_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.routine_name = str[start:end]
      _x = self
      start = end
      end += 41
      (_x.iteration, _x.is_periodic, _x.expected_rate, _x.expected_start, _x.real_start, _x.duration,) = _get_struct_qB4d().unpack(str[start:end])
      self.is_periodic = bool(self.is_periodic)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.event = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.event = str[start:end]
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_qB4d = None
def _get_struct_qB4d():
    global _struct_qB4d
    if _struct_qB4d is None:
        _struct_qB4d = struct.Struct("<qB4d")
    return _struct_qB4d
