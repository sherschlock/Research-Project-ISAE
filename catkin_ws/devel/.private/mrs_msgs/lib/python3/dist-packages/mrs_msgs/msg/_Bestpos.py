# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/Bestpos.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import mrs_msgs.msg
import std_msgs.msg

class Bestpos(genpy.Message):
  _md5sum = "842f440d0b9e96e1173ab70db85161dd"
  _type = "mrs_msgs/Bestpos"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# This is modified version from Novatel
# For original Novatel see: http://docs.ros.org/jade/api/novatel_msgs/html/msg/BESTPOS.html
# For Tersus see section 3.1.3 BESTPOS in https://www.tersus-gnss.com/assets/upload/file/20180608173259349.pdf
# --------------------------------------------------------------------------------------

Header header

# message 42
TersusMessageHeader tersus_msg_header

string solution_status
string position_type

float64 latitude  # (degrees) 
float64 longitude # (degrees) 
float64 height    # Height above mean sea level (meters)

float32 undulation  # Undulation - the relationship between the geoid and the ellipsoid (m) of the chosen datum
string datum_id

float32 latitude_std  # Latitude standard deviation (m) 
float32 longitude_std # Longitude standard deviation (m) 
float32 height_std    # Height standard deviation (m) 

string base_station_id   # Base station ID

float32 diff_age      # Differential age in seconds
float32 solution_age  # Solution age in seconds

uint8 num_satellites_tracked                          # Number of satellites tracked
uint8 num_satellites_used_in_solution                 # Number of satellites used in solution 
uint8 num_gps_and_glonass_l1_used_in_solution         # Number of satellites with L1/E1/B1 signals used in solution
uint8 num_gps_and_glonass_l1_and_l2_used_in_solution  # Number of satellites with multi-frequency signals used in solution
# TODO: define the rest of the message if it is necessary

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: mrs_msgs/TersusMessageHeader
# This is modified version from Novatel
# For original Novatel see: http://docs.ros.org/jade/api/novatel_msgs/html/msg/CommonHeader.html
# For Tersus see: https://www.tersus-gnss.com/assets/upload/file/20180608173259349.pdf
# See section 1.5 in the Tersus manual.
# --------------------------------------------------------------------------------------

# On the wire, this header is preceeded by three sync bytes,
# which are 0xAA 0x44 0x12, and a uint8 which is the header length.

# Measurement source, format, response bit.
string message_name

string port_address

uint16 sequence

float32 idle_time

# Table 1 in the Tersus manual.
string time_status

uint16 gps_week
float32 gps_week_seconds

uint32 receiver_status
uint16 software_version
"""
  __slots__ = ['header','tersus_msg_header','solution_status','position_type','latitude','longitude','height','undulation','datum_id','latitude_std','longitude_std','height_std','base_station_id','diff_age','solution_age','num_satellites_tracked','num_satellites_used_in_solution','num_gps_and_glonass_l1_used_in_solution','num_gps_and_glonass_l1_and_l2_used_in_solution']
  _slot_types = ['std_msgs/Header','mrs_msgs/TersusMessageHeader','string','string','float64','float64','float64','float32','string','float32','float32','float32','string','float32','float32','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,tersus_msg_header,solution_status,position_type,latitude,longitude,height,undulation,datum_id,latitude_std,longitude_std,height_std,base_station_id,diff_age,solution_age,num_satellites_tracked,num_satellites_used_in_solution,num_gps_and_glonass_l1_used_in_solution,num_gps_and_glonass_l1_and_l2_used_in_solution

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Bestpos, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tersus_msg_header is None:
        self.tersus_msg_header = mrs_msgs.msg.TersusMessageHeader()
      if self.solution_status is None:
        self.solution_status = ''
      if self.position_type is None:
        self.position_type = ''
      if self.latitude is None:
        self.latitude = 0.
      if self.longitude is None:
        self.longitude = 0.
      if self.height is None:
        self.height = 0.
      if self.undulation is None:
        self.undulation = 0.
      if self.datum_id is None:
        self.datum_id = ''
      if self.latitude_std is None:
        self.latitude_std = 0.
      if self.longitude_std is None:
        self.longitude_std = 0.
      if self.height_std is None:
        self.height_std = 0.
      if self.base_station_id is None:
        self.base_station_id = ''
      if self.diff_age is None:
        self.diff_age = 0.
      if self.solution_age is None:
        self.solution_age = 0.
      if self.num_satellites_tracked is None:
        self.num_satellites_tracked = 0
      if self.num_satellites_used_in_solution is None:
        self.num_satellites_used_in_solution = 0
      if self.num_gps_and_glonass_l1_used_in_solution is None:
        self.num_gps_and_glonass_l1_used_in_solution = 0
      if self.num_gps_and_glonass_l1_and_l2_used_in_solution is None:
        self.num_gps_and_glonass_l1_and_l2_used_in_solution = 0
    else:
      self.header = std_msgs.msg.Header()
      self.tersus_msg_header = mrs_msgs.msg.TersusMessageHeader()
      self.solution_status = ''
      self.position_type = ''
      self.latitude = 0.
      self.longitude = 0.
      self.height = 0.
      self.undulation = 0.
      self.datum_id = ''
      self.latitude_std = 0.
      self.longitude_std = 0.
      self.height_std = 0.
      self.base_station_id = ''
      self.diff_age = 0.
      self.solution_age = 0.
      self.num_satellites_tracked = 0
      self.num_satellites_used_in_solution = 0
      self.num_gps_and_glonass_l1_used_in_solution = 0
      self.num_gps_and_glonass_l1_and_l2_used_in_solution = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.tersus_msg_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.tersus_msg_header.port_address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Hf().pack(_x.tersus_msg_header.sequence, _x.tersus_msg_header.idle_time))
      _x = self.tersus_msg_header.time_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HfIH().pack(_x.tersus_msg_header.gps_week, _x.tersus_msg_header.gps_week_seconds, _x.tersus_msg_header.receiver_status, _x.tersus_msg_header.software_version))
      _x = self.solution_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.position_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3df().pack(_x.latitude, _x.longitude, _x.height, _x.undulation))
      _x = self.datum_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.latitude_std, _x.longitude_std, _x.height_std))
      _x = self.base_station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f4B().pack(_x.diff_age, _x.solution_age, _x.num_satellites_tracked, _x.num_satellites_used_in_solution, _x.num_gps_and_glonass_l1_used_in_solution, _x.num_gps_and_glonass_l1_and_l2_used_in_solution))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tersus_msg_header is None:
        self.tersus_msg_header = mrs_msgs.msg.TersusMessageHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tersus_msg_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tersus_msg_header.message_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tersus_msg_header.port_address = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tersus_msg_header.port_address = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.tersus_msg_header.sequence, _x.tersus_msg_header.idle_time,) = _get_struct_Hf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tersus_msg_header.time_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tersus_msg_header.time_status = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.tersus_msg_header.gps_week, _x.tersus_msg_header.gps_week_seconds, _x.tersus_msg_header.receiver_status, _x.tersus_msg_header.software_version,) = _get_struct_HfIH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.position_type = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.latitude, _x.longitude, _x.height, _x.undulation,) = _get_struct_3df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.datum_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.datum_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.latitude_std, _x.longitude_std, _x.height_std,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_station_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.base_station_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.diff_age, _x.solution_age, _x.num_satellites_tracked, _x.num_satellites_used_in_solution, _x.num_gps_and_glonass_l1_used_in_solution, _x.num_gps_and_glonass_l1_and_l2_used_in_solution,) = _get_struct_2f4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.tersus_msg_header.message_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.tersus_msg_header.port_address
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Hf().pack(_x.tersus_msg_header.sequence, _x.tersus_msg_header.idle_time))
      _x = self.tersus_msg_header.time_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_HfIH().pack(_x.tersus_msg_header.gps_week, _x.tersus_msg_header.gps_week_seconds, _x.tersus_msg_header.receiver_status, _x.tersus_msg_header.software_version))
      _x = self.solution_status
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.position_type
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3df().pack(_x.latitude, _x.longitude, _x.height, _x.undulation))
      _x = self.datum_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3f().pack(_x.latitude_std, _x.longitude_std, _x.height_std))
      _x = self.base_station_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2f4B().pack(_x.diff_age, _x.solution_age, _x.num_satellites_tracked, _x.num_satellites_used_in_solution, _x.num_gps_and_glonass_l1_used_in_solution, _x.num_gps_and_glonass_l1_and_l2_used_in_solution))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.tersus_msg_header is None:
        self.tersus_msg_header = mrs_msgs.msg.TersusMessageHeader()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tersus_msg_header.message_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tersus_msg_header.message_name = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tersus_msg_header.port_address = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tersus_msg_header.port_address = str[start:end]
      _x = self
      start = end
      end += 6
      (_x.tersus_msg_header.sequence, _x.tersus_msg_header.idle_time,) = _get_struct_Hf().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.tersus_msg_header.time_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.tersus_msg_header.time_status = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.tersus_msg_header.gps_week, _x.tersus_msg_header.gps_week_seconds, _x.tersus_msg_header.receiver_status, _x.tersus_msg_header.software_version,) = _get_struct_HfIH().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.solution_status = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.solution_status = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.position_type = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.position_type = str[start:end]
      _x = self
      start = end
      end += 28
      (_x.latitude, _x.longitude, _x.height, _x.undulation,) = _get_struct_3df().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.datum_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.datum_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.latitude_std, _x.longitude_std, _x.height_std,) = _get_struct_3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.base_station_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.base_station_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.diff_age, _x.solution_age, _x.num_satellites_tracked, _x.num_satellites_used_in_solution, _x.num_gps_and_glonass_l1_used_in_solution, _x.num_gps_and_glonass_l1_and_l2_used_in_solution,) = _get_struct_2f4B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f4B = None
def _get_struct_2f4B():
    global _struct_2f4B
    if _struct_2f4B is None:
        _struct_2f4B = struct.Struct("<2f4B")
    return _struct_2f4B
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3df = None
def _get_struct_3df():
    global _struct_3df
    if _struct_3df is None:
        _struct_3df = struct.Struct("<3df")
    return _struct_3df
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_Hf = None
def _get_struct_Hf():
    global _struct_Hf
    if _struct_Hf is None:
        _struct_Hf = struct.Struct("<Hf")
    return _struct_Hf
_struct_HfIH = None
def _get_struct_HfIH():
    global _struct_HfIH
    if _struct_HfIH is None:
        _struct_HfIH = struct.Struct("<HfIH")
    return _struct_HfIH
