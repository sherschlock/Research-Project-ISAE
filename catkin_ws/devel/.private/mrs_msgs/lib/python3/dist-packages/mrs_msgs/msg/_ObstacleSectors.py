# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/ObstacleSectors.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class ObstacleSectors(genpy.Message):
  _md5sum = "b30315b35f44636daa49d3ef18ea3c4a"
  _type = "mrs_msgs/ObstacleSectors"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# This message represents the output from the mrs_bumper package.
#
# The *sectors* variable contains information about obstacles in the horizontal,
# bottom and up sectors. Horizontal sectors take up the first part of the array.
# Bottom and up sectors are the second and first elements from the end of the array:
# sectors[0, 1, ..., n_horizontal_sectors-1] -> horizontal sectors
# sectors[n_horizontal_sectors]              -> bottom sector
# sectors[n_horizontal_sectors+1]            -> top sector
#
# The horizontal sectors are indexed counterclockwise, starting from the front facing
# sector, relative to the MAV orientation (see picture below). The last two
# elements of the *sectors* variable are the above and below sectors, respectively.
#
#         TOP VIEW
#         --------
#
#        \         /
#         \   0   /   (forward)
#          \     /        x 
#                         ^
#            O O          |
#        1    X    3   <--* z
#            O O       y
#                
#          /     \
#         /   2   \
#        /         \

# Time at which the data in this message was generated, coordinate frame ID.
std_msgs/Header header

# Number of horizontal bumper sectors (total number of sectors -2).
uint32    n_horizontal_sectors

# Vertical FOV of the individual horizontal sectors.
float64   sectors_vertical_fov

# Distance to closest detected obstacle in each sector.
float64[] sectors

# Sensor ID of the sensor, which was used for obstacle detection in each sector.
int8[]    sector_sensors

## Obstacle distance special values.
float64 OBSTACLE_NOT_DETECTED=-1
float64 OBSTACLE_NO_DATA=-2

## Sensor types enum.
int8 SENSOR_NONE=-1
int8 SENSOR_DEPTH=0
int8 SENSOR_LIDAR1D=1
int8 SENSOR_LIDAR2D=2
int8 SENSOR_LIDAR3D=3

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id
"""
  # Pseudo-constants
  OBSTACLE_NOT_DETECTED = -1.0
  OBSTACLE_NO_DATA = -2.0
  SENSOR_NONE = -1
  SENSOR_DEPTH = 0
  SENSOR_LIDAR1D = 1
  SENSOR_LIDAR2D = 2
  SENSOR_LIDAR3D = 3

  __slots__ = ['header','n_horizontal_sectors','sectors_vertical_fov','sectors','sector_sensors']
  _slot_types = ['std_msgs/Header','uint32','float64','float64[]','int8[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,n_horizontal_sectors,sectors_vertical_fov,sectors,sector_sensors

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ObstacleSectors, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.n_horizontal_sectors is None:
        self.n_horizontal_sectors = 0
      if self.sectors_vertical_fov is None:
        self.sectors_vertical_fov = 0.
      if self.sectors is None:
        self.sectors = []
      if self.sector_sensors is None:
        self.sector_sensors = []
    else:
      self.header = std_msgs.msg.Header()
      self.n_horizontal_sectors = 0
      self.sectors_vertical_fov = 0.
      self.sectors = []
      self.sector_sensors = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Id().pack(_x.n_horizontal_sectors, _x.sectors_vertical_fov))
      length = len(self.sectors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.Struct(pattern).pack(*self.sectors))
      length = len(self.sector_sensors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.sector_sensors))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.n_horizontal_sectors, _x.sectors_vertical_fov,) = _get_struct_Id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sectors = s.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sector_sensors = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_Id().pack(_x.n_horizontal_sectors, _x.sectors_vertical_fov))
      length = len(self.sectors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.sectors.tostring())
      length = len(self.sector_sensors)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.sector_sensors.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.n_horizontal_sectors, _x.sectors_vertical_fov,) = _get_struct_Id().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sectors = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.sector_sensors = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_Id = None
def _get_struct_Id():
    global _struct_Id
    if _struct_Id is None:
        _struct_Id = struct.Struct("<Id")
    return _struct_Id
