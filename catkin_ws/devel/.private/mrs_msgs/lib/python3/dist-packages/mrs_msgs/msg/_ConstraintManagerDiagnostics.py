# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from mrs_msgs/ConstraintManagerDiagnostics.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import mrs_msgs.msg

class ConstraintManagerDiagnostics(genpy.Message):
  _md5sum = "4492970994a46fd3abfb96a139dcd930"
  _type = "mrs_msgs/ConstraintManagerDiagnostics"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# The diagnostics of the ConstraintManager.

time stamp

# The list of all loaded constraints.
string[] loaded

# The list of constraints which are available for the currently active state estimator.
string[] available

# The name of the current constraints.
string current_name

# The particular values of the current constraints.
# Beware, those might be overloaded by the current controller.
# Subscribe to "control_manager/current_constraints" for the
# true values.
mrs_msgs/DynamicsConstraints current_values

================================================================================
MSG: mrs_msgs/DynamicsConstraints
# UAV dynamics constraints

# speed: m/s
# acceleration: m/s^2
# jerk: m/s^3
# snap: m/s^4

# translational dynamics

float64 horizontal_speed
float64 horizontal_acceleration
float64 horizontal_jerk
float64 horizontal_snap

float64 vertical_ascending_speed
float64 vertical_ascending_acceleration
float64 vertical_ascending_jerk
float64 vertical_ascending_snap

float64 vertical_descending_speed
float64 vertical_descending_acceleration
float64 vertical_descending_jerk
float64 vertical_descending_snap

# heading

float64 heading_speed
float64 heading_acceleration
float64 heading_jerk
float64 heading_snap

# angular rates: rad/s

float64 roll_rate
float64 pitch_rate
float64 yaw_rate

# maximum tilt, rad
# max angle between body-3 and world-3 axes

float64 tilt
"""
  __slots__ = ['stamp','loaded','available','current_name','current_values']
  _slot_types = ['time','string[]','string[]','string','mrs_msgs/DynamicsConstraints']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       stamp,loaded,available,current_name,current_values

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ConstraintManagerDiagnostics, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.loaded is None:
        self.loaded = []
      if self.available is None:
        self.available = []
      if self.current_name is None:
        self.current_name = ''
      if self.current_values is None:
        self.current_values = mrs_msgs.msg.DynamicsConstraints()
    else:
      self.stamp = genpy.Time()
      self.loaded = []
      self.available = []
      self.current_name = ''
      self.current_values = mrs_msgs.msg.DynamicsConstraints()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      length = len(self.loaded)
      buff.write(_struct_I.pack(length))
      for val1 in self.loaded:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.available)
      buff.write(_struct_I.pack(length))
      for val1 in self.available:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.current_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_20d().pack(_x.current_values.horizontal_speed, _x.current_values.horizontal_acceleration, _x.current_values.horizontal_jerk, _x.current_values.horizontal_snap, _x.current_values.vertical_ascending_speed, _x.current_values.vertical_ascending_acceleration, _x.current_values.vertical_ascending_jerk, _x.current_values.vertical_ascending_snap, _x.current_values.vertical_descending_speed, _x.current_values.vertical_descending_acceleration, _x.current_values.vertical_descending_jerk, _x.current_values.vertical_descending_snap, _x.current_values.heading_speed, _x.current_values.heading_acceleration, _x.current_values.heading_jerk, _x.current_values.heading_snap, _x.current_values.roll_rate, _x.current_values.pitch_rate, _x.current_values.yaw_rate, _x.current_values.tilt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.current_values is None:
        self.current_values = mrs_msgs.msg.DynamicsConstraints()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.loaded = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.loaded.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_name = str[start:end]
      _x = self
      start = end
      end += 160
      (_x.current_values.horizontal_speed, _x.current_values.horizontal_acceleration, _x.current_values.horizontal_jerk, _x.current_values.horizontal_snap, _x.current_values.vertical_ascending_speed, _x.current_values.vertical_ascending_acceleration, _x.current_values.vertical_ascending_jerk, _x.current_values.vertical_ascending_snap, _x.current_values.vertical_descending_speed, _x.current_values.vertical_descending_acceleration, _x.current_values.vertical_descending_jerk, _x.current_values.vertical_descending_snap, _x.current_values.heading_speed, _x.current_values.heading_acceleration, _x.current_values.heading_jerk, _x.current_values.heading_snap, _x.current_values.roll_rate, _x.current_values.pitch_rate, _x.current_values.yaw_rate, _x.current_values.tilt,) = _get_struct_20d().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2I().pack(_x.stamp.secs, _x.stamp.nsecs))
      length = len(self.loaded)
      buff.write(_struct_I.pack(length))
      for val1 in self.loaded:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.available)
      buff.write(_struct_I.pack(length))
      for val1 in self.available:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      _x = self.current_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_20d().pack(_x.current_values.horizontal_speed, _x.current_values.horizontal_acceleration, _x.current_values.horizontal_jerk, _x.current_values.horizontal_snap, _x.current_values.vertical_ascending_speed, _x.current_values.vertical_ascending_acceleration, _x.current_values.vertical_ascending_jerk, _x.current_values.vertical_ascending_snap, _x.current_values.vertical_descending_speed, _x.current_values.vertical_descending_acceleration, _x.current_values.vertical_descending_jerk, _x.current_values.vertical_descending_snap, _x.current_values.heading_speed, _x.current_values.heading_acceleration, _x.current_values.heading_jerk, _x.current_values.heading_snap, _x.current_values.roll_rate, _x.current_values.pitch_rate, _x.current_values.yaw_rate, _x.current_values.tilt))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.stamp is None:
        self.stamp = genpy.Time()
      if self.current_values is None:
        self.current_values = mrs_msgs.msg.DynamicsConstraints()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.stamp.secs, _x.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.loaded = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.loaded.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.available = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.available.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.current_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.current_name = str[start:end]
      _x = self
      start = end
      end += 160
      (_x.current_values.horizontal_speed, _x.current_values.horizontal_acceleration, _x.current_values.horizontal_jerk, _x.current_values.horizontal_snap, _x.current_values.vertical_ascending_speed, _x.current_values.vertical_ascending_acceleration, _x.current_values.vertical_ascending_jerk, _x.current_values.vertical_ascending_snap, _x.current_values.vertical_descending_speed, _x.current_values.vertical_descending_acceleration, _x.current_values.vertical_descending_jerk, _x.current_values.vertical_descending_snap, _x.current_values.heading_speed, _x.current_values.heading_acceleration, _x.current_values.heading_jerk, _x.current_values.heading_snap, _x.current_values.roll_rate, _x.current_values.pitch_rate, _x.current_values.yaw_rate, _x.current_values.tilt,) = _get_struct_20d().unpack(str[start:end])
      self.stamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_20d = None
def _get_struct_20d():
    global _struct_20d
    if _struct_20d is None:
        _struct_20d = struct.Struct("<20d")
    return _struct_20d
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
