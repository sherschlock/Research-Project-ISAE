// Generated by gencpp from file mrs_msgs/DynamicsConstraintsSrvRequest.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_DYNAMICSCONSTRAINTSSRVREQUEST_H
#define MRS_MSGS_MESSAGE_DYNAMICSCONSTRAINTSSRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mrs_msgs/DynamicsConstraints.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct DynamicsConstraintsSrvRequest_
{
  typedef DynamicsConstraintsSrvRequest_<ContainerAllocator> Type;

  DynamicsConstraintsSrvRequest_()
    : constraints()  {
    }
  DynamicsConstraintsSrvRequest_(const ContainerAllocator& _alloc)
    : constraints(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mrs_msgs::DynamicsConstraints_<ContainerAllocator>  _constraints_type;
  _constraints_type constraints;





  typedef boost::shared_ptr< ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct DynamicsConstraintsSrvRequest_

typedef ::mrs_msgs::DynamicsConstraintsSrvRequest_<std::allocator<void> > DynamicsConstraintsSrvRequest;

typedef boost::shared_ptr< ::mrs_msgs::DynamicsConstraintsSrvRequest > DynamicsConstraintsSrvRequestPtr;
typedef boost::shared_ptr< ::mrs_msgs::DynamicsConstraintsSrvRequest const> DynamicsConstraintsSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator1> & lhs, const ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.constraints == rhs.constraints;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator1> & lhs, const ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95787fab1213e37f2c767c75b0228f57";
  }

  static const char* value(const ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95787fab1213e37fULL;
  static const uint64_t static_value2 = 0x2c767c75b0228f57ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/DynamicsConstraintsSrvRequest";
  }

  static const char* value(const ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/DynamicsConstraints constraints\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/DynamicsConstraints\n"
"# UAV dynamics constraints\n"
"\n"
"# speed: m/s\n"
"# acceleration: m/s^2\n"
"# jerk: m/s^3\n"
"# snap: m/s^4\n"
"\n"
"# translational dynamics\n"
"\n"
"float64 horizontal_speed\n"
"float64 horizontal_acceleration\n"
"float64 horizontal_jerk\n"
"float64 horizontal_snap\n"
"\n"
"float64 vertical_ascending_speed\n"
"float64 vertical_ascending_acceleration\n"
"float64 vertical_ascending_jerk\n"
"float64 vertical_ascending_snap\n"
"\n"
"float64 vertical_descending_speed\n"
"float64 vertical_descending_acceleration\n"
"float64 vertical_descending_jerk\n"
"float64 vertical_descending_snap\n"
"\n"
"# heading\n"
"\n"
"float64 heading_speed\n"
"float64 heading_acceleration\n"
"float64 heading_jerk\n"
"float64 heading_snap\n"
"\n"
"# angular rates: rad/s\n"
"\n"
"float64 roll_rate\n"
"float64 pitch_rate\n"
"float64 yaw_rate\n"
"\n"
"# maximum tilt, rad\n"
"# max angle between body-3 and world-3 axes\n"
"\n"
"float64 tilt\n"
;
  }

  static const char* value(const ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.constraints);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DynamicsConstraintsSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::DynamicsConstraintsSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "constraints: ";
    s << std::endl;
    Printer< ::mrs_msgs::DynamicsConstraints_<ContainerAllocator> >::stream(s, indent + "  ", v.constraints);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_DYNAMICSCONSTRAINTSSRVREQUEST_H
