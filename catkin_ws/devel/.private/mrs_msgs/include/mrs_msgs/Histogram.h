// Generated by gencpp from file mrs_msgs/Histogram.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_HISTOGRAM_H
#define MRS_MSGS_MESSAGE_HISTOGRAM_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct Histogram_
{
  typedef Histogram_<ContainerAllocator> Type;

  Histogram_()
    : header()
    , unit()
    , bin_size(0.0)
    , bin_min(0.0)
    , bin_max(0.0)
    , bin_mark(0)
    , bins()  {
    }
  Histogram_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , unit(_alloc)
    , bin_size(0.0)
    , bin_min(0.0)
    , bin_max(0.0)
    , bin_mark(0)
    , bins(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _unit_type;
  _unit_type unit;

   typedef double _bin_size_type;
  _bin_size_type bin_size;

   typedef double _bin_min_type;
  _bin_min_type bin_min;

   typedef double _bin_max_type;
  _bin_max_type bin_max;

   typedef uint32_t _bin_mark_type;
  _bin_mark_type bin_mark;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _bins_type;
  _bins_type bins;





  typedef boost::shared_ptr< ::mrs_msgs::Histogram_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::Histogram_<ContainerAllocator> const> ConstPtr;

}; // struct Histogram_

typedef ::mrs_msgs::Histogram_<std::allocator<void> > Histogram;

typedef boost::shared_ptr< ::mrs_msgs::Histogram > HistogramPtr;
typedef boost::shared_ptr< ::mrs_msgs::Histogram const> HistogramConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::Histogram_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::Histogram_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::Histogram_<ContainerAllocator1> & lhs, const ::mrs_msgs::Histogram_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.unit == rhs.unit &&
    lhs.bin_size == rhs.bin_size &&
    lhs.bin_min == rhs.bin_min &&
    lhs.bin_max == rhs.bin_max &&
    lhs.bin_mark == rhs.bin_mark &&
    lhs.bins == rhs.bins;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::Histogram_<ContainerAllocator1> & lhs, const ::mrs_msgs::Histogram_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Histogram_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Histogram_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Histogram_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Histogram_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Histogram_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Histogram_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::Histogram_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d299fa208b702809f19d8557835b7559";
  }

  static const char* value(const ::mrs_msgs::Histogram_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd299fa208b702809ULL;
  static const uint64_t static_value2 = 0xf19d8557835b7559ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::Histogram_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/Histogram";
  }

  static const char* value(const ::mrs_msgs::Histogram_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::Histogram_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is a debug message for the mrs_bumper package.\n"
"# It contains a histogram of depth values from a depthmap\n"
"# image, if the depth sensor is used for obstacle detection.\n"
"\n"
"# Time at which the data in this message was generated, coordinate frame ID.\n"
"std_msgs/Header header\n"
"\n"
"# Unit of distance measurement in the histogram (e.g. \"mm\" for millimeters\").\n"
"string    unit\n"
"\n"
"# Structure of the histogram.\n"
"float64   bin_size\n"
"float64   bin_min\n"
"float64   bin_max\n"
"\n"
"# The mark at which an obstacle was detected (if equal to the number of bins,\n"
"# no obstacle was detected).\n"
"uint32    bin_mark\n"
"\n"
"# Bin values of the histogram.\n"
"float32[] bins\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mrs_msgs::Histogram_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::Histogram_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.unit);
      stream.next(m.bin_size);
      stream.next(m.bin_min);
      stream.next(m.bin_max);
      stream.next(m.bin_mark);
      stream.next(m.bins);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Histogram_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::Histogram_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::Histogram_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "unit: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.unit);
    s << indent << "bin_size: ";
    Printer<double>::stream(s, indent + "  ", v.bin_size);
    s << indent << "bin_min: ";
    Printer<double>::stream(s, indent + "  ", v.bin_min);
    s << indent << "bin_max: ";
    Printer<double>::stream(s, indent + "  ", v.bin_max);
    s << indent << "bin_mark: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.bin_mark);
    s << indent << "bins[]" << std::endl;
    for (size_t i = 0; i < v.bins.size(); ++i)
    {
      s << indent << "  bins[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.bins[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_HISTOGRAM_H
