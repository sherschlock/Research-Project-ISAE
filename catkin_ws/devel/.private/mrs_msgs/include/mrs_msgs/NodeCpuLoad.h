// Generated by gencpp from file mrs_msgs/NodeCpuLoad.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_NODECPULOAD_H
#define MRS_MSGS_MESSAGE_NODECPULOAD_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct NodeCpuLoad_
{
  typedef NodeCpuLoad_<ContainerAllocator> Type;

  NodeCpuLoad_()
    : node_names()
    , cpu_loads()  {
    }
  NodeCpuLoad_(const ContainerAllocator& _alloc)
    : node_names(_alloc)
    , cpu_loads(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _node_names_type;
  _node_names_type node_names;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _cpu_loads_type;
  _cpu_loads_type cpu_loads;





  typedef boost::shared_ptr< ::mrs_msgs::NodeCpuLoad_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::NodeCpuLoad_<ContainerAllocator> const> ConstPtr;

}; // struct NodeCpuLoad_

typedef ::mrs_msgs::NodeCpuLoad_<std::allocator<void> > NodeCpuLoad;

typedef boost::shared_ptr< ::mrs_msgs::NodeCpuLoad > NodeCpuLoadPtr;
typedef boost::shared_ptr< ::mrs_msgs::NodeCpuLoad const> NodeCpuLoadConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::NodeCpuLoad_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::NodeCpuLoad_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::NodeCpuLoad_<ContainerAllocator1> & lhs, const ::mrs_msgs::NodeCpuLoad_<ContainerAllocator2> & rhs)
{
  return lhs.node_names == rhs.node_names &&
    lhs.cpu_loads == rhs.cpu_loads;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::NodeCpuLoad_<ContainerAllocator1> & lhs, const ::mrs_msgs::NodeCpuLoad_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::NodeCpuLoad_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::NodeCpuLoad_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::NodeCpuLoad_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::NodeCpuLoad_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::NodeCpuLoad_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::NodeCpuLoad_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::NodeCpuLoad_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fde7b9ae5b72c740d25f009d8731c6a2";
  }

  static const char* value(const ::mrs_msgs::NodeCpuLoad_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfde7b9ae5b72c740ULL;
  static const uint64_t static_value2 = 0xd25f009d8731c6a2ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::NodeCpuLoad_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/NodeCpuLoad";
  }

  static const char* value(const ::mrs_msgs::NodeCpuLoad_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::NodeCpuLoad_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string[] node_names\n"
"float32[] cpu_loads\n"
;
  }

  static const char* value(const ::mrs_msgs::NodeCpuLoad_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::NodeCpuLoad_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.node_names);
      stream.next(m.cpu_loads);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NodeCpuLoad_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::NodeCpuLoad_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::NodeCpuLoad_<ContainerAllocator>& v)
  {
    s << indent << "node_names[]" << std::endl;
    for (size_t i = 0; i < v.node_names.size(); ++i)
    {
      s << indent << "  node_names[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.node_names[i]);
    }
    s << indent << "cpu_loads[]" << std::endl;
    for (size_t i = 0; i < v.cpu_loads.size(); ++i)
    {
      s << indent << "  cpu_loads[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.cpu_loads[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_NODECPULOAD_H
