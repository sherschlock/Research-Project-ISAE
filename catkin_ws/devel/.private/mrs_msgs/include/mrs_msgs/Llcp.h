// Generated by gencpp from file mrs_msgs/Llcp.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_LLCP_H
#define MRS_MSGS_MESSAGE_LLCP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct Llcp_
{
  typedef Llcp_<ContainerAllocator> Type;

  Llcp_()
    : stamp()
    , checksum_matched(false)
    , id(0)
    , payload()  {
    }
  Llcp_(const ContainerAllocator& _alloc)
    : stamp()
    , checksum_matched(false)
    , id(0)
    , payload(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint8_t _checksum_matched_type;
  _checksum_matched_type checksum_matched;

   typedef uint8_t _id_type;
  _id_type id;

   typedef std::vector<uint8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint8_t>> _payload_type;
  _payload_type payload;





  typedef boost::shared_ptr< ::mrs_msgs::Llcp_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::Llcp_<ContainerAllocator> const> ConstPtr;

}; // struct Llcp_

typedef ::mrs_msgs::Llcp_<std::allocator<void> > Llcp;

typedef boost::shared_ptr< ::mrs_msgs::Llcp > LlcpPtr;
typedef boost::shared_ptr< ::mrs_msgs::Llcp const> LlcpConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::Llcp_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::Llcp_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::Llcp_<ContainerAllocator1> & lhs, const ::mrs_msgs::Llcp_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.checksum_matched == rhs.checksum_matched &&
    lhs.id == rhs.id &&
    lhs.payload == rhs.payload;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::Llcp_<ContainerAllocator1> & lhs, const ::mrs_msgs::Llcp_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Llcp_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Llcp_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Llcp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Llcp_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Llcp_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Llcp_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::Llcp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc6c55fdf6549653e8a72bc4c8e3efc0";
  }

  static const char* value(const ::mrs_msgs::Llcp_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc6c55fdf6549653ULL;
  static const uint64_t static_value2 = 0xe8a72bc4c8e3efc0ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::Llcp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/Llcp";
  }

  static const char* value(const ::mrs_msgs::Llcp_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::Llcp_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"bool checksum_matched\n"
"uint8 id\n"
"uint8[] payload\n"
;
  }

  static const char* value(const ::mrs_msgs::Llcp_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::Llcp_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.checksum_matched);
      stream.next(m.id);
      stream.next(m.payload);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Llcp_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::Llcp_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::Llcp_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "checksum_matched: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.checksum_matched);
    s << indent << "id: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.id);
    s << indent << "payload[]" << std::endl;
    for (size_t i = 0; i < v.payload.size(); ++i)
    {
      s << indent << "  payload[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.payload[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_LLCP_H
