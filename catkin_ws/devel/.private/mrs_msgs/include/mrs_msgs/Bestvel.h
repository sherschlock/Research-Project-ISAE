// Generated by gencpp from file mrs_msgs/Bestvel.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_BESTVEL_H
#define MRS_MSGS_MESSAGE_BESTVEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <mrs_msgs/TersusMessageHeader.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct Bestvel_
{
  typedef Bestvel_<ContainerAllocator> Type;

  Bestvel_()
    : header()
    , tersus_msg_header()
    , solution_status()
    , velocity_type()
    , latency(0.0)
    , age(0.0)
    , horizontal_speed(0.0)
    , track_ground(0.0)
    , vertical_speed(0.0)  {
    }
  Bestvel_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tersus_msg_header(_alloc)
    , solution_status(_alloc)
    , velocity_type(_alloc)
    , latency(0.0)
    , age(0.0)
    , horizontal_speed(0.0)
    , track_ground(0.0)
    , vertical_speed(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::mrs_msgs::TersusMessageHeader_<ContainerAllocator>  _tersus_msg_header_type;
  _tersus_msg_header_type tersus_msg_header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _solution_status_type;
  _solution_status_type solution_status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _velocity_type_type;
  _velocity_type_type velocity_type;

   typedef float _latency_type;
  _latency_type latency;

   typedef float _age_type;
  _age_type age;

   typedef double _horizontal_speed_type;
  _horizontal_speed_type horizontal_speed;

   typedef double _track_ground_type;
  _track_ground_type track_ground;

   typedef double _vertical_speed_type;
  _vertical_speed_type vertical_speed;





  typedef boost::shared_ptr< ::mrs_msgs::Bestvel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::Bestvel_<ContainerAllocator> const> ConstPtr;

}; // struct Bestvel_

typedef ::mrs_msgs::Bestvel_<std::allocator<void> > Bestvel;

typedef boost::shared_ptr< ::mrs_msgs::Bestvel > BestvelPtr;
typedef boost::shared_ptr< ::mrs_msgs::Bestvel const> BestvelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::Bestvel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::Bestvel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::Bestvel_<ContainerAllocator1> & lhs, const ::mrs_msgs::Bestvel_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.tersus_msg_header == rhs.tersus_msg_header &&
    lhs.solution_status == rhs.solution_status &&
    lhs.velocity_type == rhs.velocity_type &&
    lhs.latency == rhs.latency &&
    lhs.age == rhs.age &&
    lhs.horizontal_speed == rhs.horizontal_speed &&
    lhs.track_ground == rhs.track_ground &&
    lhs.vertical_speed == rhs.vertical_speed;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::Bestvel_<ContainerAllocator1> & lhs, const ::mrs_msgs::Bestvel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Bestvel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Bestvel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Bestvel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Bestvel_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Bestvel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Bestvel_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::Bestvel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "02a85bdf86c56792843f3c24e6d61e43";
  }

  static const char* value(const ::mrs_msgs::Bestvel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x02a85bdf86c56792ULL;
  static const uint64_t static_value2 = 0x843f3c24e6d61e43ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::Bestvel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/Bestvel";
  }

  static const char* value(const ::mrs_msgs::Bestvel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::Bestvel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# See section 3.1.4 BESTVEL in https://www.tersus-gnss.com/assets/upload/file/20180608173259349.pdf\n"
"# --------------------------------------------------------------------------------------\n"
"\n"
"Header header\n"
"\n"
"# message 99\n"
"TersusMessageHeader tersus_msg_header\n"
"\n"
"string solution_status\n"
"string velocity_type\n"
"\n"
"# A measure of the latency in the velocity time tag in seconds.\n"
"float32 latency\n"
"\n"
"# Differential age in seconds\n"
"float32 age\n"
"\n"
"# Horizontal speed over ground, meters/second\n"
"float64 horizontal_speed\n"
"\n"
"# Direction of motion over ground with respect to true North, degrees\n"
"float64 track_ground\n"
"\n"
"# Vertical speed, where positive values correspond to increasing altitude, meters/second\n"
"float64 vertical_speed\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/TersusMessageHeader\n"
"# This is modified version from Novatel\n"
"# For original Novatel see: http://docs.ros.org/jade/api/novatel_msgs/html/msg/CommonHeader.html\n"
"# For Tersus see: https://www.tersus-gnss.com/assets/upload/file/20180608173259349.pdf\n"
"# See section 1.5 in the Tersus manual.\n"
"# --------------------------------------------------------------------------------------\n"
"\n"
"# On the wire, this header is preceeded by three sync bytes,\n"
"# which are 0xAA 0x44 0x12, and a uint8 which is the header length.\n"
"\n"
"# Measurement source, format, response bit.\n"
"string message_name\n"
"\n"
"string port_address\n"
"\n"
"uint16 sequence\n"
"\n"
"float32 idle_time\n"
"\n"
"# Table 1 in the Tersus manual.\n"
"string time_status\n"
"\n"
"uint16 gps_week\n"
"float32 gps_week_seconds\n"
"\n"
"uint32 receiver_status\n"
"uint16 software_version\n"
;
  }

  static const char* value(const ::mrs_msgs::Bestvel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::Bestvel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tersus_msg_header);
      stream.next(m.solution_status);
      stream.next(m.velocity_type);
      stream.next(m.latency);
      stream.next(m.age);
      stream.next(m.horizontal_speed);
      stream.next(m.track_ground);
      stream.next(m.vertical_speed);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bestvel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::Bestvel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::Bestvel_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tersus_msg_header: ";
    s << std::endl;
    Printer< ::mrs_msgs::TersusMessageHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.tersus_msg_header);
    s << indent << "solution_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.solution_status);
    s << indent << "velocity_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.velocity_type);
    s << indent << "latency: ";
    Printer<float>::stream(s, indent + "  ", v.latency);
    s << indent << "age: ";
    Printer<float>::stream(s, indent + "  ", v.age);
    s << indent << "horizontal_speed: ";
    Printer<double>::stream(s, indent + "  ", v.horizontal_speed);
    s << indent << "track_ground: ";
    Printer<double>::stream(s, indent + "  ", v.track_ground);
    s << indent << "vertical_speed: ";
    Printer<double>::stream(s, indent + "  ", v.vertical_speed);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_BESTVEL_H
