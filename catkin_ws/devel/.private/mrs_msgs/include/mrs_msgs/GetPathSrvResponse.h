// Generated by gencpp from file mrs_msgs/GetPathSrvResponse.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_GETPATHSRVRESPONSE_H
#define MRS_MSGS_MESSAGE_GETPATHSRVRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mrs_msgs/TrajectoryReference.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct GetPathSrvResponse_
{
  typedef GetPathSrvResponse_<ContainerAllocator> Type;

  GetPathSrvResponse_()
    : success(false)
    , message()
    , trajectory()  {
    }
  GetPathSrvResponse_(const ContainerAllocator& _alloc)
    : success(false)
    , message(_alloc)
    , trajectory(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _success_type;
  _success_type success;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_type;
  _message_type message;

   typedef  ::mrs_msgs::TrajectoryReference_<ContainerAllocator>  _trajectory_type;
  _trajectory_type trajectory;





  typedef boost::shared_ptr< ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetPathSrvResponse_

typedef ::mrs_msgs::GetPathSrvResponse_<std::allocator<void> > GetPathSrvResponse;

typedef boost::shared_ptr< ::mrs_msgs::GetPathSrvResponse > GetPathSrvResponsePtr;
typedef boost::shared_ptr< ::mrs_msgs::GetPathSrvResponse const> GetPathSrvResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator1> & lhs, const ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator2> & rhs)
{
  return lhs.success == rhs.success &&
    lhs.message == rhs.message &&
    lhs.trajectory == rhs.trajectory;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator1> & lhs, const ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "82321dcf1fe038ae682bc80ec8b8b92d";
  }

  static const char* value(const ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x82321dcf1fe038aeULL;
  static const uint64_t static_value2 = 0x682bc80ec8b8b92dULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/GetPathSrvResponse";
  }

  static const char* value(const ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool success\n"
"string message\n"
"mrs_msgs/TrajectoryReference trajectory\n"
"\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/TrajectoryReference\n"
"# The Trajectory reference that can be supplied to mrs_uav_manager::ControlManager.\n"
"\n"
"Header header\n"
"\n"
"# uniquely identifies the user input\n"
"int64 input_id\n"
"\n"
"# True if the heading part should be tracked, otherwise the tracker should maintain the current heading.\n"
"bool use_heading\n"
"\n"
"# True if the trajectory should start being tracked immediately after receiving it.\n"
"# Beware the header time stamp matters in this case.\n"
"bool fly_now\n"
"\n"
"# True if the trajectory should be looped.\n"
"bool loop\n"
"\n"
"# The time difference between the trajectory samples.\n"
"# It falls back to 0.2 s if left unset.\n"
"float64 dt\n"
"\n"
"# The list of points in the trajectory, spaced by the dt.\n"
"Reference[] points \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/Reference\n"
"# This message defines a control reference with a Position+Heading.\n"
"\n"
"geometry_msgs/Point position\n"
"\n"
"# Heading is atan2() of XY-world projection of the UAV's body X-axis.\n"
"float64 heading\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.success);
      stream.next(m.message);
      stream.next(m.trajectory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetPathSrvResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::GetPathSrvResponse_<ContainerAllocator>& v)
  {
    s << indent << "success: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.success);
    s << indent << "message: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message);
    s << indent << "trajectory: ";
    s << std::endl;
    Printer< ::mrs_msgs::TrajectoryReference_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_GETPATHSRVRESPONSE_H
