// Generated by gencpp from file mrs_msgs/Gpgst.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_GPGST_H
#define MRS_MSGS_MESSAGE_GPGST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct Gpgst_
{
  typedef Gpgst_<ContainerAllocator> Type;

  Gpgst_()
    : header()
    , message_id()
    , utc(0.0)
    , rms(0.0)
    , smjr_std(0.0)
    , smnr_std(0.0)
    , orient(0.0)
    , lat_std(0.0)
    , lon_std(0.0)
    , alt_std(0.0)  {
    }
  Gpgst_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , message_id(_alloc)
    , utc(0.0)
    , rms(0.0)
    , smjr_std(0.0)
    , smnr_std(0.0)
    , orient(0.0)
    , lat_std(0.0)
    , lon_std(0.0)
    , alt_std(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_id_type;
  _message_id_type message_id;

   typedef double _utc_type;
  _utc_type utc;

   typedef double _rms_type;
  _rms_type rms;

   typedef double _smjr_std_type;
  _smjr_std_type smjr_std;

   typedef double _smnr_std_type;
  _smnr_std_type smnr_std;

   typedef double _orient_type;
  _orient_type orient;

   typedef double _lat_std_type;
  _lat_std_type lat_std;

   typedef double _lon_std_type;
  _lon_std_type lon_std;

   typedef double _alt_std_type;
  _alt_std_type alt_std;





  typedef boost::shared_ptr< ::mrs_msgs::Gpgst_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::Gpgst_<ContainerAllocator> const> ConstPtr;

}; // struct Gpgst_

typedef ::mrs_msgs::Gpgst_<std::allocator<void> > Gpgst;

typedef boost::shared_ptr< ::mrs_msgs::Gpgst > GpgstPtr;
typedef boost::shared_ptr< ::mrs_msgs::Gpgst const> GpgstConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::Gpgst_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::Gpgst_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::Gpgst_<ContainerAllocator1> & lhs, const ::mrs_msgs::Gpgst_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.message_id == rhs.message_id &&
    lhs.utc == rhs.utc &&
    lhs.rms == rhs.rms &&
    lhs.smjr_std == rhs.smjr_std &&
    lhs.smnr_std == rhs.smnr_std &&
    lhs.orient == rhs.orient &&
    lhs.lat_std == rhs.lat_std &&
    lhs.lon_std == rhs.lon_std &&
    lhs.alt_std == rhs.alt_std;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::Gpgst_<ContainerAllocator1> & lhs, const ::mrs_msgs::Gpgst_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Gpgst_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Gpgst_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Gpgst_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Gpgst_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Gpgst_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Gpgst_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::Gpgst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "93293830e1d4d500dc0342868321dfef";
  }

  static const char* value(const ::mrs_msgs::Gpgst_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x93293830e1d4d500ULL;
  static const uint64_t static_value2 = 0xdc0342868321dfefULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::Gpgst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/Gpgst";
  }

  static const char* value(const ::mrs_msgs::Gpgst_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::Gpgst_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message from GPGST NMEA String\n"
"Header header\n"
"\n"
"string message_id\n"
"\n"
"float64 utc\n"
"\n"
"float64 rms\n"
"\n"
"float64 smjr_std\n"
"float64 smnr_std\n"
"\n"
"float64 orient\n"
"\n"
"float64 lat_std\n"
"float64 lon_std\n"
"float64 alt_std\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mrs_msgs::Gpgst_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::Gpgst_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.message_id);
      stream.next(m.utc);
      stream.next(m.rms);
      stream.next(m.smjr_std);
      stream.next(m.smnr_std);
      stream.next(m.orient);
      stream.next(m.lat_std);
      stream.next(m.lon_std);
      stream.next(m.alt_std);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gpgst_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::Gpgst_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::Gpgst_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "message_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message_id);
    s << indent << "utc: ";
    Printer<double>::stream(s, indent + "  ", v.utc);
    s << indent << "rms: ";
    Printer<double>::stream(s, indent + "  ", v.rms);
    s << indent << "smjr_std: ";
    Printer<double>::stream(s, indent + "  ", v.smjr_std);
    s << indent << "smnr_std: ";
    Printer<double>::stream(s, indent + "  ", v.smnr_std);
    s << indent << "orient: ";
    Printer<double>::stream(s, indent + "  ", v.orient);
    s << indent << "lat_std: ";
    Printer<double>::stream(s, indent + "  ", v.lat_std);
    s << indent << "lon_std: ";
    Printer<double>::stream(s, indent + "  ", v.lon_std);
    s << indent << "alt_std: ";
    Printer<double>::stream(s, indent + "  ", v.alt_std);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_GPGST_H
