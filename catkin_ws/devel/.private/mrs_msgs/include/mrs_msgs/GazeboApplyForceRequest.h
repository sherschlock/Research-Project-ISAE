// Generated by gencpp from file mrs_msgs/GazeboApplyForceRequest.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_GAZEBOAPPLYFORCEREQUEST_H
#define MRS_MSGS_MESSAGE_GAZEBOAPPLYFORCEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct GazeboApplyForceRequest_
{
  typedef GazeboApplyForceRequest_<ContainerAllocator> Type;

  GazeboApplyForceRequest_()
    : model_name()
    , link_name()
    , force()
    , torque()  {
      force.assign(0.0);

      torque.assign(0.0);
  }
  GazeboApplyForceRequest_(const ContainerAllocator& _alloc)
    : model_name(_alloc)
    , link_name(_alloc)
    , force()
    , torque()  {
  (void)_alloc;
      force.assign(0.0);

      torque.assign(0.0);
  }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _model_name_type;
  _model_name_type model_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _link_name_type;
  _link_name_type link_name;

   typedef boost::array<double, 3>  _force_type;
  _force_type force;

   typedef boost::array<double, 3>  _torque_type;
  _torque_type torque;





  typedef boost::shared_ptr< ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct GazeboApplyForceRequest_

typedef ::mrs_msgs::GazeboApplyForceRequest_<std::allocator<void> > GazeboApplyForceRequest;

typedef boost::shared_ptr< ::mrs_msgs::GazeboApplyForceRequest > GazeboApplyForceRequestPtr;
typedef boost::shared_ptr< ::mrs_msgs::GazeboApplyForceRequest const> GazeboApplyForceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator1> & lhs, const ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.model_name == rhs.model_name &&
    lhs.link_name == rhs.link_name &&
    lhs.force == rhs.force &&
    lhs.torque == rhs.torque;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator1> & lhs, const ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "051c4d5b49061f38e55bd8c694132fb0";
  }

  static const char* value(const ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x051c4d5b49061f38ULL;
  static const uint64_t static_value2 = 0xe55bd8c694132fb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/GazeboApplyForceRequest";
  }

  static const char* value(const ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A service to apply a force and/or torque to a link in a Gazebo simulation\n"
"# using the mrs_gazebo_ros_interface package.\n"
"\n"
"# Name of the model, containing the link to apply the force/torque to.\n"
"string model_name\n"
"\n"
"# Name of the link to apply the force/torque to.\n"
"string link_name\n"
"\n"
"# The force vector to apply (in the Gazebo global coordinate system).\n"
"float64[3] force\n"
"\n"
"# The torque vector to apply (in the Gazebo global coordinate system).\n"
"float64[3] torque\n"
"\n"
;
  }

  static const char* value(const ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model_name);
      stream.next(m.link_name);
      stream.next(m.force);
      stream.next(m.torque);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GazeboApplyForceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::GazeboApplyForceRequest_<ContainerAllocator>& v)
  {
    s << indent << "model_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.model_name);
    s << indent << "link_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.link_name);
    s << indent << "force[]" << std::endl;
    for (size_t i = 0; i < v.force.size(); ++i)
    {
      s << indent << "  force[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.force[i]);
    }
    s << indent << "torque[]" << std::endl;
    for (size_t i = 0; i < v.torque.size(); ++i)
    {
      s << indent << "  torque[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.torque[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_GAZEBOAPPLYFORCEREQUEST_H
