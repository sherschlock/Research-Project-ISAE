// Generated by gencpp from file mrs_msgs/SxdMeasurement.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_SXDMEASUREMENT_H
#define MRS_MSGS_MESSAGE_SXDMEASUREMENT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct SxdMeasurement_
{
  typedef SxdMeasurement_<ContainerAllocator> Type;

  SxdMeasurement_()
    : stamp()
    , num_detections(0)
    , channels()  {
    }
  SxdMeasurement_(const ContainerAllocator& _alloc)
    : stamp()
    , num_detections(0)
    , channels(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint64_t _num_detections_type;
  _num_detections_type num_detections;

   typedef std::vector<uint16_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<uint16_t>> _channels_type;
  _channels_type channels;





  typedef boost::shared_ptr< ::mrs_msgs::SxdMeasurement_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::SxdMeasurement_<ContainerAllocator> const> ConstPtr;

}; // struct SxdMeasurement_

typedef ::mrs_msgs::SxdMeasurement_<std::allocator<void> > SxdMeasurement;

typedef boost::shared_ptr< ::mrs_msgs::SxdMeasurement > SxdMeasurementPtr;
typedef boost::shared_ptr< ::mrs_msgs::SxdMeasurement const> SxdMeasurementConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::SxdMeasurement_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::SxdMeasurement_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::SxdMeasurement_<ContainerAllocator1> & lhs, const ::mrs_msgs::SxdMeasurement_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.num_detections == rhs.num_detections &&
    lhs.channels == rhs.channels;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::SxdMeasurement_<ContainerAllocator1> & lhs, const ::mrs_msgs::SxdMeasurement_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::SxdMeasurement_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::SxdMeasurement_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::SxdMeasurement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::SxdMeasurement_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::SxdMeasurement_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::SxdMeasurement_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::SxdMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e3681e09d68c65aecf27dd6cc2533d0c";
  }

  static const char* value(const ::mrs_msgs::SxdMeasurement_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe3681e09d68c65aeULL;
  static const uint64_t static_value2 = 0xcf27dd6cc2533d0cULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::SxdMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/SxdMeasurement";
  }

  static const char* value(const ::mrs_msgs::SxdMeasurement_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::SxdMeasurement_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"uint64 num_detections\n"
"uint16[] channels\n"
;
  }

  static const char* value(const ::mrs_msgs::SxdMeasurement_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::SxdMeasurement_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.num_detections);
      stream.next(m.channels);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SxdMeasurement_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::SxdMeasurement_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::SxdMeasurement_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "num_detections: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.num_detections);
    s << indent << "channels[]" << std::endl;
    for (size_t i = 0; i < v.channels.size(); ++i)
    {
      s << indent << "  channels[" << i << "]: ";
      Printer<uint16_t>::stream(s, indent + "  ", v.channels[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_SXDMEASUREMENT_H
