// Generated by gencpp from file mrs_msgs/BumperStatus.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_BUMPERSTATUS_H
#define MRS_MSGS_MESSAGE_BUMPERSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct BumperStatus_
{
  typedef BumperStatus_<ContainerAllocator> Type;

  BumperStatus_()
    : stamp()
    , repulsing(false)
    , modifying_reference(false)  {
    }
  BumperStatus_(const ContainerAllocator& _alloc)
    : stamp()
    , repulsing(false)
    , modifying_reference(false)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint8_t _repulsing_type;
  _repulsing_type repulsing;

   typedef uint8_t _modifying_reference_type;
  _modifying_reference_type modifying_reference;





  typedef boost::shared_ptr< ::mrs_msgs::BumperStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::BumperStatus_<ContainerAllocator> const> ConstPtr;

}; // struct BumperStatus_

typedef ::mrs_msgs::BumperStatus_<std::allocator<void> > BumperStatus;

typedef boost::shared_ptr< ::mrs_msgs::BumperStatus > BumperStatusPtr;
typedef boost::shared_ptr< ::mrs_msgs::BumperStatus const> BumperStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::BumperStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::BumperStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::BumperStatus_<ContainerAllocator1> & lhs, const ::mrs_msgs::BumperStatus_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.repulsing == rhs.repulsing &&
    lhs.modifying_reference == rhs.modifying_reference;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::BumperStatus_<ContainerAllocator1> & lhs, const ::mrs_msgs::BumperStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::BumperStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::BumperStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::BumperStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::BumperStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::BumperStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::BumperStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::BumperStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "61b2690b519e811c0a533b0dc63657c3";
  }

  static const char* value(const ::mrs_msgs::BumperStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x61b2690b519e811cULL;
  static const uint64_t static_value2 = 0x0a533b0dc63657c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::BumperStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/BumperStatus";
  }

  static const char* value(const ::mrs_msgs::BumperStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::BumperStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"bool repulsing\n"
"bool modifying_reference\n"
;
  }

  static const char* value(const ::mrs_msgs::BumperStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::BumperStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.repulsing);
      stream.next(m.modifying_reference);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BumperStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::BumperStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::BumperStatus_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "repulsing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.repulsing);
    s << indent << "modifying_reference: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.modifying_reference);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_BUMPERSTATUS_H
