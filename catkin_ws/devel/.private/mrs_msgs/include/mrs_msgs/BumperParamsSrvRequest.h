// Generated by gencpp from file mrs_msgs/BumperParamsSrvRequest.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_BUMPERPARAMSSRVREQUEST_H
#define MRS_MSGS_MESSAGE_BUMPERPARAMSSRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct BumperParamsSrvRequest_
{
  typedef BumperParamsSrvRequest_<ContainerAllocator> Type;

  BumperParamsSrvRequest_()
    : horizontal_limit(0.0)
    , vertical_limit(0.0)
    , repulsion_horizontal_limit(0.0)
    , repulsion_vertical_limit(0.0)
    , repulsion_horizontal_offset(0.0)
    , repulsion_vertical_offset(0.0)  {
    }
  BumperParamsSrvRequest_(const ContainerAllocator& _alloc)
    : horizontal_limit(0.0)
    , vertical_limit(0.0)
    , repulsion_horizontal_limit(0.0)
    , repulsion_vertical_limit(0.0)
    , repulsion_horizontal_offset(0.0)
    , repulsion_vertical_offset(0.0)  {
  (void)_alloc;
    }



   typedef double _horizontal_limit_type;
  _horizontal_limit_type horizontal_limit;

   typedef double _vertical_limit_type;
  _vertical_limit_type vertical_limit;

   typedef double _repulsion_horizontal_limit_type;
  _repulsion_horizontal_limit_type repulsion_horizontal_limit;

   typedef double _repulsion_vertical_limit_type;
  _repulsion_vertical_limit_type repulsion_vertical_limit;

   typedef double _repulsion_horizontal_offset_type;
  _repulsion_horizontal_offset_type repulsion_horizontal_offset;

   typedef double _repulsion_vertical_offset_type;
  _repulsion_vertical_offset_type repulsion_vertical_offset;





  typedef boost::shared_ptr< ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct BumperParamsSrvRequest_

typedef ::mrs_msgs::BumperParamsSrvRequest_<std::allocator<void> > BumperParamsSrvRequest;

typedef boost::shared_ptr< ::mrs_msgs::BumperParamsSrvRequest > BumperParamsSrvRequestPtr;
typedef boost::shared_ptr< ::mrs_msgs::BumperParamsSrvRequest const> BumperParamsSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator1> & lhs, const ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.horizontal_limit == rhs.horizontal_limit &&
    lhs.vertical_limit == rhs.vertical_limit &&
    lhs.repulsion_horizontal_limit == rhs.repulsion_horizontal_limit &&
    lhs.repulsion_vertical_limit == rhs.repulsion_vertical_limit &&
    lhs.repulsion_horizontal_offset == rhs.repulsion_horizontal_offset &&
    lhs.repulsion_vertical_offset == rhs.repulsion_vertical_offset;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator1> & lhs, const ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "43837f92faee2831db542fb5c6f4adc6";
  }

  static const char* value(const ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x43837f92faee2831ULL;
  static const uint64_t static_value2 = 0xdb542fb5c6f4adc6ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/BumperParamsSrvRequest";
  }

  static const char* value(const ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 horizontal_limit\n"
"float64 vertical_limit\n"
"\n"
"float64 repulsion_horizontal_limit\n"
"float64 repulsion_vertical_limit\n"
"\n"
"float64 repulsion_horizontal_offset\n"
"float64 repulsion_vertical_offset\n"
"\n"
;
  }

  static const char* value(const ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.horizontal_limit);
      stream.next(m.vertical_limit);
      stream.next(m.repulsion_horizontal_limit);
      stream.next(m.repulsion_vertical_limit);
      stream.next(m.repulsion_horizontal_offset);
      stream.next(m.repulsion_vertical_offset);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BumperParamsSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::BumperParamsSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "horizontal_limit: ";
    Printer<double>::stream(s, indent + "  ", v.horizontal_limit);
    s << indent << "vertical_limit: ";
    Printer<double>::stream(s, indent + "  ", v.vertical_limit);
    s << indent << "repulsion_horizontal_limit: ";
    Printer<double>::stream(s, indent + "  ", v.repulsion_horizontal_limit);
    s << indent << "repulsion_vertical_limit: ";
    Printer<double>::stream(s, indent + "  ", v.repulsion_vertical_limit);
    s << indent << "repulsion_horizontal_offset: ";
    Printer<double>::stream(s, indent + "  ", v.repulsion_horizontal_offset);
    s << indent << "repulsion_vertical_offset: ";
    Printer<double>::stream(s, indent + "  ", v.repulsion_vertical_offset);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_BUMPERPARAMSSRVREQUEST_H
