// Generated by gencpp from file mrs_msgs/Gpvtg.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_GPVTG_H
#define MRS_MSGS_MESSAGE_GPVTG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct Gpvtg_
{
  typedef Gpvtg_<ContainerAllocator> Type;

  Gpvtg_()
    : header()
    , message_id()
    , track_true(0.0)
    , track_true_indicator()
    , track_mag(0.0)
    , track_mag_indicator()
    , speed_knots(0.0)
    , speed_knots_indicator()
    , speed_kmh(0.0)
    , speed_kmh_indicator()
    , mode_indicator()  {
    }
  Gpvtg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , message_id(_alloc)
    , track_true(0.0)
    , track_true_indicator(_alloc)
    , track_mag(0.0)
    , track_mag_indicator(_alloc)
    , speed_knots(0.0)
    , speed_knots_indicator(_alloc)
    , speed_kmh(0.0)
    , speed_kmh_indicator(_alloc)
    , mode_indicator(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_id_type;
  _message_id_type message_id;

   typedef double _track_true_type;
  _track_true_type track_true;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _track_true_indicator_type;
  _track_true_indicator_type track_true_indicator;

   typedef double _track_mag_type;
  _track_mag_type track_mag;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _track_mag_indicator_type;
  _track_mag_indicator_type track_mag_indicator;

   typedef double _speed_knots_type;
  _speed_knots_type speed_knots;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _speed_knots_indicator_type;
  _speed_knots_indicator_type speed_knots_indicator;

   typedef double _speed_kmh_type;
  _speed_kmh_type speed_kmh;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _speed_kmh_indicator_type;
  _speed_kmh_indicator_type speed_kmh_indicator;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mode_indicator_type;
  _mode_indicator_type mode_indicator;





  typedef boost::shared_ptr< ::mrs_msgs::Gpvtg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::Gpvtg_<ContainerAllocator> const> ConstPtr;

}; // struct Gpvtg_

typedef ::mrs_msgs::Gpvtg_<std::allocator<void> > Gpvtg;

typedef boost::shared_ptr< ::mrs_msgs::Gpvtg > GpvtgPtr;
typedef boost::shared_ptr< ::mrs_msgs::Gpvtg const> GpvtgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::Gpvtg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::Gpvtg_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::Gpvtg_<ContainerAllocator1> & lhs, const ::mrs_msgs::Gpvtg_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.message_id == rhs.message_id &&
    lhs.track_true == rhs.track_true &&
    lhs.track_true_indicator == rhs.track_true_indicator &&
    lhs.track_mag == rhs.track_mag &&
    lhs.track_mag_indicator == rhs.track_mag_indicator &&
    lhs.speed_knots == rhs.speed_knots &&
    lhs.speed_knots_indicator == rhs.speed_knots_indicator &&
    lhs.speed_kmh == rhs.speed_kmh &&
    lhs.speed_kmh_indicator == rhs.speed_kmh_indicator &&
    lhs.mode_indicator == rhs.mode_indicator;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::Gpvtg_<ContainerAllocator1> & lhs, const ::mrs_msgs::Gpvtg_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Gpvtg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Gpvtg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Gpvtg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Gpvtg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Gpvtg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Gpvtg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::Gpvtg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0b69a1dd6c8e499d5fb746b8067a62d9";
  }

  static const char* value(const ::mrs_msgs::Gpvtg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0b69a1dd6c8e499dULL;
  static const uint64_t static_value2 = 0x5fb746b8067a62d9ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::Gpvtg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/Gpvtg";
  }

  static const char* value(const ::mrs_msgs::Gpvtg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::Gpvtg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"string message_id\n"
"\n"
"float64 track_true\n"
"string track_true_indicator\n"
"\n"
"float64 track_mag\n"
"string track_mag_indicator\n"
"\n"
"float64 speed_knots\n"
"string speed_knots_indicator\n"
"\n"
"float64 speed_kmh\n"
"string speed_kmh_indicator\n"
"\n"
"string mode_indicator\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mrs_msgs::Gpvtg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::Gpvtg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.message_id);
      stream.next(m.track_true);
      stream.next(m.track_true_indicator);
      stream.next(m.track_mag);
      stream.next(m.track_mag_indicator);
      stream.next(m.speed_knots);
      stream.next(m.speed_knots_indicator);
      stream.next(m.speed_kmh);
      stream.next(m.speed_kmh_indicator);
      stream.next(m.mode_indicator);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gpvtg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::Gpvtg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::Gpvtg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "message_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message_id);
    s << indent << "track_true: ";
    Printer<double>::stream(s, indent + "  ", v.track_true);
    s << indent << "track_true_indicator: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.track_true_indicator);
    s << indent << "track_mag: ";
    Printer<double>::stream(s, indent + "  ", v.track_mag);
    s << indent << "track_mag_indicator: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.track_mag_indicator);
    s << indent << "speed_knots: ";
    Printer<double>::stream(s, indent + "  ", v.speed_knots);
    s << indent << "speed_knots_indicator: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.speed_knots_indicator);
    s << indent << "speed_kmh: ";
    Printer<double>::stream(s, indent + "  ", v.speed_kmh);
    s << indent << "speed_kmh_indicator: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.speed_kmh_indicator);
    s << indent << "mode_indicator: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mode_indicator);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_GPVTG_H
