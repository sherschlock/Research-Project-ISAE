// Generated by gencpp from file mrs_msgs/Range.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_RANGE_H
#define MRS_MSGS_MESSAGE_RANGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <mrs_msgs/TersusMessageHeader.h>
#include <mrs_msgs/RangeInformation.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct Range_
{
  typedef Range_<ContainerAllocator> Type;

  Range_()
    : header()
    , tersus_msg_header()
    , numb_of_observ(0)
    , info()  {
    }
  Range_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tersus_msg_header(_alloc)
    , numb_of_observ(0)
    , info(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::mrs_msgs::TersusMessageHeader_<ContainerAllocator>  _tersus_msg_header_type;
  _tersus_msg_header_type tersus_msg_header;

   typedef int32_t _numb_of_observ_type;
  _numb_of_observ_type numb_of_observ;

   typedef std::vector< ::mrs_msgs::RangeInformation_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::mrs_msgs::RangeInformation_<ContainerAllocator> >> _info_type;
  _info_type info;





  typedef boost::shared_ptr< ::mrs_msgs::Range_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::Range_<ContainerAllocator> const> ConstPtr;

}; // struct Range_

typedef ::mrs_msgs::Range_<std::allocator<void> > Range;

typedef boost::shared_ptr< ::mrs_msgs::Range > RangePtr;
typedef boost::shared_ptr< ::mrs_msgs::Range const> RangeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::Range_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::Range_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::Range_<ContainerAllocator1> & lhs, const ::mrs_msgs::Range_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.tersus_msg_header == rhs.tersus_msg_header &&
    lhs.numb_of_observ == rhs.numb_of_observ &&
    lhs.info == rhs.info;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::Range_<ContainerAllocator1> & lhs, const ::mrs_msgs::Range_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Range_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Range_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Range_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Range_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Range_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Range_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::Range_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6f8bff0e61f983e7883647ba50e7b66d";
  }

  static const char* value(const ::mrs_msgs::Range_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6f8bff0e61f983e7ULL;
  static const uint64_t static_value2 = 0x883647ba50e7b66dULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::Range_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/Range";
  }

  static const char* value(const ::mrs_msgs::Range_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::Range_<ContainerAllocator> >
{
  static const char* value()
  {
    return "#Satellite Range information from Tersus receiver\n"
"\n"
"Header header\n"
"\n"
"TersusMessageHeader tersus_msg_header\n"
"\n"
"#number of observations\n"
"int32 numb_of_observ\n"
"\n"
"#range information for the observed \n"
"RangeInformation[] info\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/TersusMessageHeader\n"
"# This is modified version from Novatel\n"
"# For original Novatel see: http://docs.ros.org/jade/api/novatel_msgs/html/msg/CommonHeader.html\n"
"# For Tersus see: https://www.tersus-gnss.com/assets/upload/file/20180608173259349.pdf\n"
"# See section 1.5 in the Tersus manual.\n"
"# --------------------------------------------------------------------------------------\n"
"\n"
"# On the wire, this header is preceeded by three sync bytes,\n"
"# which are 0xAA 0x44 0x12, and a uint8 which is the header length.\n"
"\n"
"# Measurement source, format, response bit.\n"
"string message_name\n"
"\n"
"string port_address\n"
"\n"
"uint16 sequence\n"
"\n"
"float32 idle_time\n"
"\n"
"# Table 1 in the Tersus manual.\n"
"string time_status\n"
"\n"
"uint16 gps_week\n"
"float32 gps_week_seconds\n"
"\n"
"uint32 receiver_status\n"
"uint16 software_version\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/RangeInformation\n"
"#Satellite Range information structure used in range messages\n"
"\n"
"#Satelite PRN number of range measurement\n"
"uint16 prn_number\n"
"\n"
"#GLONASS Frequency\n"
"uint16 glofreq\n"
"\n"
"#Pseudorange measurement(m)\n"
"float64 psr\n"
"\n"
"#Pseudorange measurement standard deviation(m)\n"
"float32 psr_std\n"
"\n"
"#Carrier phase, in cycles\n"
"float64 adr\n"
"\n"
"#Estimated carrier phase standard deviation(cycles)\n"
"float32 adr_std\n"
"\n"
"#Instantaneous carrier Doppler frequency(Hz)\n"
"float32 dopp\n"
"\n"
"#Carrier to noise density ratio\n"
"float32 noise_density_ratio\n"
"\n"
"## of seconds of continous tracking\n"
"float32 locktime\n"
"\n"
"#Tracking status\n"
"uint32 tracking_status\n"
;
  }

  static const char* value(const ::mrs_msgs::Range_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::Range_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tersus_msg_header);
      stream.next(m.numb_of_observ);
      stream.next(m.info);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Range_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::Range_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::Range_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tersus_msg_header: ";
    s << std::endl;
    Printer< ::mrs_msgs::TersusMessageHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.tersus_msg_header);
    s << indent << "numb_of_observ: ";
    Printer<int32_t>::stream(s, indent + "  ", v.numb_of_observ);
    s << indent << "info[]" << std::endl;
    for (size_t i = 0; i < v.info.size(); ++i)
    {
      s << indent << "  info[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::mrs_msgs::RangeInformation_<ContainerAllocator> >::stream(s, indent + "    ", v.info[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_RANGE_H
