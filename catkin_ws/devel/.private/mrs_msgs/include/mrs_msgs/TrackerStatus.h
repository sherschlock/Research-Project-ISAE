// Generated by gencpp from file mrs_msgs/TrackerStatus.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_TRACKERSTATUS_H
#define MRS_MSGS_MESSAGE_TRACKERSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mrs_msgs/ReferenceStamped.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct TrackerStatus_
{
  typedef TrackerStatus_<ContainerAllocator> Type;

  TrackerStatus_()
    : active(false)
    , callbacks_enabled(false)
    , have_goal(false)
    , tracking_trajectory(false)
    , trajectory_length(0)
    , trajectory_idx(0)
    , trajectory_reference()  {
    }
  TrackerStatus_(const ContainerAllocator& _alloc)
    : active(false)
    , callbacks_enabled(false)
    , have_goal(false)
    , tracking_trajectory(false)
    , trajectory_length(0)
    , trajectory_idx(0)
    , trajectory_reference(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _active_type;
  _active_type active;

   typedef uint8_t _callbacks_enabled_type;
  _callbacks_enabled_type callbacks_enabled;

   typedef uint8_t _have_goal_type;
  _have_goal_type have_goal;

   typedef uint8_t _tracking_trajectory_type;
  _tracking_trajectory_type tracking_trajectory;

   typedef int32_t _trajectory_length_type;
  _trajectory_length_type trajectory_length;

   typedef int32_t _trajectory_idx_type;
  _trajectory_idx_type trajectory_idx;

   typedef  ::mrs_msgs::ReferenceStamped_<ContainerAllocator>  _trajectory_reference_type;
  _trajectory_reference_type trajectory_reference;





  typedef boost::shared_ptr< ::mrs_msgs::TrackerStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::TrackerStatus_<ContainerAllocator> const> ConstPtr;

}; // struct TrackerStatus_

typedef ::mrs_msgs::TrackerStatus_<std::allocator<void> > TrackerStatus;

typedef boost::shared_ptr< ::mrs_msgs::TrackerStatus > TrackerStatusPtr;
typedef boost::shared_ptr< ::mrs_msgs::TrackerStatus const> TrackerStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::TrackerStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::TrackerStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::TrackerStatus_<ContainerAllocator1> & lhs, const ::mrs_msgs::TrackerStatus_<ContainerAllocator2> & rhs)
{
  return lhs.active == rhs.active &&
    lhs.callbacks_enabled == rhs.callbacks_enabled &&
    lhs.have_goal == rhs.have_goal &&
    lhs.tracking_trajectory == rhs.tracking_trajectory &&
    lhs.trajectory_length == rhs.trajectory_length &&
    lhs.trajectory_idx == rhs.trajectory_idx &&
    lhs.trajectory_reference == rhs.trajectory_reference;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::TrackerStatus_<ContainerAllocator1> & lhs, const ::mrs_msgs::TrackerStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::TrackerStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::TrackerStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::TrackerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::TrackerStatus_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::TrackerStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::TrackerStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::TrackerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7b7beb41d4138c0f4dea92d6c49a50c5";
  }

  static const char* value(const ::mrs_msgs::TrackerStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7b7beb41d4138c0fULL;
  static const uint64_t static_value2 = 0x4dea92d6c49a50c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::TrackerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/TrackerStatus";
  }

  static const char* value(const ::mrs_msgs::TrackerStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::TrackerStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool active\n"
"bool callbacks_enabled\n"
"\n"
"# is true whenever the tracker is doing something\n"
"# in other words, not idling\n"
"bool have_goal\n"
"\n"
"# is true only then a trajectory is being tracked\n"
"bool tracking_trajectory\n"
"\n"
"int32 trajectory_length\n"
"int32 trajectory_idx\n"
"\n"
"# only when following trajectory\n"
"# the current reference in the trajectory UNINTERPOLATED\n"
"mrs_msgs/ReferenceStamped trajectory_reference\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/ReferenceStamped\n"
"# A Positon+Heading reference with a header.\n"
"\n"
"std_msgs/Header header\n"
"mrs_msgs/Reference reference\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/Reference\n"
"# This message defines a control reference with a Position+Heading.\n"
"\n"
"geometry_msgs/Point position\n"
"\n"
"# Heading is atan2() of XY-world projection of the UAV's body X-axis.\n"
"float64 heading\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mrs_msgs::TrackerStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::TrackerStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.active);
      stream.next(m.callbacks_enabled);
      stream.next(m.have_goal);
      stream.next(m.tracking_trajectory);
      stream.next(m.trajectory_length);
      stream.next(m.trajectory_idx);
      stream.next(m.trajectory_reference);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct TrackerStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::TrackerStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::TrackerStatus_<ContainerAllocator>& v)
  {
    s << indent << "active: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.active);
    s << indent << "callbacks_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.callbacks_enabled);
    s << indent << "have_goal: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.have_goal);
    s << indent << "tracking_trajectory: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.tracking_trajectory);
    s << indent << "trajectory_length: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trajectory_length);
    s << indent << "trajectory_idx: ";
    Printer<int32_t>::stream(s, indent + "  ", v.trajectory_idx);
    s << indent << "trajectory_reference: ";
    s << std::endl;
    Printer< ::mrs_msgs::ReferenceStamped_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory_reference);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_TRACKERSTATUS_H
