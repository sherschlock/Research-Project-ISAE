// Generated by gencpp from file mrs_msgs/ObstacleSectors.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_OBSTACLESECTORS_H
#define MRS_MSGS_MESSAGE_OBSTACLESECTORS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct ObstacleSectors_
{
  typedef ObstacleSectors_<ContainerAllocator> Type;

  ObstacleSectors_()
    : header()
    , n_horizontal_sectors(0)
    , sectors_vertical_fov(0.0)
    , sectors()
    , sector_sensors()  {
    }
  ObstacleSectors_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , n_horizontal_sectors(0)
    , sectors_vertical_fov(0.0)
    , sectors(_alloc)
    , sector_sensors(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint32_t _n_horizontal_sectors_type;
  _n_horizontal_sectors_type n_horizontal_sectors;

   typedef double _sectors_vertical_fov_type;
  _sectors_vertical_fov_type sectors_vertical_fov;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _sectors_type;
  _sectors_type sectors;

   typedef std::vector<int8_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int8_t>> _sector_sensors_type;
  _sector_sensors_type sector_sensors;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(OBSTACLE_NOT_DETECTED)
  #undef OBSTACLE_NOT_DETECTED
#endif
#if defined(_WIN32) && defined(OBSTACLE_NO_DATA)
  #undef OBSTACLE_NO_DATA
#endif
#if defined(_WIN32) && defined(SENSOR_NONE)
  #undef SENSOR_NONE
#endif
#if defined(_WIN32) && defined(SENSOR_DEPTH)
  #undef SENSOR_DEPTH
#endif
#if defined(_WIN32) && defined(SENSOR_LIDAR1D)
  #undef SENSOR_LIDAR1D
#endif
#if defined(_WIN32) && defined(SENSOR_LIDAR2D)
  #undef SENSOR_LIDAR2D
#endif
#if defined(_WIN32) && defined(SENSOR_LIDAR3D)
  #undef SENSOR_LIDAR3D
#endif

  enum {
    SENSOR_NONE = -1,
    SENSOR_DEPTH = 0,
    SENSOR_LIDAR1D = 1,
    SENSOR_LIDAR2D = 2,
    SENSOR_LIDAR3D = 3,
  };

  static const double OBSTACLE_NOT_DETECTED;
  static const double OBSTACLE_NO_DATA;

  typedef boost::shared_ptr< ::mrs_msgs::ObstacleSectors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::ObstacleSectors_<ContainerAllocator> const> ConstPtr;

}; // struct ObstacleSectors_

typedef ::mrs_msgs::ObstacleSectors_<std::allocator<void> > ObstacleSectors;

typedef boost::shared_ptr< ::mrs_msgs::ObstacleSectors > ObstacleSectorsPtr;
typedef boost::shared_ptr< ::mrs_msgs::ObstacleSectors const> ObstacleSectorsConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const double
      ObstacleSectors_<ContainerAllocator>::OBSTACLE_NOT_DETECTED =
        
          -1.0
        
        ;
   

   
   template<typename ContainerAllocator> const double
      ObstacleSectors_<ContainerAllocator>::OBSTACLE_NO_DATA =
        
          -2.0
        
        ;
   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::ObstacleSectors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::ObstacleSectors_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::ObstacleSectors_<ContainerAllocator1> & lhs, const ::mrs_msgs::ObstacleSectors_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.n_horizontal_sectors == rhs.n_horizontal_sectors &&
    lhs.sectors_vertical_fov == rhs.sectors_vertical_fov &&
    lhs.sectors == rhs.sectors &&
    lhs.sector_sensors == rhs.sector_sensors;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::ObstacleSectors_<ContainerAllocator1> & lhs, const ::mrs_msgs::ObstacleSectors_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::ObstacleSectors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::ObstacleSectors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::ObstacleSectors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::ObstacleSectors_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::ObstacleSectors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::ObstacleSectors_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::ObstacleSectors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b30315b35f44636daa49d3ef18ea3c4a";
  }

  static const char* value(const ::mrs_msgs::ObstacleSectors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb30315b35f44636dULL;
  static const uint64_t static_value2 = 0xaa49d3ef18ea3c4aULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::ObstacleSectors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/ObstacleSectors";
  }

  static const char* value(const ::mrs_msgs::ObstacleSectors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::ObstacleSectors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message represents the output from the mrs_bumper package.\n"
"#\n"
"# The *sectors* variable contains information about obstacles in the horizontal,\n"
"# bottom and up sectors. Horizontal sectors take up the first part of the array.\n"
"# Bottom and up sectors are the second and first elements from the end of the array:\n"
"# sectors[0, 1, ..., n_horizontal_sectors-1] -> horizontal sectors\n"
"# sectors[n_horizontal_sectors]              -> bottom sector\n"
"# sectors[n_horizontal_sectors+1]            -> top sector\n"
"#\n"
"# The horizontal sectors are indexed counterclockwise, starting from the front facing\n"
"# sector, relative to the MAV orientation (see picture below). The last two\n"
"# elements of the *sectors* variable are the above and below sectors, respectively.\n"
"#\n"
"#         TOP VIEW\n"
"#         --------\n"
"#\n"
"#        \\         /\n"
"#         \\   0   /   (forward)\n"
"#          \\     /        x \n"
"#                         ^\n"
"#            O O          |\n"
"#        1    X    3   <--* z\n"
"#            O O       y\n"
"#                \n"
"#          /     \\\n"
"#         /   2   \\\n"
"#        /         \\\n"
"\n"
"# Time at which the data in this message was generated, coordinate frame ID.\n"
"std_msgs/Header header\n"
"\n"
"# Number of horizontal bumper sectors (total number of sectors -2).\n"
"uint32    n_horizontal_sectors\n"
"\n"
"# Vertical FOV of the individual horizontal sectors.\n"
"float64   sectors_vertical_fov\n"
"\n"
"# Distance to closest detected obstacle in each sector.\n"
"float64[] sectors\n"
"\n"
"# Sensor ID of the sensor, which was used for obstacle detection in each sector.\n"
"int8[]    sector_sensors\n"
"\n"
"## Obstacle distance special values.\n"
"float64 OBSTACLE_NOT_DETECTED=-1\n"
"float64 OBSTACLE_NO_DATA=-2\n"
"\n"
"## Sensor types enum.\n"
"int8 SENSOR_NONE=-1\n"
"int8 SENSOR_DEPTH=0\n"
"int8 SENSOR_LIDAR1D=1\n"
"int8 SENSOR_LIDAR2D=2\n"
"int8 SENSOR_LIDAR3D=3\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mrs_msgs::ObstacleSectors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::ObstacleSectors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.n_horizontal_sectors);
      stream.next(m.sectors_vertical_fov);
      stream.next(m.sectors);
      stream.next(m.sector_sensors);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ObstacleSectors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::ObstacleSectors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::ObstacleSectors_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "n_horizontal_sectors: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.n_horizontal_sectors);
    s << indent << "sectors_vertical_fov: ";
    Printer<double>::stream(s, indent + "  ", v.sectors_vertical_fov);
    s << indent << "sectors[]" << std::endl;
    for (size_t i = 0; i < v.sectors.size(); ++i)
    {
      s << indent << "  sectors[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.sectors[i]);
    }
    s << indent << "sector_sensors[]" << std::endl;
    for (size_t i = 0; i < v.sector_sensors.size(); ++i)
    {
      s << indent << "  sector_sensors[" << i << "]: ";
      Printer<int8_t>::stream(s, indent + "  ", v.sector_sensors[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_OBSTACLESECTORS_H
