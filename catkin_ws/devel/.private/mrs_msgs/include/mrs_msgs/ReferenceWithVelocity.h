// Generated by gencpp from file mrs_msgs/ReferenceWithVelocity.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_REFERENCEWITHVELOCITY_H
#define MRS_MSGS_MESSAGE_REFERENCEWITHVELOCITY_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct ReferenceWithVelocity_
{
  typedef ReferenceWithVelocity_<ContainerAllocator> Type;

  ReferenceWithVelocity_()
    : position()
    , heading(0.0)
    , enforce_velocity(false)
    , velocity()  {
    }
  ReferenceWithVelocity_(const ContainerAllocator& _alloc)
    : position(_alloc)
    , heading(0.0)
    , enforce_velocity(false)
    , velocity(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Point_<ContainerAllocator>  _position_type;
  _position_type position;

   typedef double _heading_type;
  _heading_type heading;

   typedef uint8_t _enforce_velocity_type;
  _enforce_velocity_type enforce_velocity;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;





  typedef boost::shared_ptr< ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator> const> ConstPtr;

}; // struct ReferenceWithVelocity_

typedef ::mrs_msgs::ReferenceWithVelocity_<std::allocator<void> > ReferenceWithVelocity;

typedef boost::shared_ptr< ::mrs_msgs::ReferenceWithVelocity > ReferenceWithVelocityPtr;
typedef boost::shared_ptr< ::mrs_msgs::ReferenceWithVelocity const> ReferenceWithVelocityConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator1> & lhs, const ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator2> & rhs)
{
  return lhs.position == rhs.position &&
    lhs.heading == rhs.heading &&
    lhs.enforce_velocity == rhs.enforce_velocity &&
    lhs.velocity == rhs.velocity;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator1> & lhs, const ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9fb8aa80a4919f0556c2cb3bfb9a6bab";
  }

  static const char* value(const ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9fb8aa80a4919f05ULL;
  static const uint64_t static_value2 = 0x56c2cb3bfb9a6babULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/ReferenceWithVelocity";
  }

  static const char* value(const ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This message defines a control reference with a Position+Heading.\n"
"\n"
"geometry_msgs/Point position\n"
"\n"
"# Heading is atan2() of XY-world projection of the UAV's body X-axis.\n"
"float64 heading\n"
"\n"
"bool enforce_velocity\n"
"geometry_msgs/Vector3 velocity\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position);
      stream.next(m.heading);
      stream.next(m.enforce_velocity);
      stream.next(m.velocity);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ReferenceWithVelocity_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::ReferenceWithVelocity_<ContainerAllocator>& v)
  {
    s << indent << "position: ";
    s << std::endl;
    Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "  ", v.position);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "enforce_velocity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enforce_velocity);
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_REFERENCEWITHVELOCITY_H
