// Generated by gencpp from file mrs_msgs/MpcPredictionFullState.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_MPCPREDICTIONFULLSTATE_H
#define MRS_MSGS_MESSAGE_MPCPREDICTIONFULLSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Point.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>
#include <geometry_msgs/Vector3.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct MpcPredictionFullState_
{
  typedef MpcPredictionFullState_<ContainerAllocator> Type;

  MpcPredictionFullState_()
    : header()
    , input_id(0)
    , stamps()
    , position()
    , velocity()
    , acceleration()
    , jerk()
    , heading()
    , heading_rate()
    , heading_acceleration()
    , heading_jerk()  {
    }
  MpcPredictionFullState_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , input_id(0)
    , stamps(_alloc)
    , position(_alloc)
    , velocity(_alloc)
    , acceleration(_alloc)
    , jerk(_alloc)
    , heading(_alloc)
    , heading_rate(_alloc)
    , heading_acceleration(_alloc)
    , heading_jerk(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef int64_t _input_id_type;
  _input_id_type input_id;

   typedef std::vector<ros::Time, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<ros::Time>> _stamps_type;
  _stamps_type stamps;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _position_type;
  _position_type position;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _velocity_type;
  _velocity_type velocity;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _acceleration_type;
  _acceleration_type acceleration;

   typedef std::vector< ::geometry_msgs::Vector3_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Vector3_<ContainerAllocator> >> _jerk_type;
  _jerk_type jerk;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _heading_type;
  _heading_type heading;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _heading_rate_type;
  _heading_rate_type heading_rate;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _heading_acceleration_type;
  _heading_acceleration_type heading_acceleration;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _heading_jerk_type;
  _heading_jerk_type heading_jerk;





  typedef boost::shared_ptr< ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator> const> ConstPtr;

}; // struct MpcPredictionFullState_

typedef ::mrs_msgs::MpcPredictionFullState_<std::allocator<void> > MpcPredictionFullState;

typedef boost::shared_ptr< ::mrs_msgs::MpcPredictionFullState > MpcPredictionFullStatePtr;
typedef boost::shared_ptr< ::mrs_msgs::MpcPredictionFullState const> MpcPredictionFullStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator1> & lhs, const ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.input_id == rhs.input_id &&
    lhs.stamps == rhs.stamps &&
    lhs.position == rhs.position &&
    lhs.velocity == rhs.velocity &&
    lhs.acceleration == rhs.acceleration &&
    lhs.jerk == rhs.jerk &&
    lhs.heading == rhs.heading &&
    lhs.heading_rate == rhs.heading_rate &&
    lhs.heading_acceleration == rhs.heading_acceleration &&
    lhs.heading_jerk == rhs.heading_jerk;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator1> & lhs, const ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c5995e9f2a99f717a78b7d7961123a9f";
  }

  static const char* value(const ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc5995e9f2a99f717ULL;
  static const uint64_t static_value2 = 0xa78b7d7961123a9fULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/MpcPredictionFullState";
  }

  static const char* value(const ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"\n"
"int64 input_id\n"
"\n"
"time[] stamps\n"
"\n"
"geometry_msgs/Point[] position\n"
"geometry_msgs/Vector3[] velocity\n"
"geometry_msgs/Vector3[] acceleration\n"
"geometry_msgs/Vector3[] jerk\n"
"\n"
"float64[] heading\n"
"float64[] heading_rate\n"
"float64[] heading_acceleration\n"
"float64[] heading_jerk\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.input_id);
      stream.next(m.stamps);
      stream.next(m.position);
      stream.next(m.velocity);
      stream.next(m.acceleration);
      stream.next(m.jerk);
      stream.next(m.heading);
      stream.next(m.heading_rate);
      stream.next(m.heading_acceleration);
      stream.next(m.heading_jerk);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MpcPredictionFullState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::MpcPredictionFullState_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "input_id: ";
    Printer<int64_t>::stream(s, indent + "  ", v.input_id);
    s << indent << "stamps[]" << std::endl;
    for (size_t i = 0; i < v.stamps.size(); ++i)
    {
      s << indent << "  stamps[" << i << "]: ";
      Printer<ros::Time>::stream(s, indent + "  ", v.stamps[i]);
    }
    s << indent << "position[]" << std::endl;
    for (size_t i = 0; i < v.position.size(); ++i)
    {
      s << indent << "  position[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.position[i]);
    }
    s << indent << "velocity[]" << std::endl;
    for (size_t i = 0; i < v.velocity.size(); ++i)
    {
      s << indent << "  velocity[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.velocity[i]);
    }
    s << indent << "acceleration[]" << std::endl;
    for (size_t i = 0; i < v.acceleration.size(); ++i)
    {
      s << indent << "  acceleration[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.acceleration[i]);
    }
    s << indent << "jerk[]" << std::endl;
    for (size_t i = 0; i < v.jerk.size(); ++i)
    {
      s << indent << "  jerk[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "    ", v.jerk[i]);
    }
    s << indent << "heading[]" << std::endl;
    for (size_t i = 0; i < v.heading.size(); ++i)
    {
      s << indent << "  heading[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.heading[i]);
    }
    s << indent << "heading_rate[]" << std::endl;
    for (size_t i = 0; i < v.heading_rate.size(); ++i)
    {
      s << indent << "  heading_rate[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.heading_rate[i]);
    }
    s << indent << "heading_acceleration[]" << std::endl;
    for (size_t i = 0; i < v.heading_acceleration.size(); ++i)
    {
      s << indent << "  heading_acceleration[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.heading_acceleration[i]);
    }
    s << indent << "heading_jerk[]" << std::endl;
    for (size_t i = 0; i < v.heading_jerk.size(); ++i)
    {
      s << indent << "  heading_jerk[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.heading_jerk[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_MPCPREDICTIONFULLSTATE_H
