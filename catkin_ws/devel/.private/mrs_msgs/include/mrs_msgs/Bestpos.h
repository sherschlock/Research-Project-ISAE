// Generated by gencpp from file mrs_msgs/Bestpos.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_BESTPOS_H
#define MRS_MSGS_MESSAGE_BESTPOS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <mrs_msgs/TersusMessageHeader.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct Bestpos_
{
  typedef Bestpos_<ContainerAllocator> Type;

  Bestpos_()
    : header()
    , tersus_msg_header()
    , solution_status()
    , position_type()
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , undulation(0.0)
    , datum_id()
    , latitude_std(0.0)
    , longitude_std(0.0)
    , height_std(0.0)
    , base_station_id()
    , diff_age(0.0)
    , solution_age(0.0)
    , num_satellites_tracked(0)
    , num_satellites_used_in_solution(0)
    , num_gps_and_glonass_l1_used_in_solution(0)
    , num_gps_and_glonass_l1_and_l2_used_in_solution(0)  {
    }
  Bestpos_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , tersus_msg_header(_alloc)
    , solution_status(_alloc)
    , position_type(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , height(0.0)
    , undulation(0.0)
    , datum_id(_alloc)
    , latitude_std(0.0)
    , longitude_std(0.0)
    , height_std(0.0)
    , base_station_id(_alloc)
    , diff_age(0.0)
    , solution_age(0.0)
    , num_satellites_tracked(0)
    , num_satellites_used_in_solution(0)
    , num_gps_and_glonass_l1_used_in_solution(0)
    , num_gps_and_glonass_l1_and_l2_used_in_solution(0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::mrs_msgs::TersusMessageHeader_<ContainerAllocator>  _tersus_msg_header_type;
  _tersus_msg_header_type tersus_msg_header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _solution_status_type;
  _solution_status_type solution_status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _position_type_type;
  _position_type_type position_type;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef double _height_type;
  _height_type height;

   typedef float _undulation_type;
  _undulation_type undulation;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _datum_id_type;
  _datum_id_type datum_id;

   typedef float _latitude_std_type;
  _latitude_std_type latitude_std;

   typedef float _longitude_std_type;
  _longitude_std_type longitude_std;

   typedef float _height_std_type;
  _height_std_type height_std;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _base_station_id_type;
  _base_station_id_type base_station_id;

   typedef float _diff_age_type;
  _diff_age_type diff_age;

   typedef float _solution_age_type;
  _solution_age_type solution_age;

   typedef uint8_t _num_satellites_tracked_type;
  _num_satellites_tracked_type num_satellites_tracked;

   typedef uint8_t _num_satellites_used_in_solution_type;
  _num_satellites_used_in_solution_type num_satellites_used_in_solution;

   typedef uint8_t _num_gps_and_glonass_l1_used_in_solution_type;
  _num_gps_and_glonass_l1_used_in_solution_type num_gps_and_glonass_l1_used_in_solution;

   typedef uint8_t _num_gps_and_glonass_l1_and_l2_used_in_solution_type;
  _num_gps_and_glonass_l1_and_l2_used_in_solution_type num_gps_and_glonass_l1_and_l2_used_in_solution;





  typedef boost::shared_ptr< ::mrs_msgs::Bestpos_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::Bestpos_<ContainerAllocator> const> ConstPtr;

}; // struct Bestpos_

typedef ::mrs_msgs::Bestpos_<std::allocator<void> > Bestpos;

typedef boost::shared_ptr< ::mrs_msgs::Bestpos > BestposPtr;
typedef boost::shared_ptr< ::mrs_msgs::Bestpos const> BestposConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::Bestpos_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::Bestpos_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::Bestpos_<ContainerAllocator1> & lhs, const ::mrs_msgs::Bestpos_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.tersus_msg_header == rhs.tersus_msg_header &&
    lhs.solution_status == rhs.solution_status &&
    lhs.position_type == rhs.position_type &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.height == rhs.height &&
    lhs.undulation == rhs.undulation &&
    lhs.datum_id == rhs.datum_id &&
    lhs.latitude_std == rhs.latitude_std &&
    lhs.longitude_std == rhs.longitude_std &&
    lhs.height_std == rhs.height_std &&
    lhs.base_station_id == rhs.base_station_id &&
    lhs.diff_age == rhs.diff_age &&
    lhs.solution_age == rhs.solution_age &&
    lhs.num_satellites_tracked == rhs.num_satellites_tracked &&
    lhs.num_satellites_used_in_solution == rhs.num_satellites_used_in_solution &&
    lhs.num_gps_and_glonass_l1_used_in_solution == rhs.num_gps_and_glonass_l1_used_in_solution &&
    lhs.num_gps_and_glonass_l1_and_l2_used_in_solution == rhs.num_gps_and_glonass_l1_and_l2_used_in_solution;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::Bestpos_<ContainerAllocator1> & lhs, const ::mrs_msgs::Bestpos_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Bestpos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Bestpos_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Bestpos_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Bestpos_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Bestpos_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Bestpos_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::Bestpos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "842f440d0b9e96e1173ab70db85161dd";
  }

  static const char* value(const ::mrs_msgs::Bestpos_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x842f440d0b9e96e1ULL;
  static const uint64_t static_value2 = 0x173ab70db85161ddULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::Bestpos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/Bestpos";
  }

  static const char* value(const ::mrs_msgs::Bestpos_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::Bestpos_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This is modified version from Novatel\n"
"# For original Novatel see: http://docs.ros.org/jade/api/novatel_msgs/html/msg/BESTPOS.html\n"
"# For Tersus see section 3.1.3 BESTPOS in https://www.tersus-gnss.com/assets/upload/file/20180608173259349.pdf\n"
"# --------------------------------------------------------------------------------------\n"
"\n"
"Header header\n"
"\n"
"# message 42\n"
"TersusMessageHeader tersus_msg_header\n"
"\n"
"string solution_status\n"
"string position_type\n"
"\n"
"float64 latitude  # (degrees) \n"
"float64 longitude # (degrees) \n"
"float64 height    # Height above mean sea level (meters)\n"
"\n"
"float32 undulation  # Undulation - the relationship between the geoid and the ellipsoid (m) of the chosen datum\n"
"string datum_id\n"
"\n"
"float32 latitude_std  # Latitude standard deviation (m) \n"
"float32 longitude_std # Longitude standard deviation (m) \n"
"float32 height_std    # Height standard deviation (m) \n"
"\n"
"string base_station_id   # Base station ID\n"
"\n"
"float32 diff_age      # Differential age in seconds\n"
"float32 solution_age  # Solution age in seconds\n"
"\n"
"uint8 num_satellites_tracked                          # Number of satellites tracked\n"
"uint8 num_satellites_used_in_solution                 # Number of satellites used in solution \n"
"uint8 num_gps_and_glonass_l1_used_in_solution         # Number of satellites with L1/E1/B1 signals used in solution\n"
"uint8 num_gps_and_glonass_l1_and_l2_used_in_solution  # Number of satellites with multi-frequency signals used in solution\n"
"# TODO: define the rest of the message if it is necessary\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/TersusMessageHeader\n"
"# This is modified version from Novatel\n"
"# For original Novatel see: http://docs.ros.org/jade/api/novatel_msgs/html/msg/CommonHeader.html\n"
"# For Tersus see: https://www.tersus-gnss.com/assets/upload/file/20180608173259349.pdf\n"
"# See section 1.5 in the Tersus manual.\n"
"# --------------------------------------------------------------------------------------\n"
"\n"
"# On the wire, this header is preceeded by three sync bytes,\n"
"# which are 0xAA 0x44 0x12, and a uint8 which is the header length.\n"
"\n"
"# Measurement source, format, response bit.\n"
"string message_name\n"
"\n"
"string port_address\n"
"\n"
"uint16 sequence\n"
"\n"
"float32 idle_time\n"
"\n"
"# Table 1 in the Tersus manual.\n"
"string time_status\n"
"\n"
"uint16 gps_week\n"
"float32 gps_week_seconds\n"
"\n"
"uint32 receiver_status\n"
"uint16 software_version\n"
;
  }

  static const char* value(const ::mrs_msgs::Bestpos_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::Bestpos_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.tersus_msg_header);
      stream.next(m.solution_status);
      stream.next(m.position_type);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.height);
      stream.next(m.undulation);
      stream.next(m.datum_id);
      stream.next(m.latitude_std);
      stream.next(m.longitude_std);
      stream.next(m.height_std);
      stream.next(m.base_station_id);
      stream.next(m.diff_age);
      stream.next(m.solution_age);
      stream.next(m.num_satellites_tracked);
      stream.next(m.num_satellites_used_in_solution);
      stream.next(m.num_gps_and_glonass_l1_used_in_solution);
      stream.next(m.num_gps_and_glonass_l1_and_l2_used_in_solution);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Bestpos_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::Bestpos_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::Bestpos_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "tersus_msg_header: ";
    s << std::endl;
    Printer< ::mrs_msgs::TersusMessageHeader_<ContainerAllocator> >::stream(s, indent + "  ", v.tersus_msg_header);
    s << indent << "solution_status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.solution_status);
    s << indent << "position_type: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.position_type);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "height: ";
    Printer<double>::stream(s, indent + "  ", v.height);
    s << indent << "undulation: ";
    Printer<float>::stream(s, indent + "  ", v.undulation);
    s << indent << "datum_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.datum_id);
    s << indent << "latitude_std: ";
    Printer<float>::stream(s, indent + "  ", v.latitude_std);
    s << indent << "longitude_std: ";
    Printer<float>::stream(s, indent + "  ", v.longitude_std);
    s << indent << "height_std: ";
    Printer<float>::stream(s, indent + "  ", v.height_std);
    s << indent << "base_station_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.base_station_id);
    s << indent << "diff_age: ";
    Printer<float>::stream(s, indent + "  ", v.diff_age);
    s << indent << "solution_age: ";
    Printer<float>::stream(s, indent + "  ", v.solution_age);
    s << indent << "num_satellites_tracked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_satellites_tracked);
    s << indent << "num_satellites_used_in_solution: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_satellites_used_in_solution);
    s << indent << "num_gps_and_glonass_l1_used_in_solution: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_gps_and_glonass_l1_used_in_solution);
    s << indent << "num_gps_and_glonass_l1_and_l2_used_in_solution: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_gps_and_glonass_l1_and_l2_used_in_solution);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_BESTPOS_H
