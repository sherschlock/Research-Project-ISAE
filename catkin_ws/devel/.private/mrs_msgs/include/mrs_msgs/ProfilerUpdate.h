// Generated by gencpp from file mrs_msgs/ProfilerUpdate.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_PROFILERUPDATE_H
#define MRS_MSGS_MESSAGE_PROFILERUPDATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct ProfilerUpdate_
{
  typedef ProfilerUpdate_<ContainerAllocator> Type;

  ProfilerUpdate_()
    : stamp()
    , node_name()
    , routine_name()
    , iteration(0)
    , is_periodic(false)
    , expected_rate(0.0)
    , expected_start(0.0)
    , real_start(0.0)
    , duration(0.0)
    , event()  {
    }
  ProfilerUpdate_(const ContainerAllocator& _alloc)
    : stamp()
    , node_name(_alloc)
    , routine_name(_alloc)
    , iteration(0)
    , is_periodic(false)
    , expected_rate(0.0)
    , expected_start(0.0)
    , real_start(0.0)
    , duration(0.0)
    , event(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _node_name_type;
  _node_name_type node_name;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _routine_name_type;
  _routine_name_type routine_name;

   typedef int64_t _iteration_type;
  _iteration_type iteration;

   typedef uint8_t _is_periodic_type;
  _is_periodic_type is_periodic;

   typedef double _expected_rate_type;
  _expected_rate_type expected_rate;

   typedef double _expected_start_type;
  _expected_start_type expected_start;

   typedef double _real_start_type;
  _real_start_type real_start;

   typedef double _duration_type;
  _duration_type duration;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _event_type;
  _event_type event;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(START)
  #undef START
#endif
#if defined(_WIN32) && defined(END)
  #undef END
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> START;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> END;

  typedef boost::shared_ptr< ::mrs_msgs::ProfilerUpdate_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::ProfilerUpdate_<ContainerAllocator> const> ConstPtr;

}; // struct ProfilerUpdate_

typedef ::mrs_msgs::ProfilerUpdate_<std::allocator<void> > ProfilerUpdate;

typedef boost::shared_ptr< ::mrs_msgs::ProfilerUpdate > ProfilerUpdatePtr;
typedef boost::shared_ptr< ::mrs_msgs::ProfilerUpdate const> ProfilerUpdateConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ProfilerUpdate_<ContainerAllocator>::START =
        
          "start"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      ProfilerUpdate_<ContainerAllocator>::END =
        
          "end"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::ProfilerUpdate_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::ProfilerUpdate_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::ProfilerUpdate_<ContainerAllocator1> & lhs, const ::mrs_msgs::ProfilerUpdate_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.node_name == rhs.node_name &&
    lhs.routine_name == rhs.routine_name &&
    lhs.iteration == rhs.iteration &&
    lhs.is_periodic == rhs.is_periodic &&
    lhs.expected_rate == rhs.expected_rate &&
    lhs.expected_start == rhs.expected_start &&
    lhs.real_start == rhs.real_start &&
    lhs.duration == rhs.duration &&
    lhs.event == rhs.event;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::ProfilerUpdate_<ContainerAllocator1> & lhs, const ::mrs_msgs::ProfilerUpdate_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::ProfilerUpdate_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::ProfilerUpdate_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::ProfilerUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::ProfilerUpdate_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::ProfilerUpdate_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::ProfilerUpdate_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::ProfilerUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eea4d095c0f839a7ab6eec8d18760e77";
  }

  static const char* value(const ::mrs_msgs::ProfilerUpdate_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeea4d095c0f839a7ULL;
  static const uint64_t static_value2 = 0xab6eec8d18760e77ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::ProfilerUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/ProfilerUpdate";
  }

  static const char* value(const ::mrs_msgs::ProfilerUpdate_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::ProfilerUpdate_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string START=start\n"
"string END=end\n"
"time stamp\n"
"string node_name\n"
"string routine_name\n"
"int64 iteration\n"
"bool is_periodic\n"
"float64 expected_rate\n"
"float64 expected_start\n"
"float64 real_start\n"
"float64 duration\n"
"string event\n"
;
  }

  static const char* value(const ::mrs_msgs::ProfilerUpdate_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::ProfilerUpdate_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.node_name);
      stream.next(m.routine_name);
      stream.next(m.iteration);
      stream.next(m.is_periodic);
      stream.next(m.expected_rate);
      stream.next(m.expected_start);
      stream.next(m.real_start);
      stream.next(m.duration);
      stream.next(m.event);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProfilerUpdate_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::ProfilerUpdate_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::ProfilerUpdate_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "node_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.node_name);
    s << indent << "routine_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.routine_name);
    s << indent << "iteration: ";
    Printer<int64_t>::stream(s, indent + "  ", v.iteration);
    s << indent << "is_periodic: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_periodic);
    s << indent << "expected_rate: ";
    Printer<double>::stream(s, indent + "  ", v.expected_rate);
    s << indent << "expected_start: ";
    Printer<double>::stream(s, indent + "  ", v.expected_start);
    s << indent << "real_start: ";
    Printer<double>::stream(s, indent + "  ", v.real_start);
    s << indent << "duration: ";
    Printer<double>::stream(s, indent + "  ", v.duration);
    s << indent << "event: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.event);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_PROFILERUPDATE_H
