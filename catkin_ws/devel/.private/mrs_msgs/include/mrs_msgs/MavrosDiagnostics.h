// Generated by gencpp from file mrs_msgs/MavrosDiagnostics.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_MAVROSDIAGNOSTICS_H
#define MRS_MSGS_MESSAGE_MAVROSDIAGNOSTICS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <mrs_msgs/MavrosState.h>
#include <mrs_msgs/HeartbeatDiagnostics.h>
#include <mrs_msgs/SystemDiagnostics.h>
#include <mrs_msgs/GpsDiagnostics.h>
#include <mrs_msgs/BatteryDiagnostics.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct MavrosDiagnostics_
{
  typedef MavrosDiagnostics_<ContainerAllocator> Type;

  MavrosDiagnostics_()
    : header()
    , state()
    , heartbeat()
    , system()
    , gps()
    , battery()  {
    }
  MavrosDiagnostics_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , state(_alloc)
    , heartbeat(_alloc)
    , system(_alloc)
    , gps(_alloc)
    , battery(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::mrs_msgs::MavrosState_<ContainerAllocator>  _state_type;
  _state_type state;

   typedef  ::mrs_msgs::HeartbeatDiagnostics_<ContainerAllocator>  _heartbeat_type;
  _heartbeat_type heartbeat;

   typedef  ::mrs_msgs::SystemDiagnostics_<ContainerAllocator>  _system_type;
  _system_type system;

   typedef  ::mrs_msgs::GpsDiagnostics_<ContainerAllocator>  _gps_type;
  _gps_type gps;

   typedef  ::mrs_msgs::BatteryDiagnostics_<ContainerAllocator>  _battery_type;
  _battery_type battery;





  typedef boost::shared_ptr< ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator> const> ConstPtr;

}; // struct MavrosDiagnostics_

typedef ::mrs_msgs::MavrosDiagnostics_<std::allocator<void> > MavrosDiagnostics;

typedef boost::shared_ptr< ::mrs_msgs::MavrosDiagnostics > MavrosDiagnosticsPtr;
typedef boost::shared_ptr< ::mrs_msgs::MavrosDiagnostics const> MavrosDiagnosticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator1> & lhs, const ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.state == rhs.state &&
    lhs.heartbeat == rhs.heartbeat &&
    lhs.system == rhs.system &&
    lhs.gps == rhs.gps &&
    lhs.battery == rhs.battery;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator1> & lhs, const ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b71f6da90e9d066eadc58c626133b5fe";
  }

  static const char* value(const ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb71f6da90e9d066eULL;
  static const uint64_t static_value2 = 0xadc58c626133b5feULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/MavrosDiagnostics";
  }

  static const char* value(const ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"mrs_msgs/MavrosState state\n"
"mrs_msgs/HeartbeatDiagnostics heartbeat\n"
"mrs_msgs/SystemDiagnostics system\n"
"mrs_msgs/GpsDiagnostics gps\n"
"mrs_msgs/BatteryDiagnostics battery\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/MavrosState\n"
"bool armed\n"
"bool offboard\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/HeartbeatDiagnostics\n"
"string mode\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/SystemDiagnostics\n"
"float32 cpu_load\n"
"uint32 errors_comm\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/GpsDiagnostics\n"
"uint8 satellites_visible\n"
"uint8 fix_type\n"
"float32 eph\n"
"float32 epv\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/BatteryDiagnostics\n"
"float32 voltage\n"
"float32 current\n"
;
  }

  static const char* value(const ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.state);
      stream.next(m.heartbeat);
      stream.next(m.system);
      stream.next(m.gps);
      stream.next(m.battery);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MavrosDiagnostics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::MavrosDiagnostics_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "state: ";
    s << std::endl;
    Printer< ::mrs_msgs::MavrosState_<ContainerAllocator> >::stream(s, indent + "  ", v.state);
    s << indent << "heartbeat: ";
    s << std::endl;
    Printer< ::mrs_msgs::HeartbeatDiagnostics_<ContainerAllocator> >::stream(s, indent + "  ", v.heartbeat);
    s << indent << "system: ";
    s << std::endl;
    Printer< ::mrs_msgs::SystemDiagnostics_<ContainerAllocator> >::stream(s, indent + "  ", v.system);
    s << indent << "gps: ";
    s << std::endl;
    Printer< ::mrs_msgs::GpsDiagnostics_<ContainerAllocator> >::stream(s, indent + "  ", v.gps);
    s << indent << "battery: ";
    s << std::endl;
    Printer< ::mrs_msgs::BatteryDiagnostics_<ContainerAllocator> >::stream(s, indent + "  ", v.battery);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_MAVROSDIAGNOSTICS_H
