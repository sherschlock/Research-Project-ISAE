// Generated by gencpp from file mrs_msgs/UavStatusShort.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_UAVSTATUSSHORT_H
#define MRS_MSGS_MESSAGE_UAVSTATUSSHORT_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct UavStatusShort_
{
  typedef UavStatusShort_<ContainerAllocator> Type;

  UavStatusShort_()
    : odom_hz(0.0)
    , odom_color(0)
    , odom_x(0.0)
    , odom_y(0.0)
    , odom_z(0.0)
    , odom_hdg(0.0)
    , cmd_x(0.0)
    , cmd_y(0.0)
    , cmd_z(0.0)
    , cmd_hdg(0.0)  {
    }
  UavStatusShort_(const ContainerAllocator& _alloc)
    : odom_hz(0.0)
    , odom_color(0)
    , odom_x(0.0)
    , odom_y(0.0)
    , odom_z(0.0)
    , odom_hdg(0.0)
    , cmd_x(0.0)
    , cmd_y(0.0)
    , cmd_z(0.0)
    , cmd_hdg(0.0)  {
  (void)_alloc;
    }



   typedef float _odom_hz_type;
  _odom_hz_type odom_hz;

   typedef int16_t _odom_color_type;
  _odom_color_type odom_color;

   typedef float _odom_x_type;
  _odom_x_type odom_x;

   typedef float _odom_y_type;
  _odom_y_type odom_y;

   typedef float _odom_z_type;
  _odom_z_type odom_z;

   typedef float _odom_hdg_type;
  _odom_hdg_type odom_hdg;

   typedef float _cmd_x_type;
  _cmd_x_type cmd_x;

   typedef float _cmd_y_type;
  _cmd_y_type cmd_y;

   typedef float _cmd_z_type;
  _cmd_z_type cmd_z;

   typedef float _cmd_hdg_type;
  _cmd_hdg_type cmd_hdg;





  typedef boost::shared_ptr< ::mrs_msgs::UavStatusShort_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::UavStatusShort_<ContainerAllocator> const> ConstPtr;

}; // struct UavStatusShort_

typedef ::mrs_msgs::UavStatusShort_<std::allocator<void> > UavStatusShort;

typedef boost::shared_ptr< ::mrs_msgs::UavStatusShort > UavStatusShortPtr;
typedef boost::shared_ptr< ::mrs_msgs::UavStatusShort const> UavStatusShortConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::UavStatusShort_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::UavStatusShort_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::UavStatusShort_<ContainerAllocator1> & lhs, const ::mrs_msgs::UavStatusShort_<ContainerAllocator2> & rhs)
{
  return lhs.odom_hz == rhs.odom_hz &&
    lhs.odom_color == rhs.odom_color &&
    lhs.odom_x == rhs.odom_x &&
    lhs.odom_y == rhs.odom_y &&
    lhs.odom_z == rhs.odom_z &&
    lhs.odom_hdg == rhs.odom_hdg &&
    lhs.cmd_x == rhs.cmd_x &&
    lhs.cmd_y == rhs.cmd_y &&
    lhs.cmd_z == rhs.cmd_z &&
    lhs.cmd_hdg == rhs.cmd_hdg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::UavStatusShort_<ContainerAllocator1> & lhs, const ::mrs_msgs::UavStatusShort_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::UavStatusShort_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::UavStatusShort_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::UavStatusShort_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::UavStatusShort_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::UavStatusShort_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::UavStatusShort_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::UavStatusShort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "799c7489ad9979eb43be3571ef53b456";
  }

  static const char* value(const ::mrs_msgs::UavStatusShort_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x799c7489ad9979ebULL;
  static const uint64_t static_value2 = 0x43be3571ef53b456ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::UavStatusShort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/UavStatusShort";
  }

  static const char* value(const ::mrs_msgs::UavStatusShort_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::UavStatusShort_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 odom_hz\n"
"int16 odom_color\n"
"float32 odom_x\n"
"float32 odom_y\n"
"float32 odom_z\n"
"float32 odom_hdg\n"
"\n"
"float32 cmd_x\n"
"float32 cmd_y\n"
"float32 cmd_z\n"
"float32 cmd_hdg\n"
;
  }

  static const char* value(const ::mrs_msgs::UavStatusShort_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::UavStatusShort_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.odom_hz);
      stream.next(m.odom_color);
      stream.next(m.odom_x);
      stream.next(m.odom_y);
      stream.next(m.odom_z);
      stream.next(m.odom_hdg);
      stream.next(m.cmd_x);
      stream.next(m.cmd_y);
      stream.next(m.cmd_z);
      stream.next(m.cmd_hdg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UavStatusShort_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::UavStatusShort_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::UavStatusShort_<ContainerAllocator>& v)
  {
    s << indent << "odom_hz: ";
    Printer<float>::stream(s, indent + "  ", v.odom_hz);
    s << indent << "odom_color: ";
    Printer<int16_t>::stream(s, indent + "  ", v.odom_color);
    s << indent << "odom_x: ";
    Printer<float>::stream(s, indent + "  ", v.odom_x);
    s << indent << "odom_y: ";
    Printer<float>::stream(s, indent + "  ", v.odom_y);
    s << indent << "odom_z: ";
    Printer<float>::stream(s, indent + "  ", v.odom_z);
    s << indent << "odom_hdg: ";
    Printer<float>::stream(s, indent + "  ", v.odom_hdg);
    s << indent << "cmd_x: ";
    Printer<float>::stream(s, indent + "  ", v.cmd_x);
    s << indent << "cmd_y: ";
    Printer<float>::stream(s, indent + "  ", v.cmd_y);
    s << indent << "cmd_z: ";
    Printer<float>::stream(s, indent + "  ", v.cmd_z);
    s << indent << "cmd_hdg: ";
    Printer<float>::stream(s, indent + "  ", v.cmd_hdg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_UAVSTATUSSHORT_H
