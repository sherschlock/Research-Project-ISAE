// Generated by gencpp from file mrs_msgs/Gprmc.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_GPRMC_H
#define MRS_MSGS_MESSAGE_GPRMC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <mrs_msgs/GpsStatus.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct Gprmc_
{
  typedef Gprmc_<ContainerAllocator> Type;

  Gprmc_()
    : header()
    , message_id()
    , utc_seconds(0.0)
    , position_status()
    , latitude(0.0)
    , longitude(0.0)
    , latitude_dir()
    , longitude_dir()
    , speed(0.0)
    , track(0.0)
    , date()
    , mag_var(0.0)
    , mag_var_direction()
    , mode_indicator()  {
    }
  Gprmc_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , message_id(_alloc)
    , utc_seconds(0.0)
    , position_status(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , latitude_dir(_alloc)
    , longitude_dir(_alloc)
    , speed(0.0)
    , track(0.0)
    , date(_alloc)
    , mag_var(0.0)
    , mag_var_direction(_alloc)
    , mode_indicator(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _message_id_type;
  _message_id_type message_id;

   typedef double _utc_seconds_type;
  _utc_seconds_type utc_seconds;

   typedef  ::mrs_msgs::GpsStatus_<ContainerAllocator>  _position_status_type;
  _position_status_type position_status;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef double _longitude_type;
  _longitude_type longitude;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _latitude_dir_type;
  _latitude_dir_type latitude_dir;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _longitude_dir_type;
  _longitude_dir_type longitude_dir;

   typedef float _speed_type;
  _speed_type speed;

   typedef float _track_type;
  _track_type track;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _date_type;
  _date_type date;

   typedef float _mag_var_type;
  _mag_var_type mag_var;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mag_var_direction_type;
  _mag_var_direction_type mag_var_direction;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _mode_indicator_type;
  _mode_indicator_type mode_indicator;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(MODE_INDICATIOR_AUTONOMOUS)
  #undef MODE_INDICATIOR_AUTONOMOUS
#endif
#if defined(_WIN32) && defined(MODE_INDICATIOR_DIFFERENTIAL)
  #undef MODE_INDICATIOR_DIFFERENTIAL
#endif
#if defined(_WIN32) && defined(MODE_INDICATIOR_ESTIMATED)
  #undef MODE_INDICATIOR_ESTIMATED
#endif
#if defined(_WIN32) && defined(MODE_INDICATIOR_MANUAL)
  #undef MODE_INDICATIOR_MANUAL
#endif
#if defined(_WIN32) && defined(MODE_INDICATIOR_DATA_NOT_VALID)
  #undef MODE_INDICATIOR_DATA_NOT_VALID
#endif


  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MODE_INDICATIOR_AUTONOMOUS;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MODE_INDICATIOR_DIFFERENTIAL;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MODE_INDICATIOR_ESTIMATED;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MODE_INDICATIOR_MANUAL;
  static const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> MODE_INDICATIOR_DATA_NOT_VALID;

  typedef boost::shared_ptr< ::mrs_msgs::Gprmc_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::Gprmc_<ContainerAllocator> const> ConstPtr;

}; // struct Gprmc_

typedef ::mrs_msgs::Gprmc_<std::allocator<void> > Gprmc;

typedef boost::shared_ptr< ::mrs_msgs::Gprmc > GprmcPtr;
typedef boost::shared_ptr< ::mrs_msgs::Gprmc const> GprmcConstPtr;

// constants requiring out of line definition

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Gprmc_<ContainerAllocator>::MODE_INDICATIOR_AUTONOMOUS =
        
          "A"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Gprmc_<ContainerAllocator>::MODE_INDICATIOR_DIFFERENTIAL =
        
          "D"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Gprmc_<ContainerAllocator>::MODE_INDICATIOR_ESTIMATED =
        
          "E"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Gprmc_<ContainerAllocator>::MODE_INDICATIOR_MANUAL =
        
          "M"
        
        ;
   

   
   template<typename ContainerAllocator> const std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>
      Gprmc_<ContainerAllocator>::MODE_INDICATIOR_DATA_NOT_VALID =
        
          "N"
        
        ;
   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::Gprmc_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::Gprmc_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::Gprmc_<ContainerAllocator1> & lhs, const ::mrs_msgs::Gprmc_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.message_id == rhs.message_id &&
    lhs.utc_seconds == rhs.utc_seconds &&
    lhs.position_status == rhs.position_status &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.latitude_dir == rhs.latitude_dir &&
    lhs.longitude_dir == rhs.longitude_dir &&
    lhs.speed == rhs.speed &&
    lhs.track == rhs.track &&
    lhs.date == rhs.date &&
    lhs.mag_var == rhs.mag_var &&
    lhs.mag_var_direction == rhs.mag_var_direction &&
    lhs.mode_indicator == rhs.mode_indicator;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::Gprmc_<ContainerAllocator1> & lhs, const ::mrs_msgs::Gprmc_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Gprmc_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Gprmc_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Gprmc_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Gprmc_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Gprmc_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Gprmc_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::Gprmc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "141c762d606ff599c6f6b036906b68bb";
  }

  static const char* value(const ::mrs_msgs::Gprmc_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x141c762d606ff599ULL;
  static const uint64_t static_value2 = 0xc6f6b036906b68bbULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::Gprmc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/Gprmc";
  }

  static const char* value(const ::mrs_msgs::Gprmc_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::Gprmc_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message from GPRMC NMEA String\n"
"Header header\n"
"\n"
"string message_id\n"
"\n"
"float64 utc_seconds\n"
"GpsStatus position_status\n"
"\n"
"float64 latitude\n"
"float64 longitude\n"
"\n"
"string latitude_dir\n"
"string longitude_dir\n"
"\n"
"float32 speed  # in metres per second\n"
"float32 track\n"
"string date\n"
"float32 mag_var\n"
"string mag_var_direction\n"
"\n"
"string mode_indicator\n"
"string MODE_INDICATIOR_AUTONOMOUS=A\n"
"string MODE_INDICATIOR_DIFFERENTIAL=D\n"
"string MODE_INDICATIOR_ESTIMATED=E\n"
"string MODE_INDICATIOR_MANUAL=M\n"
"string MODE_INDICATIOR_DATA_NOT_VALID=N\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/GpsStatus\n"
"uint32 quality\n"
"uint32 GPS_QUALITY_NO_FIX=0\n"
"uint32 GPS_QUALITY_SIGLE_POINT=1\n"
"uint32 GPS_QUALITY_PSEUDORANGE_DIFFERENTIAL=2\n"
"uint32 GPS_QUALITY_RTK_FIX=4\n"
"uint32 GPS_QUALITY_RTK_FLOAT=5\n"
;
  }

  static const char* value(const ::mrs_msgs::Gprmc_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::Gprmc_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.message_id);
      stream.next(m.utc_seconds);
      stream.next(m.position_status);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.latitude_dir);
      stream.next(m.longitude_dir);
      stream.next(m.speed);
      stream.next(m.track);
      stream.next(m.date);
      stream.next(m.mag_var);
      stream.next(m.mag_var_direction);
      stream.next(m.mode_indicator);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Gprmc_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::Gprmc_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::Gprmc_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "message_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.message_id);
    s << indent << "utc_seconds: ";
    Printer<double>::stream(s, indent + "  ", v.utc_seconds);
    s << indent << "position_status: ";
    s << std::endl;
    Printer< ::mrs_msgs::GpsStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.position_status);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<double>::stream(s, indent + "  ", v.longitude);
    s << indent << "latitude_dir: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.latitude_dir);
    s << indent << "longitude_dir: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.longitude_dir);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "track: ";
    Printer<float>::stream(s, indent + "  ", v.track);
    s << indent << "date: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.date);
    s << indent << "mag_var: ";
    Printer<float>::stream(s, indent + "  ", v.mag_var);
    s << indent << "mag_var_direction: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mag_var_direction);
    s << indent << "mode_indicator: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.mode_indicator);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_GPRMC_H
