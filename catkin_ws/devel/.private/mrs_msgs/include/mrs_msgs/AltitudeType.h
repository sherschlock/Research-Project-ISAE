// Generated by gencpp from file mrs_msgs/AltitudeType.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_ALTITUDETYPE_H
#define MRS_MSGS_MESSAGE_ALTITUDETYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct AltitudeType_
{
  typedef AltitudeType_<ContainerAllocator> Type;

  AltitudeType_()
    : name()
    , type(0)  {
    }
  AltitudeType_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , type(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint8_t _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(HEIGHT)
  #undef HEIGHT
#endif
#if defined(_WIN32) && defined(PLANE)
  #undef PLANE
#endif
#if defined(_WIN32) && defined(BRICK)
  #undef BRICK
#endif
#if defined(_WIN32) && defined(VIO)
  #undef VIO
#endif
#if defined(_WIN32) && defined(ALOAM)
  #undef ALOAM
#endif
#if defined(_WIN32) && defined(ALOAMGARM)
  #undef ALOAMGARM
#endif
#if defined(_WIN32) && defined(ALOAMREP)
  #undef ALOAMREP
#endif
#if defined(_WIN32) && defined(BARO)
  #undef BARO
#endif
#if defined(_WIN32) && defined(RTK)
  #undef RTK
#endif
#if defined(_WIN32) && defined(LIOSAM)
  #undef LIOSAM
#endif
#if defined(_WIN32) && defined(TYPE_COUNT)
  #undef TYPE_COUNT
#endif

  enum {
    HEIGHT = 0u,
    PLANE = 1u,
    BRICK = 2u,
    VIO = 3u,
    ALOAM = 4u,
    ALOAMGARM = 5u,
    ALOAMREP = 6u,
    BARO = 7u,
    RTK = 8u,
    LIOSAM = 9u,
    TYPE_COUNT = 10u,
  };


  typedef boost::shared_ptr< ::mrs_msgs::AltitudeType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::AltitudeType_<ContainerAllocator> const> ConstPtr;

}; // struct AltitudeType_

typedef ::mrs_msgs::AltitudeType_<std::allocator<void> > AltitudeType;

typedef boost::shared_ptr< ::mrs_msgs::AltitudeType > AltitudeTypePtr;
typedef boost::shared_ptr< ::mrs_msgs::AltitudeType const> AltitudeTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::AltitudeType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::AltitudeType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::AltitudeType_<ContainerAllocator1> & lhs, const ::mrs_msgs::AltitudeType_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::AltitudeType_<ContainerAllocator1> & lhs, const ::mrs_msgs::AltitudeType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::AltitudeType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::AltitudeType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::AltitudeType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::AltitudeType_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::AltitudeType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::AltitudeType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::AltitudeType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9adbe83b4879467630ae7301e2b791a4";
  }

  static const char* value(const ::mrs_msgs::AltitudeType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9adbe83b48794676ULL;
  static const uint64_t static_value2 = 0x30ae7301e2b791a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::AltitudeType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/AltitudeType";
  }

  static const char* value(const ::mrs_msgs::AltitudeType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::AltitudeType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 HEIGHT=0\n"
"uint8 PLANE=1\n"
"uint8 BRICK=2\n"
"uint8 VIO=3\n"
"uint8 ALOAM=4\n"
"uint8 ALOAMGARM=5\n"
"uint8 ALOAMREP=6\n"
"uint8 BARO=7\n"
"uint8 RTK=8\n"
"uint8 LIOSAM=9\n"
"\n"
"uint8 TYPE_COUNT=10\n"
"\n"
"string name\n"
"uint8 type\n"
;
  }

  static const char* value(const ::mrs_msgs::AltitudeType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::AltitudeType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AltitudeType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::AltitudeType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::AltitudeType_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_ALTITUDETYPE_H
