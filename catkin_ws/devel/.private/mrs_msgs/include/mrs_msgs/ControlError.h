// Generated by gencpp from file mrs_msgs/ControlError.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_CONTROLERROR_H
#define MRS_MSGS_MESSAGE_CONTROLERROR_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <geometry_msgs/Vector3.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct ControlError_
{
  typedef ControlError_<ContainerAllocator> Type;

  ControlError_()
    : header()
    , position_errors()
    , total_position_error(0.0)
    , yaw_error(0.0)
    , position_eland_threshold(0.0)
    , position_failsafe_threshold(0.0)  {
    }
  ControlError_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , position_errors(_alloc)
    , total_position_error(0.0)
    , yaw_error(0.0)
    , position_eland_threshold(0.0)
    , position_failsafe_threshold(0.0)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _position_errors_type;
  _position_errors_type position_errors;

   typedef double _total_position_error_type;
  _total_position_error_type total_position_error;

   typedef double _yaw_error_type;
  _yaw_error_type yaw_error;

   typedef double _position_eland_threshold_type;
  _position_eland_threshold_type position_eland_threshold;

   typedef double _position_failsafe_threshold_type;
  _position_failsafe_threshold_type position_failsafe_threshold;





  typedef boost::shared_ptr< ::mrs_msgs::ControlError_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::ControlError_<ContainerAllocator> const> ConstPtr;

}; // struct ControlError_

typedef ::mrs_msgs::ControlError_<std::allocator<void> > ControlError;

typedef boost::shared_ptr< ::mrs_msgs::ControlError > ControlErrorPtr;
typedef boost::shared_ptr< ::mrs_msgs::ControlError const> ControlErrorConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::ControlError_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::ControlError_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::ControlError_<ContainerAllocator1> & lhs, const ::mrs_msgs::ControlError_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.position_errors == rhs.position_errors &&
    lhs.total_position_error == rhs.total_position_error &&
    lhs.yaw_error == rhs.yaw_error &&
    lhs.position_eland_threshold == rhs.position_eland_threshold &&
    lhs.position_failsafe_threshold == rhs.position_failsafe_threshold;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::ControlError_<ContainerAllocator1> & lhs, const ::mrs_msgs::ControlError_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::ControlError_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::ControlError_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::ControlError_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::ControlError_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::ControlError_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::ControlError_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::ControlError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c8117673f8dcffcc00963fa1c71ee72";
  }

  static const char* value(const ::mrs_msgs::ControlError_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c8117673f8dcffcULL;
  static const uint64_t static_value2 = 0xc00963fa1c71ee72ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::ControlError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/ControlError";
  }

  static const char* value(const ::mrs_msgs::ControlError_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::ControlError_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"\n"
"geometry_msgs/Vector3 position_errors\n"
"float64 total_position_error\n"
"float64 yaw_error\n"
"\n"
"float64 position_eland_threshold\n"
"float64 position_failsafe_threshold\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mrs_msgs::ControlError_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::ControlError_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.position_errors);
      stream.next(m.total_position_error);
      stream.next(m.yaw_error);
      stream.next(m.position_eland_threshold);
      stream.next(m.position_failsafe_threshold);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ControlError_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::ControlError_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::ControlError_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "position_errors: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.position_errors);
    s << indent << "total_position_error: ";
    Printer<double>::stream(s, indent + "  ", v.total_position_error);
    s << indent << "yaw_error: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_error);
    s << indent << "position_eland_threshold: ";
    Printer<double>::stream(s, indent + "  ", v.position_eland_threshold);
    s << indent << "position_failsafe_threshold: ";
    Printer<double>::stream(s, indent + "  ", v.position_failsafe_threshold);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_CONTROLERROR_H
