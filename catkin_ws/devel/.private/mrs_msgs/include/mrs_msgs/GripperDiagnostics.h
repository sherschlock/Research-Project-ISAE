// Generated by gencpp from file mrs_msgs/GripperDiagnostics.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_GRIPPERDIAGNOSTICS_H
#define MRS_MSGS_MESSAGE_GRIPPERDIAGNOSTICS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct GripperDiagnostics_
{
  typedef GripperDiagnostics_<ContainerAllocator> Type;

  GripperDiagnostics_()
    : stamp()
    , gripper_on(false)
    , gripping_object(false)
    , has_hall(false)
    , hall1_debug(0)
    , hall2_debug(0)
    , has_ultrasonic(false)
    , ultrasonic1_debug(0)
    , ultrasonic2_debug(0)
    , has_proximity(false)
    , proximity1_debug(0)
    , proximity2_debug(0)  {
    }
  GripperDiagnostics_(const ContainerAllocator& _alloc)
    : stamp()
    , gripper_on(false)
    , gripping_object(false)
    , has_hall(false)
    , hall1_debug(0)
    , hall2_debug(0)
    , has_ultrasonic(false)
    , ultrasonic1_debug(0)
    , ultrasonic2_debug(0)
    , has_proximity(false)
    , proximity1_debug(0)
    , proximity2_debug(0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint8_t _gripper_on_type;
  _gripper_on_type gripper_on;

   typedef uint8_t _gripping_object_type;
  _gripping_object_type gripping_object;

   typedef uint8_t _has_hall_type;
  _has_hall_type has_hall;

   typedef int32_t _hall1_debug_type;
  _hall1_debug_type hall1_debug;

   typedef int32_t _hall2_debug_type;
  _hall2_debug_type hall2_debug;

   typedef uint8_t _has_ultrasonic_type;
  _has_ultrasonic_type has_ultrasonic;

   typedef int32_t _ultrasonic1_debug_type;
  _ultrasonic1_debug_type ultrasonic1_debug;

   typedef int32_t _ultrasonic2_debug_type;
  _ultrasonic2_debug_type ultrasonic2_debug;

   typedef uint8_t _has_proximity_type;
  _has_proximity_type has_proximity;

   typedef int32_t _proximity1_debug_type;
  _proximity1_debug_type proximity1_debug;

   typedef int32_t _proximity2_debug_type;
  _proximity2_debug_type proximity2_debug;





  typedef boost::shared_ptr< ::mrs_msgs::GripperDiagnostics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::GripperDiagnostics_<ContainerAllocator> const> ConstPtr;

}; // struct GripperDiagnostics_

typedef ::mrs_msgs::GripperDiagnostics_<std::allocator<void> > GripperDiagnostics;

typedef boost::shared_ptr< ::mrs_msgs::GripperDiagnostics > GripperDiagnosticsPtr;
typedef boost::shared_ptr< ::mrs_msgs::GripperDiagnostics const> GripperDiagnosticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::GripperDiagnostics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::GripperDiagnostics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::GripperDiagnostics_<ContainerAllocator1> & lhs, const ::mrs_msgs::GripperDiagnostics_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.gripper_on == rhs.gripper_on &&
    lhs.gripping_object == rhs.gripping_object &&
    lhs.has_hall == rhs.has_hall &&
    lhs.hall1_debug == rhs.hall1_debug &&
    lhs.hall2_debug == rhs.hall2_debug &&
    lhs.has_ultrasonic == rhs.has_ultrasonic &&
    lhs.ultrasonic1_debug == rhs.ultrasonic1_debug &&
    lhs.ultrasonic2_debug == rhs.ultrasonic2_debug &&
    lhs.has_proximity == rhs.has_proximity &&
    lhs.proximity1_debug == rhs.proximity1_debug &&
    lhs.proximity2_debug == rhs.proximity2_debug;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::GripperDiagnostics_<ContainerAllocator1> & lhs, const ::mrs_msgs::GripperDiagnostics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::GripperDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::GripperDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::GripperDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::GripperDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::GripperDiagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::GripperDiagnostics_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::GripperDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5887bc2d50f46b0d8949991277fb8b45";
  }

  static const char* value(const ::mrs_msgs::GripperDiagnostics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5887bc2d50f46b0dULL;
  static const uint64_t static_value2 = 0x8949991277fb8b45ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::GripperDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/GripperDiagnostics";
  }

  static const char* value(const ::mrs_msgs::GripperDiagnostics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::GripperDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"\n"
"bool gripper_on\n"
"bool gripping_object\n"
"\n"
"bool has_hall\n"
"int32 hall1_debug\n"
"int32 hall2_debug\n"
"\n"
"bool has_ultrasonic\n"
"int32 ultrasonic1_debug\n"
"int32 ultrasonic2_debug\n"
"\n"
"bool has_proximity\n"
"int32 proximity1_debug\n"
"int32 proximity2_debug\n"
;
  }

  static const char* value(const ::mrs_msgs::GripperDiagnostics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::GripperDiagnostics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.gripper_on);
      stream.next(m.gripping_object);
      stream.next(m.has_hall);
      stream.next(m.hall1_debug);
      stream.next(m.hall2_debug);
      stream.next(m.has_ultrasonic);
      stream.next(m.ultrasonic1_debug);
      stream.next(m.ultrasonic2_debug);
      stream.next(m.has_proximity);
      stream.next(m.proximity1_debug);
      stream.next(m.proximity2_debug);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GripperDiagnostics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::GripperDiagnostics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::GripperDiagnostics_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "gripper_on: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gripper_on);
    s << indent << "gripping_object: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.gripping_object);
    s << indent << "has_hall: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_hall);
    s << indent << "hall1_debug: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hall1_debug);
    s << indent << "hall2_debug: ";
    Printer<int32_t>::stream(s, indent + "  ", v.hall2_debug);
    s << indent << "has_ultrasonic: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_ultrasonic);
    s << indent << "ultrasonic1_debug: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ultrasonic1_debug);
    s << indent << "ultrasonic2_debug: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ultrasonic2_debug);
    s << indent << "has_proximity: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.has_proximity);
    s << indent << "proximity1_debug: ";
    Printer<int32_t>::stream(s, indent + "  ", v.proximity1_debug);
    s << indent << "proximity2_debug: ";
    Printer<int32_t>::stream(s, indent + "  ", v.proximity2_debug);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_GRIPPERDIAGNOSTICS_H
