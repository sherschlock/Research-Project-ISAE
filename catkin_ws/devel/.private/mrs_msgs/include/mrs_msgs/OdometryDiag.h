// Generated by gencpp from file mrs_msgs/OdometryDiag.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_ODOMETRYDIAG_H
#define MRS_MSGS_MESSAGE_ODOMETRYDIAG_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <mrs_msgs/EstimatorType.h>
#include <mrs_msgs/HeadingType.h>
#include <mrs_msgs/AltitudeType.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct OdometryDiag_
{
  typedef OdometryDiag_<ContainerAllocator> Type;

  OdometryDiag_()
    : header()
    , max_altitude(0.0)
    , estimator_type()
    , heading_type()
    , altitude_type()
    , available_lat_estimators()
    , available_hdg_estimators()
    , available_alt_estimators()  {
    }
  OdometryDiag_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , max_altitude(0.0)
    , estimator_type(_alloc)
    , heading_type(_alloc)
    , altitude_type(_alloc)
    , available_lat_estimators(_alloc)
    , available_hdg_estimators(_alloc)
    , available_alt_estimators(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _max_altitude_type;
  _max_altitude_type max_altitude;

   typedef  ::mrs_msgs::EstimatorType_<ContainerAllocator>  _estimator_type_type;
  _estimator_type_type estimator_type;

   typedef  ::mrs_msgs::HeadingType_<ContainerAllocator>  _heading_type_type;
  _heading_type_type heading_type;

   typedef  ::mrs_msgs::AltitudeType_<ContainerAllocator>  _altitude_type_type;
  _altitude_type_type altitude_type;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _available_lat_estimators_type;
  _available_lat_estimators_type available_lat_estimators;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _available_hdg_estimators_type;
  _available_hdg_estimators_type available_hdg_estimators;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _available_alt_estimators_type;
  _available_alt_estimators_type available_alt_estimators;





  typedef boost::shared_ptr< ::mrs_msgs::OdometryDiag_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::OdometryDiag_<ContainerAllocator> const> ConstPtr;

}; // struct OdometryDiag_

typedef ::mrs_msgs::OdometryDiag_<std::allocator<void> > OdometryDiag;

typedef boost::shared_ptr< ::mrs_msgs::OdometryDiag > OdometryDiagPtr;
typedef boost::shared_ptr< ::mrs_msgs::OdometryDiag const> OdometryDiagConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::OdometryDiag_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::OdometryDiag_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::OdometryDiag_<ContainerAllocator1> & lhs, const ::mrs_msgs::OdometryDiag_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.max_altitude == rhs.max_altitude &&
    lhs.estimator_type == rhs.estimator_type &&
    lhs.heading_type == rhs.heading_type &&
    lhs.altitude_type == rhs.altitude_type &&
    lhs.available_lat_estimators == rhs.available_lat_estimators &&
    lhs.available_hdg_estimators == rhs.available_hdg_estimators &&
    lhs.available_alt_estimators == rhs.available_alt_estimators;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::OdometryDiag_<ContainerAllocator1> & lhs, const ::mrs_msgs::OdometryDiag_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::OdometryDiag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::OdometryDiag_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::OdometryDiag_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::OdometryDiag_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::OdometryDiag_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::OdometryDiag_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::OdometryDiag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b3eedf113f8464b7a0aafebba055d3cd";
  }

  static const char* value(const ::mrs_msgs::OdometryDiag_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb3eedf113f8464b7ULL;
  static const uint64_t static_value2 = 0xa0aafebba055d3cdULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::OdometryDiag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/OdometryDiag";
  }

  static const char* value(const ::mrs_msgs::OdometryDiag_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::OdometryDiag_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"float64 max_altitude\n"
"mrs_msgs/EstimatorType estimator_type\n"
"mrs_msgs/HeadingType heading_type\n"
"mrs_msgs/AltitudeType altitude_type\n"
"string[] available_lat_estimators\n"
"string[] available_hdg_estimators\n"
"string[] available_alt_estimators\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/EstimatorType\n"
"uint8 OPTFLOW=0\n"
"uint8 GPS=1\n"
"uint8 OPTFLOWGPS=2\n"
"uint8 RTK=3\n"
"uint8 VIO=4\n"
"uint8 BRICK=5\n"
"uint8 T265=6\n"
"uint8 HECTOR=7\n"
"uint8 BRICKFLOW=8\n"
"uint8 VSLAM=9\n"
"uint8 ICP=10\n"
"uint8 ALOAM=11\n"
"uint8 ALOAMGARM=12\n"
"uint8 ALOAMREP=13\n"
"uint8 LIOSAM=14\n"
"uint8 UWB=15\n"
"\n"
"uint8 TYPE_COUNT=16\n"
"\n"
"string name\n"
"uint8 type\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/HeadingType\n"
"uint8 PIXHAWK=0\n"
"uint8 GYRO=1\n"
"uint8 COMPASS=2\n"
"uint8 OPTFLOW=3\n"
"uint8 HECTOR=4\n"
"uint8 BRICK=5\n"
"uint8 VIO=6\n"
"uint8 VSLAM=7\n"
"uint8 ICP=8\n"
"uint8 BRICKFLOW=9\n"
"uint8 ALOAM=10\n"
"uint8 ALOAMREP=11\n"
"uint8 LIOSAM=12\n"
"\n"
"uint8 TYPE_COUNT=13\n"
"\n"
"string name\n"
"uint8 type\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/AltitudeType\n"
"uint8 HEIGHT=0\n"
"uint8 PLANE=1\n"
"uint8 BRICK=2\n"
"uint8 VIO=3\n"
"uint8 ALOAM=4\n"
"uint8 ALOAMGARM=5\n"
"uint8 ALOAMREP=6\n"
"uint8 BARO=7\n"
"uint8 RTK=8\n"
"uint8 LIOSAM=9\n"
"\n"
"uint8 TYPE_COUNT=10\n"
"\n"
"string name\n"
"uint8 type\n"
;
  }

  static const char* value(const ::mrs_msgs::OdometryDiag_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::OdometryDiag_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.max_altitude);
      stream.next(m.estimator_type);
      stream.next(m.heading_type);
      stream.next(m.altitude_type);
      stream.next(m.available_lat_estimators);
      stream.next(m.available_hdg_estimators);
      stream.next(m.available_alt_estimators);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OdometryDiag_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::OdometryDiag_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::OdometryDiag_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "max_altitude: ";
    Printer<double>::stream(s, indent + "  ", v.max_altitude);
    s << indent << "estimator_type: ";
    s << std::endl;
    Printer< ::mrs_msgs::EstimatorType_<ContainerAllocator> >::stream(s, indent + "  ", v.estimator_type);
    s << indent << "heading_type: ";
    s << std::endl;
    Printer< ::mrs_msgs::HeadingType_<ContainerAllocator> >::stream(s, indent + "  ", v.heading_type);
    s << indent << "altitude_type: ";
    s << std::endl;
    Printer< ::mrs_msgs::AltitudeType_<ContainerAllocator> >::stream(s, indent + "  ", v.altitude_type);
    s << indent << "available_lat_estimators[]" << std::endl;
    for (size_t i = 0; i < v.available_lat_estimators.size(); ++i)
    {
      s << indent << "  available_lat_estimators[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.available_lat_estimators[i]);
    }
    s << indent << "available_hdg_estimators[]" << std::endl;
    for (size_t i = 0; i < v.available_hdg_estimators.size(); ++i)
    {
      s << indent << "  available_hdg_estimators[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.available_hdg_estimators[i]);
    }
    s << indent << "available_alt_estimators[]" << std::endl;
    for (size_t i = 0; i < v.available_alt_estimators.size(); ++i)
    {
      s << indent << "  available_alt_estimators[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.available_alt_estimators[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_ODOMETRYDIAG_H
