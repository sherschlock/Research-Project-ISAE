// Generated by gencpp from file mrs_msgs/MavrosState.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_MAVROSSTATE_H
#define MRS_MSGS_MESSAGE_MAVROSSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct MavrosState_
{
  typedef MavrosState_<ContainerAllocator> Type;

  MavrosState_()
    : armed(false)
    , offboard(false)  {
    }
  MavrosState_(const ContainerAllocator& _alloc)
    : armed(false)
    , offboard(false)  {
  (void)_alloc;
    }



   typedef uint8_t _armed_type;
  _armed_type armed;

   typedef uint8_t _offboard_type;
  _offboard_type offboard;





  typedef boost::shared_ptr< ::mrs_msgs::MavrosState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::MavrosState_<ContainerAllocator> const> ConstPtr;

}; // struct MavrosState_

typedef ::mrs_msgs::MavrosState_<std::allocator<void> > MavrosState;

typedef boost::shared_ptr< ::mrs_msgs::MavrosState > MavrosStatePtr;
typedef boost::shared_ptr< ::mrs_msgs::MavrosState const> MavrosStateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::MavrosState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::MavrosState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::MavrosState_<ContainerAllocator1> & lhs, const ::mrs_msgs::MavrosState_<ContainerAllocator2> & rhs)
{
  return lhs.armed == rhs.armed &&
    lhs.offboard == rhs.offboard;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::MavrosState_<ContainerAllocator1> & lhs, const ::mrs_msgs::MavrosState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::MavrosState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::MavrosState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::MavrosState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::MavrosState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::MavrosState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::MavrosState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::MavrosState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "16648b716cc061680e9afcd8a78601a4";
  }

  static const char* value(const ::mrs_msgs::MavrosState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x16648b716cc06168ULL;
  static const uint64_t static_value2 = 0x0e9afcd8a78601a4ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::MavrosState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/MavrosState";
  }

  static const char* value(const ::mrs_msgs::MavrosState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::MavrosState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool armed\n"
"bool offboard\n"
;
  }

  static const char* value(const ::mrs_msgs::MavrosState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::MavrosState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.armed);
      stream.next(m.offboard);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MavrosState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::MavrosState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::MavrosState_<ContainerAllocator>& v)
  {
    s << indent << "armed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armed);
    s << indent << "offboard: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.offboard);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_MAVROSSTATE_H
