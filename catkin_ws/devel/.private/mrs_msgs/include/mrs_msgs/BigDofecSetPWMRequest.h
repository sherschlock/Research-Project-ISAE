// Generated by gencpp from file mrs_msgs/BigDofecSetPWMRequest.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_BIGDOFECSETPWMREQUEST_H
#define MRS_MSGS_MESSAGE_BIGDOFECSETPWMREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct BigDofecSetPWMRequest_
{
  typedef BigDofecSetPWMRequest_<ContainerAllocator> Type;

  BigDofecSetPWMRequest_()
    : enable(false)
    , pwm_1(0)
    , pwm_2(0)
    , pwm_3(0)
    , pwm_4(0)
    , pwm_5(0)
    , pwm_6(0)  {
    }
  BigDofecSetPWMRequest_(const ContainerAllocator& _alloc)
    : enable(false)
    , pwm_1(0)
    , pwm_2(0)
    , pwm_3(0)
    , pwm_4(0)
    , pwm_5(0)
    , pwm_6(0)  {
  (void)_alloc;
    }



   typedef uint8_t _enable_type;
  _enable_type enable;

   typedef uint16_t _pwm_1_type;
  _pwm_1_type pwm_1;

   typedef uint16_t _pwm_2_type;
  _pwm_2_type pwm_2;

   typedef uint16_t _pwm_3_type;
  _pwm_3_type pwm_3;

   typedef uint16_t _pwm_4_type;
  _pwm_4_type pwm_4;

   typedef uint16_t _pwm_5_type;
  _pwm_5_type pwm_5;

   typedef uint16_t _pwm_6_type;
  _pwm_6_type pwm_6;





  typedef boost::shared_ptr< ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator> const> ConstPtr;

}; // struct BigDofecSetPWMRequest_

typedef ::mrs_msgs::BigDofecSetPWMRequest_<std::allocator<void> > BigDofecSetPWMRequest;

typedef boost::shared_ptr< ::mrs_msgs::BigDofecSetPWMRequest > BigDofecSetPWMRequestPtr;
typedef boost::shared_ptr< ::mrs_msgs::BigDofecSetPWMRequest const> BigDofecSetPWMRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator1> & lhs, const ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator2> & rhs)
{
  return lhs.enable == rhs.enable &&
    lhs.pwm_1 == rhs.pwm_1 &&
    lhs.pwm_2 == rhs.pwm_2 &&
    lhs.pwm_3 == rhs.pwm_3 &&
    lhs.pwm_4 == rhs.pwm_4 &&
    lhs.pwm_5 == rhs.pwm_5 &&
    lhs.pwm_6 == rhs.pwm_6;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator1> & lhs, const ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7f21fd5364519c1893658b1d79bd48ba";
  }

  static const char* value(const ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7f21fd5364519c18ULL;
  static const uint64_t static_value2 = 0x93658b1d79bd48baULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/BigDofecSetPWMRequest";
  }

  static const char* value(const ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool enable\n"
"uint16 pwm_1\n"
"uint16 pwm_2\n"
"uint16 pwm_3\n"
"uint16 pwm_4\n"
"uint16 pwm_5\n"
"uint16 pwm_6\n"
;
  }

  static const char* value(const ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.enable);
      stream.next(m.pwm_1);
      stream.next(m.pwm_2);
      stream.next(m.pwm_3);
      stream.next(m.pwm_4);
      stream.next(m.pwm_5);
      stream.next(m.pwm_6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BigDofecSetPWMRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::BigDofecSetPWMRequest_<ContainerAllocator>& v)
  {
    s << indent << "enable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable);
    s << indent << "pwm_1: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_1);
    s << indent << "pwm_2: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_2);
    s << indent << "pwm_3: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_3);
    s << indent << "pwm_4: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_4);
    s << indent << "pwm_5: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_5);
    s << indent << "pwm_6: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm_6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_BIGDOFECSETPWMREQUEST_H
