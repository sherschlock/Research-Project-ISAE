// Generated by gencpp from file mrs_msgs/BigDofecStatus.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_BIGDOFECSTATUS_H
#define MRS_MSGS_MESSAGE_BIGDOFECSTATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct BigDofecStatus_
{
  typedef BigDofecStatus_<ContainerAllocator> Type;

  BigDofecStatus_()
    : stamp()
    , mes_vbat(0.0)
    , mes_24v(0.0)
    , mes_varm(0.0)
    , mes_19v(0.0)
    , mes_5v(0.0)
    , pwm_enabled(false)
    , pwm1_val(0)
    , pwm2_val(0)
    , pwm3_val(0)
    , pwm4_val(0)
    , pwm5_val(0)
    , pwm6_val(0)
    , solenoids_armed(false)
    , launched_ch1(false)
    , launched_ch2(false)
    , launched_ch3(false)
    , launched_ch4(false)
    , launched_ch5(false)
    , launched_ch6(false)  {
    }
  BigDofecStatus_(const ContainerAllocator& _alloc)
    : stamp()
    , mes_vbat(0.0)
    , mes_24v(0.0)
    , mes_varm(0.0)
    , mes_19v(0.0)
    , mes_5v(0.0)
    , pwm_enabled(false)
    , pwm1_val(0)
    , pwm2_val(0)
    , pwm3_val(0)
    , pwm4_val(0)
    , pwm5_val(0)
    , pwm6_val(0)
    , solenoids_armed(false)
    , launched_ch1(false)
    , launched_ch2(false)
    , launched_ch3(false)
    , launched_ch4(false)
    , launched_ch5(false)
    , launched_ch6(false)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef float _mes_vbat_type;
  _mes_vbat_type mes_vbat;

   typedef float _mes_24v_type;
  _mes_24v_type mes_24v;

   typedef float _mes_varm_type;
  _mes_varm_type mes_varm;

   typedef float _mes_19v_type;
  _mes_19v_type mes_19v;

   typedef float _mes_5v_type;
  _mes_5v_type mes_5v;

   typedef uint8_t _pwm_enabled_type;
  _pwm_enabled_type pwm_enabled;

   typedef uint16_t _pwm1_val_type;
  _pwm1_val_type pwm1_val;

   typedef uint16_t _pwm2_val_type;
  _pwm2_val_type pwm2_val;

   typedef uint16_t _pwm3_val_type;
  _pwm3_val_type pwm3_val;

   typedef uint16_t _pwm4_val_type;
  _pwm4_val_type pwm4_val;

   typedef uint16_t _pwm5_val_type;
  _pwm5_val_type pwm5_val;

   typedef uint16_t _pwm6_val_type;
  _pwm6_val_type pwm6_val;

   typedef uint8_t _solenoids_armed_type;
  _solenoids_armed_type solenoids_armed;

   typedef uint8_t _launched_ch1_type;
  _launched_ch1_type launched_ch1;

   typedef uint8_t _launched_ch2_type;
  _launched_ch2_type launched_ch2;

   typedef uint8_t _launched_ch3_type;
  _launched_ch3_type launched_ch3;

   typedef uint8_t _launched_ch4_type;
  _launched_ch4_type launched_ch4;

   typedef uint8_t _launched_ch5_type;
  _launched_ch5_type launched_ch5;

   typedef uint8_t _launched_ch6_type;
  _launched_ch6_type launched_ch6;





  typedef boost::shared_ptr< ::mrs_msgs::BigDofecStatus_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::BigDofecStatus_<ContainerAllocator> const> ConstPtr;

}; // struct BigDofecStatus_

typedef ::mrs_msgs::BigDofecStatus_<std::allocator<void> > BigDofecStatus;

typedef boost::shared_ptr< ::mrs_msgs::BigDofecStatus > BigDofecStatusPtr;
typedef boost::shared_ptr< ::mrs_msgs::BigDofecStatus const> BigDofecStatusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::BigDofecStatus_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::BigDofecStatus_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::BigDofecStatus_<ContainerAllocator1> & lhs, const ::mrs_msgs::BigDofecStatus_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.mes_vbat == rhs.mes_vbat &&
    lhs.mes_24v == rhs.mes_24v &&
    lhs.mes_varm == rhs.mes_varm &&
    lhs.mes_19v == rhs.mes_19v &&
    lhs.mes_5v == rhs.mes_5v &&
    lhs.pwm_enabled == rhs.pwm_enabled &&
    lhs.pwm1_val == rhs.pwm1_val &&
    lhs.pwm2_val == rhs.pwm2_val &&
    lhs.pwm3_val == rhs.pwm3_val &&
    lhs.pwm4_val == rhs.pwm4_val &&
    lhs.pwm5_val == rhs.pwm5_val &&
    lhs.pwm6_val == rhs.pwm6_val &&
    lhs.solenoids_armed == rhs.solenoids_armed &&
    lhs.launched_ch1 == rhs.launched_ch1 &&
    lhs.launched_ch2 == rhs.launched_ch2 &&
    lhs.launched_ch3 == rhs.launched_ch3 &&
    lhs.launched_ch4 == rhs.launched_ch4 &&
    lhs.launched_ch5 == rhs.launched_ch5 &&
    lhs.launched_ch6 == rhs.launched_ch6;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::BigDofecStatus_<ContainerAllocator1> & lhs, const ::mrs_msgs::BigDofecStatus_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::BigDofecStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::BigDofecStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::BigDofecStatus_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::BigDofecStatus_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::BigDofecStatus_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::BigDofecStatus_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::BigDofecStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2a01dab5c749eae33ffb0f9ef6c3cb54";
  }

  static const char* value(const ::mrs_msgs::BigDofecStatus_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2a01dab5c749eae3ULL;
  static const uint64_t static_value2 = 0x3ffb0f9ef6c3cb54ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::BigDofecStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/BigDofecStatus";
  }

  static const char* value(const ::mrs_msgs::BigDofecStatus_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::BigDofecStatus_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"\n"
"float32 mes_vbat\n"
"float32 mes_24v\n"
"float32 mes_varm\n"
"float32 mes_19v\n"
"float32 mes_5v\n"
"\n"
"bool pwm_enabled\n"
"uint16 pwm1_val\n"
"uint16 pwm2_val\n"
"uint16 pwm3_val\n"
"uint16 pwm4_val\n"
"uint16 pwm5_val\n"
"uint16 pwm6_val\n"
"\n"
"bool solenoids_armed\n"
"bool launched_ch1\n"
"bool launched_ch2\n"
"bool launched_ch3\n"
"bool launched_ch4\n"
"bool launched_ch5\n"
"bool launched_ch6\n"
;
  }

  static const char* value(const ::mrs_msgs::BigDofecStatus_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::BigDofecStatus_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.mes_vbat);
      stream.next(m.mes_24v);
      stream.next(m.mes_varm);
      stream.next(m.mes_19v);
      stream.next(m.mes_5v);
      stream.next(m.pwm_enabled);
      stream.next(m.pwm1_val);
      stream.next(m.pwm2_val);
      stream.next(m.pwm3_val);
      stream.next(m.pwm4_val);
      stream.next(m.pwm5_val);
      stream.next(m.pwm6_val);
      stream.next(m.solenoids_armed);
      stream.next(m.launched_ch1);
      stream.next(m.launched_ch2);
      stream.next(m.launched_ch3);
      stream.next(m.launched_ch4);
      stream.next(m.launched_ch5);
      stream.next(m.launched_ch6);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BigDofecStatus_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::BigDofecStatus_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::BigDofecStatus_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "mes_vbat: ";
    Printer<float>::stream(s, indent + "  ", v.mes_vbat);
    s << indent << "mes_24v: ";
    Printer<float>::stream(s, indent + "  ", v.mes_24v);
    s << indent << "mes_varm: ";
    Printer<float>::stream(s, indent + "  ", v.mes_varm);
    s << indent << "mes_19v: ";
    Printer<float>::stream(s, indent + "  ", v.mes_19v);
    s << indent << "mes_5v: ";
    Printer<float>::stream(s, indent + "  ", v.mes_5v);
    s << indent << "pwm_enabled: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pwm_enabled);
    s << indent << "pwm1_val: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm1_val);
    s << indent << "pwm2_val: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm2_val);
    s << indent << "pwm3_val: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm3_val);
    s << indent << "pwm4_val: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm4_val);
    s << indent << "pwm5_val: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm5_val);
    s << indent << "pwm6_val: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.pwm6_val);
    s << indent << "solenoids_armed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.solenoids_armed);
    s << indent << "launched_ch1: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.launched_ch1);
    s << indent << "launched_ch2: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.launched_ch2);
    s << indent << "launched_ch3: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.launched_ch3);
    s << indent << "launched_ch4: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.launched_ch4);
    s << indent << "launched_ch5: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.launched_ch5);
    s << indent << "launched_ch6: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.launched_ch6);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_BIGDOFECSTATUS_H
