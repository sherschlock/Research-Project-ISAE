// Generated by gencpp from file mrs_msgs/LkfStates.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_LKFSTATES_H
#define MRS_MSGS_MESSAGE_LKFSTATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct LkfStates_
{
  typedef LkfStates_<ContainerAllocator> Type;

  LkfStates_()
    : header()
    , pos(0.0)
    , vel(0.0)
    , acc(0.0)
    , acc_i(0.0)
    , acc_d(0.0)
    , tilt(0.0)
    , covariance()
    , eigenvalues()  {
      covariance.assign(0.0);

      eigenvalues.assign(0.0);
  }
  LkfStates_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , pos(0.0)
    , vel(0.0)
    , acc(0.0)
    , acc_i(0.0)
    , acc_d(0.0)
    , tilt(0.0)
    , covariance()
    , eigenvalues()  {
  (void)_alloc;
      covariance.assign(0.0);

      eigenvalues.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef double _pos_type;
  _pos_type pos;

   typedef double _vel_type;
  _vel_type vel;

   typedef double _acc_type;
  _acc_type acc;

   typedef double _acc_i_type;
  _acc_i_type acc_i;

   typedef double _acc_d_type;
  _acc_d_type acc_d;

   typedef double _tilt_type;
  _tilt_type tilt;

   typedef boost::array<double, 6>  _covariance_type;
  _covariance_type covariance;

   typedef boost::array<double, 6>  _eigenvalues_type;
  _eigenvalues_type eigenvalues;





  typedef boost::shared_ptr< ::mrs_msgs::LkfStates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::LkfStates_<ContainerAllocator> const> ConstPtr;

}; // struct LkfStates_

typedef ::mrs_msgs::LkfStates_<std::allocator<void> > LkfStates;

typedef boost::shared_ptr< ::mrs_msgs::LkfStates > LkfStatesPtr;
typedef boost::shared_ptr< ::mrs_msgs::LkfStates const> LkfStatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::LkfStates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::LkfStates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::LkfStates_<ContainerAllocator1> & lhs, const ::mrs_msgs::LkfStates_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.pos == rhs.pos &&
    lhs.vel == rhs.vel &&
    lhs.acc == rhs.acc &&
    lhs.acc_i == rhs.acc_i &&
    lhs.acc_d == rhs.acc_d &&
    lhs.tilt == rhs.tilt &&
    lhs.covariance == rhs.covariance &&
    lhs.eigenvalues == rhs.eigenvalues;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::LkfStates_<ContainerAllocator1> & lhs, const ::mrs_msgs::LkfStates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::LkfStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::LkfStates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::LkfStates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::LkfStates_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::LkfStates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::LkfStates_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::LkfStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "14d93260f53a181dfa1b6786648828c5";
  }

  static const char* value(const ::mrs_msgs::LkfStates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x14d93260f53a181dULL;
  static const uint64_t static_value2 = 0xfa1b6786648828c5ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::LkfStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/LkfStates";
  }

  static const char* value(const ::mrs_msgs::LkfStates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::LkfStates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/Header header\n"
"float64 pos\n"
"float64 vel\n"
"float64 acc\n"
"float64 acc_i\n"
"float64 acc_d\n"
"float64 tilt\n"
"float64[6] covariance\n"
"float64[6] eigenvalues\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::mrs_msgs::LkfStates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::LkfStates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.pos);
      stream.next(m.vel);
      stream.next(m.acc);
      stream.next(m.acc_i);
      stream.next(m.acc_d);
      stream.next(m.tilt);
      stream.next(m.covariance);
      stream.next(m.eigenvalues);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LkfStates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::LkfStates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::LkfStates_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "pos: ";
    Printer<double>::stream(s, indent + "  ", v.pos);
    s << indent << "vel: ";
    Printer<double>::stream(s, indent + "  ", v.vel);
    s << indent << "acc: ";
    Printer<double>::stream(s, indent + "  ", v.acc);
    s << indent << "acc_i: ";
    Printer<double>::stream(s, indent + "  ", v.acc_i);
    s << indent << "acc_d: ";
    Printer<double>::stream(s, indent + "  ", v.acc_d);
    s << indent << "tilt: ";
    Printer<double>::stream(s, indent + "  ", v.tilt);
    s << indent << "covariance[]" << std::endl;
    for (size_t i = 0; i < v.covariance.size(); ++i)
    {
      s << indent << "  covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.covariance[i]);
    }
    s << indent << "eigenvalues[]" << std::endl;
    for (size_t i = 0; i < v.eigenvalues.size(); ++i)
    {
      s << indent << "  eigenvalues[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.eigenvalues[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_LKFSTATES_H
