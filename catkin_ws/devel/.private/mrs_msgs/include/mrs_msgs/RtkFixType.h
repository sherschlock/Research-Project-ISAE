// Generated by gencpp from file mrs_msgs/RtkFixType.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_RTKFIXTYPE_H
#define MRS_MSGS_MESSAGE_RTKFIXTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct RtkFixType_
{
  typedef RtkFixType_<ContainerAllocator> Type;

  RtkFixType_()
    : fix_type(0)  {
    }
  RtkFixType_(const ContainerAllocator& _alloc)
    : fix_type(0)  {
  (void)_alloc;
    }



   typedef uint8_t _fix_type_type;
  _fix_type_type fix_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(RTK_FIX)
  #undef RTK_FIX
#endif
#if defined(_WIN32) && defined(RTK_FLOAT)
  #undef RTK_FLOAT
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(DGPS)
  #undef DGPS
#endif
#if defined(_WIN32) && defined(SPS)
  #undef SPS
#endif
#if defined(_WIN32) && defined(NO_FIX)
  #undef NO_FIX
#endif

  enum {
    RTK_FIX = 5u,
    RTK_FLOAT = 4u,
    UNKNOWN = 3u,
    DGPS = 2u,
    SPS = 1u,
    NO_FIX = 0u,
  };


  typedef boost::shared_ptr< ::mrs_msgs::RtkFixType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::RtkFixType_<ContainerAllocator> const> ConstPtr;

}; // struct RtkFixType_

typedef ::mrs_msgs::RtkFixType_<std::allocator<void> > RtkFixType;

typedef boost::shared_ptr< ::mrs_msgs::RtkFixType > RtkFixTypePtr;
typedef boost::shared_ptr< ::mrs_msgs::RtkFixType const> RtkFixTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::RtkFixType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::RtkFixType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::RtkFixType_<ContainerAllocator1> & lhs, const ::mrs_msgs::RtkFixType_<ContainerAllocator2> & rhs)
{
  return lhs.fix_type == rhs.fix_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::RtkFixType_<ContainerAllocator1> & lhs, const ::mrs_msgs::RtkFixType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::RtkFixType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::RtkFixType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::RtkFixType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::RtkFixType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::RtkFixType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::RtkFixType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::RtkFixType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3323b0cae49ed181a81a1139b0a61ca7";
  }

  static const char* value(const ::mrs_msgs::RtkFixType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3323b0cae49ed181ULL;
  static const uint64_t static_value2 = 0xa81a1139b0a61ca7ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::RtkFixType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/RtkFixType";
  }

  static const char* value(const ::mrs_msgs::RtkFixType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::RtkFixType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 RTK_FIX=5\n"
"uint8 RTK_FLOAT=4\n"
"uint8 UNKNOWN=3\n"
"uint8 DGPS=2\n"
"uint8 SPS=1\n"
"uint8 NO_FIX=0\n"
"uint8 fix_type\n"
;
  }

  static const char* value(const ::mrs_msgs::RtkFixType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::RtkFixType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.fix_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RtkFixType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::RtkFixType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::RtkFixType_<ContainerAllocator>& v)
  {
    s << indent << "fix_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fix_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_RTKFIXTYPE_H
