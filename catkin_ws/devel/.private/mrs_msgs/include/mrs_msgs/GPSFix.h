// Generated by gencpp from file mrs_msgs/GPSFix.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_GPSFIX_H
#define MRS_MSGS_MESSAGE_GPSFIX_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <mrs_msgs/GpsStatus.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct GPSFix_
{
  typedef GPSFix_<ContainerAllocator> Type;

  GPSFix_()
    : header()
    , num_satellites_used_in_solution(0)
    , num_satellites_tracked(0)
    , status()
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , track(0.0)
    , speed(0.0)
    , time(0.0)
    , hdop(0.0)
    , position_covariance()
    , position_covariance_type(0)  {
      position_covariance.assign(0.0);
  }
  GPSFix_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , num_satellites_used_in_solution(0)
    , num_satellites_tracked(0)
    , status(_alloc)
    , latitude(0.0)
    , longitude(0.0)
    , altitude(0.0)
    , track(0.0)
    , speed(0.0)
    , time(0.0)
    , hdop(0.0)
    , position_covariance()
    , position_covariance_type(0)  {
  (void)_alloc;
      position_covariance.assign(0.0);
  }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef uint8_t _num_satellites_used_in_solution_type;
  _num_satellites_used_in_solution_type num_satellites_used_in_solution;

   typedef uint8_t _num_satellites_tracked_type;
  _num_satellites_tracked_type num_satellites_tracked;

   typedef  ::mrs_msgs::GpsStatus_<ContainerAllocator>  _status_type;
  _status_type status;

   typedef double _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _track_type;
  _track_type track;

   typedef double _speed_type;
  _speed_type speed;

   typedef double _time_type;
  _time_type time;

   typedef float _hdop_type;
  _hdop_type hdop;

   typedef boost::array<double, 9>  _position_covariance_type;
  _position_covariance_type position_covariance;

   typedef uint8_t _position_covariance_type_type;
  _position_covariance_type_type position_covariance_type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(COVARIANCE_TYPE_UNKNOWN)
  #undef COVARIANCE_TYPE_UNKNOWN
#endif
#if defined(_WIN32) && defined(COVARIANCE_TYPE_APPROXIMATED)
  #undef COVARIANCE_TYPE_APPROXIMATED
#endif
#if defined(_WIN32) && defined(COVARIANCE_TYPE_DIAGONAL_KNOWN)
  #undef COVARIANCE_TYPE_DIAGONAL_KNOWN
#endif
#if defined(_WIN32) && defined(COVARIANCE_TYPE_KNOWN)
  #undef COVARIANCE_TYPE_KNOWN
#endif

  enum {
    COVARIANCE_TYPE_UNKNOWN = 0u,
    COVARIANCE_TYPE_APPROXIMATED = 1u,
    COVARIANCE_TYPE_DIAGONAL_KNOWN = 2u,
    COVARIANCE_TYPE_KNOWN = 3u,
  };


  typedef boost::shared_ptr< ::mrs_msgs::GPSFix_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::GPSFix_<ContainerAllocator> const> ConstPtr;

}; // struct GPSFix_

typedef ::mrs_msgs::GPSFix_<std::allocator<void> > GPSFix;

typedef boost::shared_ptr< ::mrs_msgs::GPSFix > GPSFixPtr;
typedef boost::shared_ptr< ::mrs_msgs::GPSFix const> GPSFixConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::GPSFix_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::GPSFix_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::GPSFix_<ContainerAllocator1> & lhs, const ::mrs_msgs::GPSFix_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.num_satellites_used_in_solution == rhs.num_satellites_used_in_solution &&
    lhs.num_satellites_tracked == rhs.num_satellites_tracked &&
    lhs.status == rhs.status &&
    lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.altitude == rhs.altitude &&
    lhs.track == rhs.track &&
    lhs.speed == rhs.speed &&
    lhs.time == rhs.time &&
    lhs.hdop == rhs.hdop &&
    lhs.position_covariance == rhs.position_covariance &&
    lhs.position_covariance_type == rhs.position_covariance_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::GPSFix_<ContainerAllocator1> & lhs, const ::mrs_msgs::GPSFix_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::GPSFix_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::GPSFix_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::GPSFix_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::GPSFix_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::GPSFix_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::GPSFix_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::GPSFix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bd06547699b65b25dfcdf16f98e57651";
  }

  static const char* value(const ::mrs_msgs::GPSFix_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbd06547699b65b25ULL;
  static const uint64_t static_value2 = 0xdfcdf16f98e57651ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::GPSFix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/GPSFix";
  }

  static const char* value(const ::mrs_msgs::GPSFix_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::GPSFix_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# A more complete GPS fix to supplement sensor_msgs/NavSatFix.\n"
"# modified version of http://docs.ros.org/kinetic/api/gps_common/html/msg/GPSFix.html\n"
"Header header\n"
"\n"
"# Satellites used in solution\n"
"uint8 num_satellites_used_in_solution # Number of satellites\n"
"\n"
"# Satellites visible\n"
"uint8 num_satellites_tracked\n"
"\n"
"# Measurement status\n"
"GpsStatus status\n"
"\n"
"# Latitude (degrees). Positive is north of equator; negative is south.\n"
"float64 latitude\n"
"\n"
"# Longitude (degrees). Positive is east of prime meridian, negative west.\n"
"float32 longitude\n"
"\n"
"# Altitude (meters). Positive is above reference (e.g., sea level).\n"
"float64 altitude\n"
"\n"
"# Direction (degrees from north)\n"
"float64 track\n"
"\n"
"# Ground speed (meters/second)\n"
"float64 speed\n"
"\n"
"# GPS time\n"
"float64 time\n"
"\n"
"## Dilution of precision; Xdop<=0 means the value is unknown\n"
"\n"
"# Horizontal dilution of precision\n"
"float32 hdop\n"
"\n"
"## Uncertainty of measurement, 95% confidence\n"
"\n"
"# Position covariance [m^2] defined relative to a tangential plane\n"
"# through the reported position. The components are East, North, and\n"
"# Up (ENU), in row-major order.\n"
"\n"
"float64[9] position_covariance\n"
"\n"
"uint8 COVARIANCE_TYPE_UNKNOWN = 0\n"
"uint8 COVARIANCE_TYPE_APPROXIMATED = 1\n"
"uint8 COVARIANCE_TYPE_DIAGONAL_KNOWN = 2\n"
"uint8 COVARIANCE_TYPE_KNOWN = 3\n"
"uint8 position_covariance_type\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/GpsStatus\n"
"uint32 quality\n"
"uint32 GPS_QUALITY_NO_FIX=0\n"
"uint32 GPS_QUALITY_SIGLE_POINT=1\n"
"uint32 GPS_QUALITY_PSEUDORANGE_DIFFERENTIAL=2\n"
"uint32 GPS_QUALITY_RTK_FIX=4\n"
"uint32 GPS_QUALITY_RTK_FLOAT=5\n"
;
  }

  static const char* value(const ::mrs_msgs::GPSFix_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::GPSFix_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.num_satellites_used_in_solution);
      stream.next(m.num_satellites_tracked);
      stream.next(m.status);
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.altitude);
      stream.next(m.track);
      stream.next(m.speed);
      stream.next(m.time);
      stream.next(m.hdop);
      stream.next(m.position_covariance);
      stream.next(m.position_covariance_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GPSFix_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::GPSFix_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::GPSFix_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "num_satellites_used_in_solution: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_satellites_used_in_solution);
    s << indent << "num_satellites_tracked: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.num_satellites_tracked);
    s << indent << "status: ";
    s << std::endl;
    Printer< ::mrs_msgs::GpsStatus_<ContainerAllocator> >::stream(s, indent + "  ", v.status);
    s << indent << "latitude: ";
    Printer<double>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "track: ";
    Printer<double>::stream(s, indent + "  ", v.track);
    s << indent << "speed: ";
    Printer<double>::stream(s, indent + "  ", v.speed);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "hdop: ";
    Printer<float>::stream(s, indent + "  ", v.hdop);
    s << indent << "position_covariance[]" << std::endl;
    for (size_t i = 0; i < v.position_covariance.size(); ++i)
    {
      s << indent << "  position_covariance[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.position_covariance[i]);
    }
    s << indent << "position_covariance_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.position_covariance_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_GPSFIX_H
