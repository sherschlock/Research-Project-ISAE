// Generated by gencpp from file mrs_msgs/ModelState.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_MODELSTATE_H
#define MRS_MSGS_MESSAGE_MODELSTATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct ModelState_
{
  typedef ModelState_<ContainerAllocator> Type;

  ModelState_()
    : state(0)  {
    }
  ModelState_(const ContainerAllocator& _alloc)
    : state(0)  {
  (void)_alloc;
    }



   typedef uint8_t _state_type;
  _state_type state;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(TILT)
  #undef TILT
#endif
#if defined(_WIN32) && defined(ACCELERATION)
  #undef ACCELERATION
#endif
#if defined(_WIN32) && defined(VELOCITY)
  #undef VELOCITY
#endif
#if defined(_WIN32) && defined(POSITION)
  #undef POSITION
#endif

  enum {
    TILT = 5u,
    ACCELERATION = 3u,
    VELOCITY = 1u,
    POSITION = 0u,
  };


  typedef boost::shared_ptr< ::mrs_msgs::ModelState_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::ModelState_<ContainerAllocator> const> ConstPtr;

}; // struct ModelState_

typedef ::mrs_msgs::ModelState_<std::allocator<void> > ModelState;

typedef boost::shared_ptr< ::mrs_msgs::ModelState > ModelStatePtr;
typedef boost::shared_ptr< ::mrs_msgs::ModelState const> ModelStateConstPtr;

// constants requiring out of line definition

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::ModelState_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::ModelState_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::ModelState_<ContainerAllocator1> & lhs, const ::mrs_msgs::ModelState_<ContainerAllocator2> & rhs)
{
  return lhs.state == rhs.state;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::ModelState_<ContainerAllocator1> & lhs, const ::mrs_msgs::ModelState_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::ModelState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::ModelState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::ModelState_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::ModelState_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::ModelState_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::ModelState_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::ModelState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a48c55bf77e2f2a8ec2e94f56ea6c941";
  }

  static const char* value(const ::mrs_msgs::ModelState_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa48c55bf77e2f2a8ULL;
  static const uint64_t static_value2 = 0xec2e94f56ea6c941ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::ModelState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/ModelState";
  }

  static const char* value(const ::mrs_msgs::ModelState_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::ModelState_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 TILT=5\n"
"uint8 ACCELERATION=3\n"
"uint8 VELOCITY=1\n"
"uint8 POSITION=0\n"
"uint8 state\n"
;
  }

  static const char* value(const ::mrs_msgs::ModelState_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::ModelState_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.state);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ModelState_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::ModelState_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::ModelState_<ContainerAllocator>& v)
  {
    s << indent << "state: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.state);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_MODELSTATE_H
