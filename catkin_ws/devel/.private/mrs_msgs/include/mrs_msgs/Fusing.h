// Generated by gencpp from file mrs_msgs/Fusing.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_FUSING_H
#define MRS_MSGS_MESSAGE_FUSING_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mrs_msgs/ModelState.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct Fusing_
{
  typedef Fusing_<ContainerAllocator> Type;

  Fusing_()
    : model_state()
    , is_fusing(false)
    , covariance(0.0)  {
    }
  Fusing_(const ContainerAllocator& _alloc)
    : model_state(_alloc)
    , is_fusing(false)
    , covariance(0.0)  {
  (void)_alloc;
    }



   typedef  ::mrs_msgs::ModelState_<ContainerAllocator>  _model_state_type;
  _model_state_type model_state;

   typedef uint8_t _is_fusing_type;
  _is_fusing_type is_fusing;

   typedef double _covariance_type;
  _covariance_type covariance;





  typedef boost::shared_ptr< ::mrs_msgs::Fusing_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::Fusing_<ContainerAllocator> const> ConstPtr;

}; // struct Fusing_

typedef ::mrs_msgs::Fusing_<std::allocator<void> > Fusing;

typedef boost::shared_ptr< ::mrs_msgs::Fusing > FusingPtr;
typedef boost::shared_ptr< ::mrs_msgs::Fusing const> FusingConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::Fusing_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::Fusing_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::Fusing_<ContainerAllocator1> & lhs, const ::mrs_msgs::Fusing_<ContainerAllocator2> & rhs)
{
  return lhs.model_state == rhs.model_state &&
    lhs.is_fusing == rhs.is_fusing &&
    lhs.covariance == rhs.covariance;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::Fusing_<ContainerAllocator1> & lhs, const ::mrs_msgs::Fusing_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Fusing_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::Fusing_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Fusing_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::Fusing_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Fusing_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::Fusing_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::Fusing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "140fb768711cb5688a03db600c114f3f";
  }

  static const char* value(const ::mrs_msgs::Fusing_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x140fb768711cb568ULL;
  static const uint64_t static_value2 = 0x8a03db600c114f3fULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::Fusing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/Fusing";
  }

  static const char* value(const ::mrs_msgs::Fusing_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::Fusing_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/ModelState model_state\n"
"bool is_fusing\n"
"float64 covariance\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/ModelState\n"
"uint8 TILT=5\n"
"uint8 ACCELERATION=3\n"
"uint8 VELOCITY=1\n"
"uint8 POSITION=0\n"
"uint8 state\n"
;
  }

  static const char* value(const ::mrs_msgs::Fusing_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::Fusing_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.model_state);
      stream.next(m.is_fusing);
      stream.next(m.covariance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Fusing_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::Fusing_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::Fusing_<ContainerAllocator>& v)
  {
    s << indent << "model_state: ";
    s << std::endl;
    Printer< ::mrs_msgs::ModelState_<ContainerAllocator> >::stream(s, indent + "  ", v.model_state);
    s << indent << "is_fusing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_fusing);
    s << indent << "covariance: ";
    Printer<double>::stream(s, indent + "  ", v.covariance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_FUSING_H
