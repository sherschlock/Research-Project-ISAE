// Generated by gencpp from file mrs_msgs/ChangeAltEstimatorRequest.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_CHANGEALTESTIMATORREQUEST_H
#define MRS_MSGS_MESSAGE_CHANGEALTESTIMATORREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mrs_msgs/AltitudeType.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct ChangeAltEstimatorRequest_
{
  typedef ChangeAltEstimatorRequest_<ContainerAllocator> Type;

  ChangeAltEstimatorRequest_()
    : estimator_type()  {
    }
  ChangeAltEstimatorRequest_(const ContainerAllocator& _alloc)
    : estimator_type(_alloc)  {
  (void)_alloc;
    }



   typedef  ::mrs_msgs::AltitudeType_<ContainerAllocator>  _estimator_type_type;
  _estimator_type_type estimator_type;





  typedef boost::shared_ptr< ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ChangeAltEstimatorRequest_

typedef ::mrs_msgs::ChangeAltEstimatorRequest_<std::allocator<void> > ChangeAltEstimatorRequest;

typedef boost::shared_ptr< ::mrs_msgs::ChangeAltEstimatorRequest > ChangeAltEstimatorRequestPtr;
typedef boost::shared_ptr< ::mrs_msgs::ChangeAltEstimatorRequest const> ChangeAltEstimatorRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator1> & lhs, const ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator2> & rhs)
{
  return lhs.estimator_type == rhs.estimator_type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator1> & lhs, const ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5687da120c3e2907f1f997699b971de3";
  }

  static const char* value(const ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5687da120c3e2907ULL;
  static const uint64_t static_value2 = 0xf1f997699b971de3ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/ChangeAltEstimatorRequest";
  }

  static const char* value(const ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/AltitudeType estimator_type\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/AltitudeType\n"
"uint8 HEIGHT=0\n"
"uint8 PLANE=1\n"
"uint8 BRICK=2\n"
"uint8 VIO=3\n"
"uint8 ALOAM=4\n"
"uint8 ALOAMGARM=5\n"
"uint8 ALOAMREP=6\n"
"uint8 BARO=7\n"
"uint8 RTK=8\n"
"uint8 LIOSAM=9\n"
"\n"
"uint8 TYPE_COUNT=10\n"
"\n"
"string name\n"
"uint8 type\n"
;
  }

  static const char* value(const ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.estimator_type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ChangeAltEstimatorRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::ChangeAltEstimatorRequest_<ContainerAllocator>& v)
  {
    s << indent << "estimator_type: ";
    s << std::endl;
    Printer< ::mrs_msgs::AltitudeType_<ContainerAllocator> >::stream(s, indent + "  ", v.estimator_type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_CHANGEALTESTIMATORREQUEST_H
