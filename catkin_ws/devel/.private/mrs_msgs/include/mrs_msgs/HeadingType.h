// Generated by gencpp from file mrs_msgs/HeadingType.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_HEADINGTYPE_H
#define MRS_MSGS_MESSAGE_HEADINGTYPE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct HeadingType_
{
  typedef HeadingType_<ContainerAllocator> Type;

  HeadingType_()
    : name()
    , type(0)  {
    }
  HeadingType_(const ContainerAllocator& _alloc)
    : name(_alloc)
    , type(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _name_type;
  _name_type name;

   typedef uint8_t _type_type;
  _type_type type;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(PIXHAWK)
  #undef PIXHAWK
#endif
#if defined(_WIN32) && defined(GYRO)
  #undef GYRO
#endif
#if defined(_WIN32) && defined(COMPASS)
  #undef COMPASS
#endif
#if defined(_WIN32) && defined(OPTFLOW)
  #undef OPTFLOW
#endif
#if defined(_WIN32) && defined(HECTOR)
  #undef HECTOR
#endif
#if defined(_WIN32) && defined(BRICK)
  #undef BRICK
#endif
#if defined(_WIN32) && defined(VIO)
  #undef VIO
#endif
#if defined(_WIN32) && defined(VSLAM)
  #undef VSLAM
#endif
#if defined(_WIN32) && defined(ICP)
  #undef ICP
#endif
#if defined(_WIN32) && defined(BRICKFLOW)
  #undef BRICKFLOW
#endif
#if defined(_WIN32) && defined(ALOAM)
  #undef ALOAM
#endif
#if defined(_WIN32) && defined(ALOAMREP)
  #undef ALOAMREP
#endif
#if defined(_WIN32) && defined(LIOSAM)
  #undef LIOSAM
#endif
#if defined(_WIN32) && defined(TYPE_COUNT)
  #undef TYPE_COUNT
#endif

  enum {
    PIXHAWK = 0u,
    GYRO = 1u,
    COMPASS = 2u,
    OPTFLOW = 3u,
    HECTOR = 4u,
    BRICK = 5u,
    VIO = 6u,
    VSLAM = 7u,
    ICP = 8u,
    BRICKFLOW = 9u,
    ALOAM = 10u,
    ALOAMREP = 11u,
    LIOSAM = 12u,
    TYPE_COUNT = 13u,
  };


  typedef boost::shared_ptr< ::mrs_msgs::HeadingType_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::HeadingType_<ContainerAllocator> const> ConstPtr;

}; // struct HeadingType_

typedef ::mrs_msgs::HeadingType_<std::allocator<void> > HeadingType;

typedef boost::shared_ptr< ::mrs_msgs::HeadingType > HeadingTypePtr;
typedef boost::shared_ptr< ::mrs_msgs::HeadingType const> HeadingTypeConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::HeadingType_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::HeadingType_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::HeadingType_<ContainerAllocator1> & lhs, const ::mrs_msgs::HeadingType_<ContainerAllocator2> & rhs)
{
  return lhs.name == rhs.name &&
    lhs.type == rhs.type;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::HeadingType_<ContainerAllocator1> & lhs, const ::mrs_msgs::HeadingType_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::HeadingType_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::HeadingType_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::HeadingType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::HeadingType_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::HeadingType_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::HeadingType_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::HeadingType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "4575f57d7ab2d67fda5521732eca4e89";
  }

  static const char* value(const ::mrs_msgs::HeadingType_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x4575f57d7ab2d67fULL;
  static const uint64_t static_value2 = 0xda5521732eca4e89ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::HeadingType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/HeadingType";
  }

  static const char* value(const ::mrs_msgs::HeadingType_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::HeadingType_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 PIXHAWK=0\n"
"uint8 GYRO=1\n"
"uint8 COMPASS=2\n"
"uint8 OPTFLOW=3\n"
"uint8 HECTOR=4\n"
"uint8 BRICK=5\n"
"uint8 VIO=6\n"
"uint8 VSLAM=7\n"
"uint8 ICP=8\n"
"uint8 BRICKFLOW=9\n"
"uint8 ALOAM=10\n"
"uint8 ALOAMREP=11\n"
"uint8 LIOSAM=12\n"
"\n"
"uint8 TYPE_COUNT=13\n"
"\n"
"string name\n"
"uint8 type\n"
;
  }

  static const char* value(const ::mrs_msgs::HeadingType_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::HeadingType_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.name);
      stream.next(m.type);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct HeadingType_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::HeadingType_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::HeadingType_<ContainerAllocator>& v)
  {
    s << indent << "name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.name);
    s << indent << "type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.type);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_HEADINGTYPE_H
