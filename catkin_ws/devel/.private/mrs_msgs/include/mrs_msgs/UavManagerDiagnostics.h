// Generated by gencpp from file mrs_msgs/UavManagerDiagnostics.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_UAVMANAGERDIAGNOSTICS_H
#define MRS_MSGS_MESSAGE_UAVMANAGERDIAGNOSTICS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct UavManagerDiagnostics_
{
  typedef UavManagerDiagnostics_<ContainerAllocator> Type;

  UavManagerDiagnostics_()
    : stamp()
    , uav_name()
    , home_latitude(0.0)
    , home_longitude(0.0)
    , cur_latitude(0.0)
    , cur_longitude(0.0)
    , flight_time(0.0)  {
    }
  UavManagerDiagnostics_(const ContainerAllocator& _alloc)
    : stamp()
    , uav_name(_alloc)
    , home_latitude(0.0)
    , home_longitude(0.0)
    , cur_latitude(0.0)
    , cur_longitude(0.0)
    , flight_time(0.0)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _uav_name_type;
  _uav_name_type uav_name;

   typedef double _home_latitude_type;
  _home_latitude_type home_latitude;

   typedef double _home_longitude_type;
  _home_longitude_type home_longitude;

   typedef double _cur_latitude_type;
  _cur_latitude_type cur_latitude;

   typedef double _cur_longitude_type;
  _cur_longitude_type cur_longitude;

   typedef double _flight_time_type;
  _flight_time_type flight_time;





  typedef boost::shared_ptr< ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator> const> ConstPtr;

}; // struct UavManagerDiagnostics_

typedef ::mrs_msgs::UavManagerDiagnostics_<std::allocator<void> > UavManagerDiagnostics;

typedef boost::shared_ptr< ::mrs_msgs::UavManagerDiagnostics > UavManagerDiagnosticsPtr;
typedef boost::shared_ptr< ::mrs_msgs::UavManagerDiagnostics const> UavManagerDiagnosticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator1> & lhs, const ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.uav_name == rhs.uav_name &&
    lhs.home_latitude == rhs.home_latitude &&
    lhs.home_longitude == rhs.home_longitude &&
    lhs.cur_latitude == rhs.cur_latitude &&
    lhs.cur_longitude == rhs.cur_longitude &&
    lhs.flight_time == rhs.flight_time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator1> & lhs, const ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "36596a45f051bddf37b9b0dd00de0c80";
  }

  static const char* value(const ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x36596a45f051bddfULL;
  static const uint64_t static_value2 = 0x37b9b0dd00de0c80ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/UavManagerDiagnostics";
  }

  static const char* value(const ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# This reports on the state of the UavManager\n"
"\n"
"time stamp\n"
"\n"
"string uav_name\n"
"\n"
"# home position latitude and longitude, if available\n"
"float64 home_latitude\n"
"float64 home_longitude\n"
"\n"
"# current latitude and longitude, if available\n"
"float64 cur_latitude\n"
"float64 cur_longitude\n"
"\n"
"float64 flight_time # [s]\n"
;
  }

  static const char* value(const ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.uav_name);
      stream.next(m.home_latitude);
      stream.next(m.home_longitude);
      stream.next(m.cur_latitude);
      stream.next(m.cur_longitude);
      stream.next(m.flight_time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UavManagerDiagnostics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::UavManagerDiagnostics_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "uav_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.uav_name);
    s << indent << "home_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.home_latitude);
    s << indent << "home_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.home_longitude);
    s << indent << "cur_latitude: ";
    Printer<double>::stream(s, indent + "  ", v.cur_latitude);
    s << indent << "cur_longitude: ";
    Printer<double>::stream(s, indent + "  ", v.cur_longitude);
    s << indent << "flight_time: ";
    Printer<double>::stream(s, indent + "  ", v.flight_time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_UAVMANAGERDIAGNOSTICS_H
