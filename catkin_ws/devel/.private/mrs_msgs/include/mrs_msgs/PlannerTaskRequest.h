// Generated by gencpp from file mrs_msgs/PlannerTaskRequest.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_PLANNERTASKREQUEST_H
#define MRS_MSGS_MESSAGE_PLANNERTASKREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct PlannerTaskRequest_
{
  typedef PlannerTaskRequest_<ContainerAllocator> Type;

  PlannerTaskRequest_()
    : start()
    , finish()  {
      start.assign(0.0);

      finish.assign(0.0);
  }
  PlannerTaskRequest_(const ContainerAllocator& _alloc)
    : start()
    , finish()  {
  (void)_alloc;
      start.assign(0.0);

      finish.assign(0.0);
  }



   typedef boost::array<double, 4>  _start_type;
  _start_type start;

   typedef boost::array<double, 4>  _finish_type;
  _finish_type finish;





  typedef boost::shared_ptr< ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PlannerTaskRequest_

typedef ::mrs_msgs::PlannerTaskRequest_<std::allocator<void> > PlannerTaskRequest;

typedef boost::shared_ptr< ::mrs_msgs::PlannerTaskRequest > PlannerTaskRequestPtr;
typedef boost::shared_ptr< ::mrs_msgs::PlannerTaskRequest const> PlannerTaskRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator1> & lhs, const ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator2> & rhs)
{
  return lhs.start == rhs.start &&
    lhs.finish == rhs.finish;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator1> & lhs, const ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fc7a992ce57a87d85ab82f783318094d";
  }

  static const char* value(const ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xfc7a992ce57a87d8ULL;
  static const uint64_t static_value2 = 0x5ab82f783318094dULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/PlannerTaskRequest";
  }

  static const char* value(const ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64[4] start\n"
"float64[4] finish\n"
;
  }

  static const char* value(const ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.start);
      stream.next(m.finish);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PlannerTaskRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::PlannerTaskRequest_<ContainerAllocator>& v)
  {
    s << indent << "start[]" << std::endl;
    for (size_t i = 0; i < v.start.size(); ++i)
    {
      s << indent << "  start[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.start[i]);
    }
    s << indent << "finish[]" << std::endl;
    for (size_t i = 0; i < v.finish.size(); ++i)
    {
      s << indent << "  finish[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.finish[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_PLANNERTASKREQUEST_H
