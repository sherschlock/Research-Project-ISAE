// Generated by gencpp from file mrs_msgs/CustomTopic.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_CUSTOMTOPIC_H
#define MRS_MSGS_MESSAGE_CUSTOMTOPIC_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct CustomTopic_
{
  typedef CustomTopic_<ContainerAllocator> Type;

  CustomTopic_()
    : topic_name()
    , topic_hz(0.0)
    , topic_color(0)  {
    }
  CustomTopic_(const ContainerAllocator& _alloc)
    : topic_name(_alloc)
    , topic_hz(0.0)
    , topic_color(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _topic_name_type;
  _topic_name_type topic_name;

   typedef float _topic_hz_type;
  _topic_hz_type topic_hz;

   typedef int16_t _topic_color_type;
  _topic_color_type topic_color;





  typedef boost::shared_ptr< ::mrs_msgs::CustomTopic_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::CustomTopic_<ContainerAllocator> const> ConstPtr;

}; // struct CustomTopic_

typedef ::mrs_msgs::CustomTopic_<std::allocator<void> > CustomTopic;

typedef boost::shared_ptr< ::mrs_msgs::CustomTopic > CustomTopicPtr;
typedef boost::shared_ptr< ::mrs_msgs::CustomTopic const> CustomTopicConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::CustomTopic_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::CustomTopic_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::CustomTopic_<ContainerAllocator1> & lhs, const ::mrs_msgs::CustomTopic_<ContainerAllocator2> & rhs)
{
  return lhs.topic_name == rhs.topic_name &&
    lhs.topic_hz == rhs.topic_hz &&
    lhs.topic_color == rhs.topic_color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::CustomTopic_<ContainerAllocator1> & lhs, const ::mrs_msgs::CustomTopic_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::CustomTopic_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::CustomTopic_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::CustomTopic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::CustomTopic_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::CustomTopic_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::CustomTopic_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::CustomTopic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "eb521c01a11f857100125253e2150a98";
  }

  static const char* value(const ::mrs_msgs::CustomTopic_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xeb521c01a11f8571ULL;
  static const uint64_t static_value2 = 0x00125253e2150a98ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::CustomTopic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/CustomTopic";
  }

  static const char* value(const ::mrs_msgs::CustomTopic_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::CustomTopic_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string topic_name\n"
"float32 topic_hz\n"
"int16 topic_color\n"
;
  }

  static const char* value(const ::mrs_msgs::CustomTopic_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::CustomTopic_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.topic_name);
      stream.next(m.topic_hz);
      stream.next(m.topic_color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct CustomTopic_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::CustomTopic_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::CustomTopic_<ContainerAllocator>& v)
  {
    s << indent << "topic_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.topic_name);
    s << indent << "topic_hz: ";
    Printer<float>::stream(s, indent + "  ", v.topic_hz);
    s << indent << "topic_color: ";
    Printer<int16_t>::stream(s, indent + "  ", v.topic_color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_CUSTOMTOPIC_H
