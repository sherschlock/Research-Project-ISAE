// Generated by gencpp from file mrs_msgs/VelocityReference.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_VELOCITYREFERENCE_H
#define MRS_MSGS_MESSAGE_VELOCITYREFERENCE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct VelocityReference_
{
  typedef VelocityReference_<ContainerAllocator> Type;

  VelocityReference_()
    : velocity()
    , altitude(0.0)
    , heading(0.0)
    , heading_rate(0.0)
    , use_altitude(false)
    , use_heading(false)
    , use_heading_rate(false)  {
    }
  VelocityReference_(const ContainerAllocator& _alloc)
    : velocity(_alloc)
    , altitude(0.0)
    , heading(0.0)
    , heading_rate(0.0)
    , use_altitude(false)
    , use_heading(false)
    , use_heading_rate(false)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _velocity_type;
  _velocity_type velocity;

   typedef double _altitude_type;
  _altitude_type altitude;

   typedef double _heading_type;
  _heading_type heading;

   typedef double _heading_rate_type;
  _heading_rate_type heading_rate;

   typedef uint8_t _use_altitude_type;
  _use_altitude_type use_altitude;

   typedef uint8_t _use_heading_type;
  _use_heading_type use_heading;

   typedef uint8_t _use_heading_rate_type;
  _use_heading_rate_type use_heading_rate;





  typedef boost::shared_ptr< ::mrs_msgs::VelocityReference_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::VelocityReference_<ContainerAllocator> const> ConstPtr;

}; // struct VelocityReference_

typedef ::mrs_msgs::VelocityReference_<std::allocator<void> > VelocityReference;

typedef boost::shared_ptr< ::mrs_msgs::VelocityReference > VelocityReferencePtr;
typedef boost::shared_ptr< ::mrs_msgs::VelocityReference const> VelocityReferenceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::VelocityReference_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::VelocityReference_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::VelocityReference_<ContainerAllocator1> & lhs, const ::mrs_msgs::VelocityReference_<ContainerAllocator2> & rhs)
{
  return lhs.velocity == rhs.velocity &&
    lhs.altitude == rhs.altitude &&
    lhs.heading == rhs.heading &&
    lhs.heading_rate == rhs.heading_rate &&
    lhs.use_altitude == rhs.use_altitude &&
    lhs.use_heading == rhs.use_heading &&
    lhs.use_heading_rate == rhs.use_heading_rate;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::VelocityReference_<ContainerAllocator1> & lhs, const ::mrs_msgs::VelocityReference_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::VelocityReference_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::VelocityReference_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::VelocityReference_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::VelocityReference_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::VelocityReference_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::VelocityReference_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::VelocityReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2348b640862acc25f552bfe7973e0390";
  }

  static const char* value(const ::mrs_msgs::VelocityReference_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2348b640862acc25ULL;
  static const uint64_t static_value2 = 0xf552bfe7973e0390ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::VelocityReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/VelocityReference";
  }

  static const char* value(const ::mrs_msgs::VelocityReference_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::VelocityReference_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# desired velocity [m/s]\n"
"geometry_msgs/Vector3 velocity\n"
"\n"
"# altitude\n"
"float64 altitude\n"
"\n"
"# desired heading and its rate, optional\n"
"# heading is \"the azimuth of the body-x axis of the drone, a.k.a, the aircraft's front\"\n"
"float64 heading\n"
"float64 heading_rate\n"
"\n"
"# overrides vertical velocity\n"
"bool use_altitude\n"
"\n"
"bool use_heading\n"
"\n"
"# overrides heading\n"
"bool use_heading_rate\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::mrs_msgs::VelocityReference_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::VelocityReference_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.velocity);
      stream.next(m.altitude);
      stream.next(m.heading);
      stream.next(m.heading_rate);
      stream.next(m.use_altitude);
      stream.next(m.use_heading);
      stream.next(m.use_heading_rate);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VelocityReference_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::VelocityReference_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::VelocityReference_<ContainerAllocator>& v)
  {
    s << indent << "velocity: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.velocity);
    s << indent << "altitude: ";
    Printer<double>::stream(s, indent + "  ", v.altitude);
    s << indent << "heading: ";
    Printer<double>::stream(s, indent + "  ", v.heading);
    s << indent << "heading_rate: ";
    Printer<double>::stream(s, indent + "  ", v.heading_rate);
    s << indent << "use_altitude: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_altitude);
    s << indent << "use_heading: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_heading);
    s << indent << "use_heading_rate: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_heading_rate);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_VELOCITYREFERENCE_H
