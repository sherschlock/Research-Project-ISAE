// Generated by gencpp from file mrs_msgs/NimbroTestSrvRequest.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_NIMBROTESTSRVREQUEST_H
#define MRS_MSGS_MESSAGE_NIMBROTESTSRVREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct NimbroTestSrvRequest_
{
  typedef NimbroTestSrvRequest_<ContainerAllocator> Type;

  NimbroTestSrvRequest_()
    : uav_name()
    , payload()  {
    }
  NimbroTestSrvRequest_(const ContainerAllocator& _alloc)
    : uav_name(_alloc)
    , payload(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _uav_name_type;
  _uav_name_type uav_name;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _payload_type;
  _payload_type payload;





  typedef boost::shared_ptr< ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator> const> ConstPtr;

}; // struct NimbroTestSrvRequest_

typedef ::mrs_msgs::NimbroTestSrvRequest_<std::allocator<void> > NimbroTestSrvRequest;

typedef boost::shared_ptr< ::mrs_msgs::NimbroTestSrvRequest > NimbroTestSrvRequestPtr;
typedef boost::shared_ptr< ::mrs_msgs::NimbroTestSrvRequest const> NimbroTestSrvRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator1> & lhs, const ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator2> & rhs)
{
  return lhs.uav_name == rhs.uav_name &&
    lhs.payload == rhs.payload;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator1> & lhs, const ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1d07aba1adb623fa05f416a9d16b2afc";
  }

  static const char* value(const ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1d07aba1adb623faULL;
  static const uint64_t static_value2 = 0x05f416a9d16b2afcULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/NimbroTestSrvRequest";
  }

  static const char* value(const ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string uav_name\n"
"float64[] payload\n"
"\n"
;
  }

  static const char* value(const ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.uav_name);
      stream.next(m.payload);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct NimbroTestSrvRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::NimbroTestSrvRequest_<ContainerAllocator>& v)
  {
    s << indent << "uav_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.uav_name);
    s << indent << "payload[]" << std::endl;
    for (size_t i = 0; i < v.payload.size(); ++i)
    {
      s << indent << "  payload[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.payload[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_NIMBROTESTSRVREQUEST_H
