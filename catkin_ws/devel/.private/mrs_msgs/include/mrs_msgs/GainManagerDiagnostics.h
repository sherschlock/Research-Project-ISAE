// Generated by gencpp from file mrs_msgs/GainManagerDiagnostics.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_GAINMANAGERDIAGNOSTICS_H
#define MRS_MSGS_MESSAGE_GAINMANAGERDIAGNOSTICS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <mrs_msgs/Se3Gains.h>

namespace mrs_msgs
{
template <class ContainerAllocator>
struct GainManagerDiagnostics_
{
  typedef GainManagerDiagnostics_<ContainerAllocator> Type;

  GainManagerDiagnostics_()
    : stamp()
    , loaded()
    , available()
    , current_name()
    , current_values()  {
    }
  GainManagerDiagnostics_(const ContainerAllocator& _alloc)
    : stamp()
    , loaded(_alloc)
    , available(_alloc)
    , current_name(_alloc)
    , current_values(_alloc)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _loaded_type;
  _loaded_type loaded;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _available_type;
  _available_type available;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _current_name_type;
  _current_name_type current_name;

   typedef  ::mrs_msgs::Se3Gains_<ContainerAllocator>  _current_values_type;
  _current_values_type current_values;





  typedef boost::shared_ptr< ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator> const> ConstPtr;

}; // struct GainManagerDiagnostics_

typedef ::mrs_msgs::GainManagerDiagnostics_<std::allocator<void> > GainManagerDiagnostics;

typedef boost::shared_ptr< ::mrs_msgs::GainManagerDiagnostics > GainManagerDiagnosticsPtr;
typedef boost::shared_ptr< ::mrs_msgs::GainManagerDiagnostics const> GainManagerDiagnosticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator1> & lhs, const ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.loaded == rhs.loaded &&
    lhs.available == rhs.available &&
    lhs.current_name == rhs.current_name &&
    lhs.current_values == rhs.current_values;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator1> & lhs, const ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "24039f9a2906ae6c07ed9b74d96b96e7";
  }

  static const char* value(const ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x24039f9a2906ae6cULL;
  static const uint64_t static_value2 = 0x07ed9b74d96b96e7ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/GainManagerDiagnostics";
  }

  static const char* value(const ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# The diagnostics of the GainManager.\n"
"\n"
"time stamp\n"
"\n"
"# The list of all loaded gains.\n"
"string[] loaded\n"
"\n"
"# The list of gains which are available for the currently active state estimator.\n"
"string[] available\n"
"\n"
"# The name of the current gains.\n"
"string current_name\n"
"\n"
"# The particular values of the current gains.\n"
"mrs_msgs/Se3Gains current_values\n"
"\n"
"================================================================================\n"
"MSG: mrs_msgs/Se3Gains\n"
"# This a set of gains for the SE(3) controller.\n"
"\n"
"# Horizontal position gain.\n"
"float64 kpxy\n"
"\n"
"# Horizontal velocity gain.\n"
"float64 kvxy\n"
"\n"
"# Horizontal acceleration gain.\n"
"float64 kaxy\n"
"\n"
"# Vertical position gain.\n"
"float64 kpz\n"
"\n"
"# Vertical velocity gain.\n"
"float64 kvz\n"
"\n"
"# Vertical acceleration gain.\n"
"float64 kaz\n"
"\n"
"# Roll+pitch attitude gain.\n"
"float64 kqxy\n"
"\n"
"# Body disturbance gain.\n"
"float64 kibxy\n"
"\n"
"# Body disturbance estimator limit ([N]).\n"
"float64 kibxy_lim\n"
"\n"
"# World disturbance gain.\n"
"float64 kiwxy\n"
"\n"
"# World disturbance estimator limit  ([N]).\n"
"float64 kiwxy_lim\n"
"\n"
"# Yaw attitude gain.\n"
"float64 kqz\n"
"\n"
"# Mass estimator gain.\n"
"float64 km\n"
"\n"
"# Mass estimator limit ([m]).\n"
"float64 km_lim\n"
;
  }

  static const char* value(const ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.loaded);
      stream.next(m.available);
      stream.next(m.current_name);
      stream.next(m.current_values);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GainManagerDiagnostics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::GainManagerDiagnostics_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "loaded[]" << std::endl;
    for (size_t i = 0; i < v.loaded.size(); ++i)
    {
      s << indent << "  loaded[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.loaded[i]);
    }
    s << indent << "available[]" << std::endl;
    for (size_t i = 0; i < v.available.size(); ++i)
    {
      s << indent << "  available[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.available[i]);
    }
    s << indent << "current_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.current_name);
    s << indent << "current_values: ";
    s << std::endl;
    Printer< ::mrs_msgs::Se3Gains_<ContainerAllocator> >::stream(s, indent + "  ", v.current_values);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_GAINMANAGERDIAGNOSTICS_H
