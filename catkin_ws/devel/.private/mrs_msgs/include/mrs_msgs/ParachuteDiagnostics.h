// Generated by gencpp from file mrs_msgs/ParachuteDiagnostics.msg
// DO NOT EDIT!


#ifndef MRS_MSGS_MESSAGE_PARACHUTEDIAGNOSTICS_H
#define MRS_MSGS_MESSAGE_PARACHUTEDIAGNOSTICS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mrs_msgs
{
template <class ContainerAllocator>
struct ParachuteDiagnostics_
{
  typedef ParachuteDiagnostics_<ContainerAllocator> Type;

  ParachuteDiagnostics_()
    : stamp()
    , alive(false)
    , armed(false)
    , fired(false)  {
    }
  ParachuteDiagnostics_(const ContainerAllocator& _alloc)
    : stamp()
    , alive(false)
    , armed(false)
    , fired(false)  {
  (void)_alloc;
    }



   typedef ros::Time _stamp_type;
  _stamp_type stamp;

   typedef uint8_t _alive_type;
  _alive_type alive;

   typedef uint8_t _armed_type;
  _armed_type armed;

   typedef uint8_t _fired_type;
  _fired_type fired;





  typedef boost::shared_ptr< ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator> const> ConstPtr;

}; // struct ParachuteDiagnostics_

typedef ::mrs_msgs::ParachuteDiagnostics_<std::allocator<void> > ParachuteDiagnostics;

typedef boost::shared_ptr< ::mrs_msgs::ParachuteDiagnostics > ParachuteDiagnosticsPtr;
typedef boost::shared_ptr< ::mrs_msgs::ParachuteDiagnostics const> ParachuteDiagnosticsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator1> & lhs, const ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator2> & rhs)
{
  return lhs.stamp == rhs.stamp &&
    lhs.alive == rhs.alive &&
    lhs.armed == rhs.armed &&
    lhs.fired == rhs.fired;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator1> & lhs, const ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace mrs_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "432cf17f44e8b7c1519f8ae5a6317641";
  }

  static const char* value(const ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x432cf17f44e8b7c1ULL;
  static const uint64_t static_value2 = 0x519f8ae5a6317641ULL;
};

template<class ContainerAllocator>
struct DataType< ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mrs_msgs/ParachuteDiagnostics";
  }

  static const char* value(const ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator> >
{
  static const char* value()
  {
    return "time stamp\n"
"\n"
"# If this value is false, the low level driver is not responding and parachute will not work\n"
"bool alive\n"
"\n"
"# Parachute is armed and ready to be fired\n"
"bool armed \n"
"\n"
"# Parachute has been already fired\n"
"bool fired \n"
;
  }

  static const char* value(const ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.stamp);
      stream.next(m.alive);
      stream.next(m.armed);
      stream.next(m.fired);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParachuteDiagnostics_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mrs_msgs::ParachuteDiagnostics_<ContainerAllocator>& v)
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "alive: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.alive);
    s << indent << "armed: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.armed);
    s << indent << "fired: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.fired);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MRS_MSGS_MESSAGE_PARACHUTEDIAGNOSTICS_H
